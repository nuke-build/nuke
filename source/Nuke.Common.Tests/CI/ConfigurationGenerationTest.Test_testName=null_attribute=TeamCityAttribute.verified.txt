// ------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated.
//
//     - To turn off auto-generation set:
//
//         [TestTeamCity (AutoGenerate = false)]
//
//     - To trigger manual generation invoke:
//
//         nuke --generate-configuration TeamCity --host TeamCity
//
// </auto-generated>
// ------------------------------------------------------------------------------

import jetbrains.buildServer.configs.kotlin.v2018_1.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildFeatures.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildSteps.*
import jetbrains.buildServer.configs.kotlin.v2018_1.triggers.*
import jetbrains.buildServer.configs.kotlin.v2018_1.vcs.*

version = "1.3.3.7"

project {
    buildType(Restore)
    buildType(Compile)
    buildType(Test_P1T2)
    buildType(Test_P2T2)
    buildType(Test)
    buildType(Coverage)
    buildType(Pack)
    buildType(Publish)
    buildType(Announce)

    buildTypesOrder = arrayListOf(Restore, Compile, Test_P1T2, Test_P2T2, Test, Coverage, Pack, Publish, Announce)

    params {
        select (
            "env.Verbosity",
            label = "Verbosity",
            description = "Logging verbosity during build execution. Default is 'Normal'.",
            value = "Normal",
            options = listOf("Minimal" to "Minimal", "Normal" to "Normal", "Quiet" to "Quiet", "Verbose" to "Verbose"),
            display = ParameterDisplay.NORMAL)
        checkbox (
            "env.IgnoreFailedSources",
            label = "IgnoreFailedSources",
            value = "False",
            checked = "True",
            unchecked = "False",
            display = ParameterDisplay.NORMAL)
        select (
            "env.Configuration",
            label = "Configuration",
            description = "Configuration for compilation",
            value = "Debug",
            options = listOf("Debug" to "Debug", "Release" to "Release"),
            display = ParameterDisplay.NORMAL)
        text (
            "env.StringArray",
            label = "StringArray",
            value = "first second",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        text (
            "env.IntegerArray",
            label = "IntegerArray",
            value = "1 2",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        text (
            "env.ConfigurationArray",
            label = "ConfigurationArray",
            value = "Debug Release",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        text (
            "env.Source",
            label = "Source",
            description = "NuGet Source for Packages",
            value = "https://api.nuget.org/v3/index.json",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        text (
            "env.GitHubToken",
            label = "GitHubToken",
            description = "GitHub Token",
            value = "",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        text (
            "env.AzurePipelinesSystemAccessToken",
            label = "AzurePipelinesSystemAccessToken",
            description = "Azure Pipelines System Access Token",
            value = "",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        param(
            "teamcity.runner.commandline.stdstreams.encoding",
            "UTF-8"
        )
    }
}
object Restore : BuildType({
    name = "Restore"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "src/*/obj/** => src"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Restore --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Restore --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Restore"
        )
    }
})
object Compile : BuildType({
    name = "Compile"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "src/*/bin/** => src"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Compile --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Compile --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Compile"
        )
    }
    dependencies {
        snapshot(Restore) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object Test_P1T2 : BuildType({
    name = "Test 1/2"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = """
        output/test-results/*.trx => output/test-results
        output/test-results/*.xml => output/test-results
    """.trimIndent()
    steps {
        exec {
            path = "build.cmd"
            arguments = "Test --skip --test-partition 1"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Test --skip --test-partition 1"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    dependencies {
        snapshot(Compile) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object Test_P2T2 : BuildType({
    name = "Test 2/2"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = """
        output/test-results/*.trx => output/test-results
        output/test-results/*.xml => output/test-results
    """.trimIndent()
    steps {
        exec {
            path = "build.cmd"
            arguments = "Test --skip --test-partition 2"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Test --skip --test-partition 2"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    dependencies {
        snapshot(Compile) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object Test : BuildType({
    name = "Test"
    type = Type.COMPOSITE
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
        showDependenciesChanges = true
    }
    artifactRules = "**/*"
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Test"
        )
    }
    triggers {
        vcs {
            branchFilter = "vcs_branch_filter"
            triggerRules = "+:**"
        }
    }
    dependencies {
        snapshot(Test_P1T2) {
            onDependencyFailure = FailureAction.ADD_PROBLEM
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(Test_P2T2) {
            onDependencyFailure = FailureAction.ADD_PROBLEM
            onDependencyCancel = FailureAction.CANCEL
        }
        artifacts(Test_P1T2) {
            artifactRules = "**/*"
        }
        artifacts(Test_P2T2) {
            artifactRules = "**/*"
        }
    }
})
object Coverage : BuildType({
    name = "Coverage"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "output/coverage-report.zip => output"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Coverage --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Coverage --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Coverage"
        )
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Test.id}"
        }
    }
    dependencies {
        snapshot(Test) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        artifacts(Test) {
            artifactRules = """
                output/test-results/*.trx => output/test-results
                output/test-results/*.xml => output/test-results
            """.trimIndent()
        }
    }
})
object Pack : BuildType({
    name = "Pack"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    artifactRules = "output/packages/*.nupkg => output/packages"
    steps {
        exec {
            path = "build.cmd"
            arguments = "Pack --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Pack --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Pack"
        )
    }
    triggers {
        vcs {
            branchFilter = "vcs_branch_filter"
            triggerRules = "+:**"
        }
    }
    dependencies {
        snapshot(Compile) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        artifacts(Restore) {
            artifactRules = "src/*/obj/** => src"
        }
        artifacts(Compile) {
            artifactRules = "src/*/bin/** => src"
        }
    }
})
object Publish : BuildType({
    name = "Publish"
    type = Type.DEPLOYMENT
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "Clean Publish --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Clean Publish --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        text (
            "env.ApiKey",
            label = "ApiKey",
            description = "NuGet Api Key",
            value = "",
            allowEmpty = false,
            display = ParameterDisplay.PROMPT)
        param(
            "teamcity.ui.runButton.caption",
            "Publish"
        )
    }
    triggers {
        schedule {
            schedulingPolicy = daily {
                hour = 3
            }
            branchFilter = "nightly_branch_filter"
            triggerRules = "+:**"
            triggerBuild = always()
            withPendingChangesOnly = false
            enableQueueOptimization = true
            param("cronExpression_min", "3")
        }
    }
    dependencies {
        snapshot(Test) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(Pack) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        artifacts(Pack) {
            artifactRules = "output/packages/*.nupkg => output/packages"
        }
    }
})
object Announce : BuildType({
    name = "Announce"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "build.cmd"
            arguments = "Announce --skip"
            conditions { contains("teamcity.agent.jvm.os.family", "Windows") }
        }
        exec {
            path = "build.sh"
            arguments = "Announce --skip"
            conditions { doesNotContain("teamcity.agent.jvm.os.family", "Windows") }
        }
    }
    params {
        param(
            "teamcity.ui.runButton.caption",
            "Announce"
        )
    }
    triggers {
        finishBuildTrigger {
            buildType = "${Publish.id}"
        }
    }
})
