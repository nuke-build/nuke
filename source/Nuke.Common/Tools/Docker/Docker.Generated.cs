// Generated from https://github.com/nuke-build/nuke/blob/master/source/Nuke.Common/Tools/Docker/Docker.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.Docker;

/// <summary><p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[PathToolRequirement(PathExecutable)]
[PathTool(Executable = PathExecutable)]
public partial class DockerTasks : ToolTasks, IRequirePathTool
{
    public static string DockerPath => new DockerTasks().GetToolPath();
    public const string PathExecutable = "docker";
    /// <summary><p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    public static IReadOnlyCollection<Output> Docker(ArgumentStringHandler arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Action<OutputType, string> logger = null, Func<IProcess, object> exitHandler = null) => new DockerTasks().Run(arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, logger, exitHandler);
    /// <summary><p>Remove one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigRm(DockerConfigRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigRm(Configure<DockerConfigRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerConfigRmSettings()));
    /// <summary><p>Remove one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerConfigRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigRm(CombinatorialConfigure<DockerConfigRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerConfigRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLoad(DockerLoadSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLoad(Configure<DockerLoadSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerLoadSettings()));
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerLoad(CombinatorialConfigure<DockerLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerLoad, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove all stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPrune(DockerContainerPruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove all stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPrune(Configure<DockerContainerPruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerPruneSettings()));
    /// <summary><p>Remove all stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPrune(CombinatorialConfigure<DockerContainerPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerPrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage trust on Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrust(DockerTrustSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage trust on Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrust(Configure<DockerTrustSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustSettings()));
    /// <summary><p>Manage trust on Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrust(CombinatorialConfigure<DockerTrustSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrust, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Docker stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStack(DockerStackSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Docker stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStack(Configure<DockerStackSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackSettings()));
    /// <summary><p>Manage Docker stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStackSettings Settings, IReadOnlyCollection<Output> Output)> DockerStack(CombinatorialConfigure<DockerStackSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStack, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTop(DockerTopSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTop(Configure<DockerTopSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTopSettings()));
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTopSettings Settings, IReadOnlyCollection<Output> Output)> DockerTop(CombinatorialConfigure<DockerTopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTop, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPull(DockerPullSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPull(Configure<DockerPullSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPullSettings()));
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPullSettings Settings, IReadOnlyCollection<Output> Output)> DockerPull(CombinatorialConfigure<DockerPullSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPull, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Sign an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSign(DockerTrustSignSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Sign an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSign(Configure<DockerTrustSignSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustSignSettings()));
    /// <summary><p>Sign an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustSignSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSign(CombinatorialConfigure<DockerTrustSignSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustSign, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage checkpoints.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpoint(DockerCheckpointSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage checkpoints.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpoint(Configure<DockerCheckpointSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCheckpointSettings()));
    /// <summary><p>Manage checkpoints.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerCheckpointSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpoint(CombinatorialConfigure<DockerCheckpointSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCheckpoint, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage entities who can sign Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSigner(DockerTrustSignerSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage entities who can sign Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSigner(Configure<DockerTrustSignerSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustSignerSettings()));
    /// <summary><p>Manage entities who can sign Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustSignerSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSigner(CombinatorialConfigure<DockerTrustSignerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustSigner, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigInspect(DockerConfigInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigInspect(Configure<DockerConfigInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerConfigInspectSettings()));
    /// <summary><p>Display detailed information on one or more configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerConfigInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigInspect(CombinatorialConfigure<DockerConfigInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerConfigInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerService(DockerServiceSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerService(Configure<DockerServiceSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceSettings()));
    /// <summary><p>Manage services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceSettings Settings, IReadOnlyCollection<Output> Output)> DockerService(CombinatorialConfigure<DockerServiceSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerService, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generate and load a signing key-pair.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKeyGenerate(DockerTrustKeyGenerateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Generate and load a signing key-pair.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKeyGenerate(Configure<DockerTrustKeyGenerateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustKeyGenerateSettings()));
    /// <summary><p>Generate and load a signing key-pair.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustKeyGenerateSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKeyGenerate(CombinatorialConfigure<DockerTrustKeyGenerateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustKeyGenerate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Docker.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystem(DockerSystemSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Docker.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystem(Configure<DockerSystemSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSystemSettings()));
    /// <summary><p>Manage Docker.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSystemSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystem(CombinatorialConfigure<DockerSystemSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSystem, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigLs(DockerConfigLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigLs(Configure<DockerConfigLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerConfigLsSettings()));
    /// <summary><p>List configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerConfigLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigLs(CombinatorialConfigure<DockerConfigLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerConfigLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li><li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextUpdate(DockerContextUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li><li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextUpdate(Configure<DockerContextUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextUpdateSettings()));
    /// <summary><p>Update a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li><li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextUpdate(CombinatorialConfigure<DockerContextUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List the services in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackServices(DockerStackServicesSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List the services in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackServices(Configure<DockerStackServicesSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackServicesSettings()));
    /// <summary><p>List the services in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStackServicesSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackServices(CombinatorialConfigure<DockerStackServicesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStackServices, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPort(DockerContainerPortSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPort(Configure<DockerContainerPortSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerPortSettings()));
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerPortSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPort(CombinatorialConfigure<DockerContainerPortSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerPort, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRename(DockerRenameSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRename(Configure<DockerRenameSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerRenameSettings()));
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerRenameSettings Settings, IReadOnlyCollection<Output> Output)> DockerRename(CombinatorialConfigure<DockerRenameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerRename, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTag(DockerTagSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTag(Configure<DockerTagSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTagSettings()));
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTagSettings Settings, IReadOnlyCollection<Output> Output)> DockerTag(CombinatorialConfigure<DockerTagSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTag, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretInspect(DockerSecretInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretInspect(Configure<DockerSecretInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSecretInspectSettings()));
    /// <summary><p>Display detailed information on one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSecretInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretInspect(CombinatorialConfigure<DockerSecretInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSecretInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Docker secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecret(DockerSecretSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Docker secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecret(Configure<DockerSecretSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSecretSettings()));
    /// <summary><p>Manage Docker secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSecretSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecret(CombinatorialConfigure<DockerSecretSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSecret, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerExport(DockerContainerExportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerExport(Configure<DockerContainerExportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerExportSettings()));
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerExport(CombinatorialConfigure<DockerContainerExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerExport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerHistory(DockerHistorySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerHistory(Configure<DockerHistorySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerHistorySettings()));
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerHistorySettings Settings, IReadOnlyCollection<Output> Output)> DockerHistory(CombinatorialConfigure<DockerHistorySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerHistory, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li><li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li><li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li><li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li><li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li><li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li><li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li><li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li><li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li><li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li><li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li><li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li><li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li><li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li><li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li><li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li><li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceCreate(DockerServiceCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li><li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li><li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li><li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li><li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li><li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li><li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li><li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li><li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li><li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li><li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li><li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li><li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li><li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li><li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li><li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li><li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceCreate(Configure<DockerServiceCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceCreateSettings()));
    /// <summary><p>Create a new service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li><li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li><li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li><li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li><li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li><li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li><li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li><li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li><li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li><li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li><li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li><li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li><li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li><li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li><li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li><li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li><li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceCreate(CombinatorialConfigure<DockerServiceCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List the tasks of one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServicePs(DockerServicePsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List the tasks of one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServicePs(Configure<DockerServicePsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServicePsSettings()));
    /// <summary><p>List the tasks of one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServicePsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServicePs(CombinatorialConfigure<DockerServicePsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServicePs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStop(DockerStopSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStop(Configure<DockerStopSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStopSettings()));
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStopSettings Settings, IReadOnlyCollection<Output> Output)> DockerStop(CombinatorialConfigure<DockerStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStop, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Swarm nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNode(DockerNodeSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Swarm nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNode(Configure<DockerNodeSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeSettings()));
    /// <summary><p>Manage Swarm nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeSettings Settings, IReadOnlyCollection<Output> Output)> DockerNode(CombinatorialConfigure<DockerNodeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNode, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerUpdate(DockerUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerUpdate(Configure<DockerUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerUpdateSettings()));
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerUpdate(CombinatorialConfigure<DockerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li><li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li><li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginCreate(DockerPluginCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li><li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li><li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginCreate(Configure<DockerPluginCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginCreateSettings()));
    /// <summary><p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li><li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li><li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginCreate(CombinatorialConfigure<DockerPluginCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemInfo(DockerSystemInfoSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemInfo(Configure<DockerSystemInfoSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSystemInfoSettings()));
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSystemInfoSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemInfo(CombinatorialConfigure<DockerSystemInfoSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSystemInfo, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove all unused local volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumePrune(DockerVolumePruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove all unused local volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumePrune(Configure<DockerVolumePruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumePruneSettings()));
    /// <summary><p>Remove all unused local volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumePruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumePrune(CombinatorialConfigure<DockerVolumePruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolumePrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Upgrade an existing plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li><li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginUpgrade(DockerPluginUpgradeSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Upgrade an existing plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li><li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginUpgrade(Configure<DockerPluginUpgradeSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginUpgradeSettings()));
    /// <summary><p>Upgrade an existing plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li><li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginUpgradeSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginUpgrade(CombinatorialConfigure<DockerPluginUpgradeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginUpgrade, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove build cache.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilderPrune(DockerBuilderPruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove build cache.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilderPrune(Configure<DockerBuilderPruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuilderPruneSettings()));
    /// <summary><p>Remove build cache.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerBuilderPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilderPrune(CombinatorialConfigure<DockerBuilderPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuilderPrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage join tokens.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmJoinToken(DockerSwarmJoinTokenSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage join tokens.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmJoinToken(Configure<DockerSwarmJoinTokenSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmJoinTokenSettings()));
    /// <summary><p>Manage join tokens.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmJoinTokenSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmJoinToken(CombinatorialConfigure<DockerSwarmJoinTokenSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmJoinToken, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update a node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li><li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeUpdate(DockerNodeUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update a node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li><li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeUpdate(Configure<DockerNodeUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeUpdateSettings()));
    /// <summary><p>Update a node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li><li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeUpdate(CombinatorialConfigure<DockerNodeUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodeUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Add a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSignerAdd(DockerTrustSignerAddSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Add a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSignerAdd(Configure<DockerTrustSignerAddSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustSignerAddSettings()));
    /// <summary><p>Add a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustSignerAddSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSignerAdd(CombinatorialConfigure<DockerTrustSignerAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustSignerAdd, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUpdate(DockerSwarmUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUpdate(Configure<DockerSwarmUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmUpdateSettings()));
    /// <summary><p>Update the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUpdate(CombinatorialConfigure<DockerSwarmUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Fetch the logs of a service or task.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li><li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li><li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li><li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li><li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceLogs(DockerServiceLogsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Fetch the logs of a service or task.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li><li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li><li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li><li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li><li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceLogs(Configure<DockerServiceLogsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceLogsSettings()));
    /// <summary><p>Fetch the logs of a service or task.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li><li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li><li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li><li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li><li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceLogs(CombinatorialConfigure<DockerServiceLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceLogs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceLs(DockerServiceLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceLs(Configure<DockerServiceLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceLsSettings()));
    /// <summary><p>List services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceLs(CombinatorialConfigure<DockerServiceLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Unlock swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUnlock(DockerSwarmUnlockSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Unlock swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUnlock(Configure<DockerSwarmUnlockSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmUnlockSettings()));
    /// <summary><p>Unlock swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmUnlockSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUnlock(CombinatorialConfigure<DockerSwarmUnlockSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmUnlock, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkLs(DockerNetworkLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkLs(Configure<DockerNetworkLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkLsSettings()));
    /// <summary><p>List networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkLs(CombinatorialConfigure<DockerNetworkLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginLs(DockerPluginLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginLs(Configure<DockerPluginLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginLsSettings()));
    /// <summary><p>List plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginLs(CombinatorialConfigure<DockerPluginLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginRm(DockerPluginRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginRm(Configure<DockerPluginRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginRmSettings()));
    /// <summary><p>Remove one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginRm(CombinatorialConfigure<DockerPluginRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageBuild(DockerImageBuildSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageBuild(Configure<DockerImageBuildSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageBuildSettings()));
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li></ul></remarks>
    public static IEnumerable<(DockerImageBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageBuild(CombinatorialConfigure<DockerImageBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageBuild, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove trust for an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustRevoke(DockerTrustRevokeSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove trust for an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustRevoke(Configure<DockerTrustRevokeSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustRevokeSettings()));
    /// <summary><p>Remove trust for an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustRevokeSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustRevoke(CombinatorialConfigure<DockerTrustRevokeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustRevoke, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRmi(DockerRmiSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRmi(Configure<DockerRmiSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerRmiSettings()));
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerRmiSettings Settings, IReadOnlyCollection<Output> Output)> DockerRmi(CombinatorialConfigure<DockerRmiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerRmi, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkRm(DockerNetworkRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkRm(Configure<DockerNetworkRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkRmSettings()));
    /// <summary><p>Remove one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkRm(CombinatorialConfigure<DockerNetworkRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Show the Docker version information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVersion(DockerVersionSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Show the Docker version information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVersion(Configure<DockerVersionSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVersionSettings()));
    /// <summary><p>Show the Docker version information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVersionSettings Settings, IReadOnlyCollection<Output> Output)> DockerVersion(CombinatorialConfigure<DockerVersionSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVersion, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a secret from a file or STDIN as content.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li><li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretCreate(DockerSecretCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a secret from a file or STDIN as content.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li><li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretCreate(Configure<DockerSecretCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSecretCreateSettings()));
    /// <summary><p>Create a secret from a file or STDIN as content.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li><li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSecretCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretCreate(CombinatorialConfigure<DockerSecretCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSecretCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceRm(DockerServiceRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceRm(Configure<DockerServiceRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceRmSettings()));
    /// <summary><p>Remove one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceRm(CombinatorialConfigure<DockerServiceRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Load a private key file for signing.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKeyLoad(DockerTrustKeyLoadSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Load a private key file for signing.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKeyLoad(Configure<DockerTrustKeyLoadSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustKeyLoadSettings()));
    /// <summary><p>Load a private key file for signing.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustKeyLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKeyLoad(CombinatorialConfigure<DockerTrustKeyLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustKeyLoad, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretRm(DockerSecretRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretRm(Configure<DockerSecretRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSecretRmSettings()));
    /// <summary><p>Remove one or more secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSecretRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretRm(CombinatorialConfigure<DockerSecretRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSecretRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageInspect(DockerImageInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageInspect(Configure<DockerImageInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageInspectSettings()));
    /// <summary><p>Display detailed information on one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageInspect(CombinatorialConfigure<DockerImageInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageSave(DockerImageSaveSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageSave(Configure<DockerImageSaveSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageSaveSettings()));
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageSaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageSave(CombinatorialConfigure<DockerImageSaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageSave, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage keys for signing Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKey(DockerTrustKeySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage keys for signing Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustKey(Configure<DockerTrustKeySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustKeySettings()));
    /// <summary><p>Manage keys for signing Docker images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustKeySettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKey(CombinatorialConfigure<DockerTrustKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustKey, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerAttach(DockerContainerAttachSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerAttach(Configure<DockerContainerAttachSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerAttachSettings()));
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerAttachSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerAttach(CombinatorialConfigure<DockerContainerAttachSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerAttach, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li><li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li><li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextCreate(DockerContextCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li><li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li><li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextCreate(Configure<DockerContextCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextCreateSettings()));
    /// <summary><p>Create a context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li><li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li><li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li><li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li><li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextCreate(CombinatorialConfigure<DockerContextCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a config from a file or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigCreate(DockerConfigCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a config from a file or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfigCreate(Configure<DockerConfigCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerConfigCreateSettings()));
    /// <summary><p>Create a config from a file or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerConfigCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigCreate(CombinatorialConfigure<DockerConfigCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerConfigCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeInspect(DockerVolumeInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeInspect(Configure<DockerVolumeInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumeInspectSettings()));
    /// <summary><p>Display detailed information on one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumeInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeInspect(CombinatorialConfigure<DockerVolumeInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolumeInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStop(DockerContainerStopSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStop(Configure<DockerContainerStopSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerStopSettings()));
    /// <summary><p>Stop one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerStopSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStop(CombinatorialConfigure<DockerContainerStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerStop, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove all unused networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkPrune(DockerNetworkPruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove all unused networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkPrune(Configure<DockerNetworkPruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkPruneSettings()));
    /// <summary><p>Remove all unused networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkPrune(CombinatorialConfigure<DockerNetworkPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkPrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display an image manifest, or manifest list.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestInspect(DockerManifestInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display an image manifest, or manifest list.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestInspect(Configure<DockerManifestInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerManifestInspectSettings()));
    /// <summary><p>Display an image manifest, or manifest list.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(DockerManifestInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestInspect(CombinatorialConfigure<DockerManifestInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerManifestInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerInfo(DockerInfoSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerInfo(Configure<DockerInfoSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerInfoSettings()));
    /// <summary><p>Display system-wide information.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerInfoSettings Settings, IReadOnlyCollection<Output> Output)> DockerInfo(CombinatorialConfigure<DockerInfoSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerInfo, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCommit(DockerCommitSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCommit(Configure<DockerCommitSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCommitSettings()));
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerCommitSettings Settings, IReadOnlyCollection<Output> Output)> DockerCommit(CombinatorialConfigure<DockerCommitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCommit, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackDeploy(DockerStackDeploySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackDeploy(Configure<DockerStackDeploySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackDeploySettings()));
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IEnumerable<(DockerStackDeploySettings Settings, IReadOnlyCollection<Output> Output)> DockerStackDeploy(CombinatorialConfigure<DockerStackDeploySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStackDeploy, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Scale one or multiple replicated services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceScale(DockerServiceScaleSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Scale one or multiple replicated services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceScale(Configure<DockerServiceScaleSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceScaleSettings()));
    /// <summary><p>Scale one or multiple replicated services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceScaleSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceScale(CombinatorialConfigure<DockerServiceScaleSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceScale, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRun(DockerRunSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRun(Configure<DockerRunSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerRunSettings()));
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerRunSettings Settings, IReadOnlyCollection<Output> Output)> DockerRun(CombinatorialConfigure<DockerRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerRun, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCreate(DockerCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCreate(Configure<DockerCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCreateSettings()));
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerCreate(CombinatorialConfigure<DockerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update a service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li><li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li><li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li><li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li><li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li><li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li><li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li><li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li><li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li><li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li><li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li><li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li><li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li><li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li><li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li><li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li><li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li><li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li><li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li><li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li><li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li><li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li><li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li><li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li><li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li><li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li><li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li><li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li><li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li><li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li><li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li><li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li><li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li><li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li><li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li><li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li><li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li><li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li><li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li><li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceUpdate(DockerServiceUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update a service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li><li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li><li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li><li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li><li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li><li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li><li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li><li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li><li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li><li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li><li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li><li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li><li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li><li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li><li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li><li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li><li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li><li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li><li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li><li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li><li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li><li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li><li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li><li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li><li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li><li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li><li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li><li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li><li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li><li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li><li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li><li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li><li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li><li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li><li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li><li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li><li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li><li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li><li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li><li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceUpdate(Configure<DockerServiceUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceUpdateSettings()));
    /// <summary><p>Update a service.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li><li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li><li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li><li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li><li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li><li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li><li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li><li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li><li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li><li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li><li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li><li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li><li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li><li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li><li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li><li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li><li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li><li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li><li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li><li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li><li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li><li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li><li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li><li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li><li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li><li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li><li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li><li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li><li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li><li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li><li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li><li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li><li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li><li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li><li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li><li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li><li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li><li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li><li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li><li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li><li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li><li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li><li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li><li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li><li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li><li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li><li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li><li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li><li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li><li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li><li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li><li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li><li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li><li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li><li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li><li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li><li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li><li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li><li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li><li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li><li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li><li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li><li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li><li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li><li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li><li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li><li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li><li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li><li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li><li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li><li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li><li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li><li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li><li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li><li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li><li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li><li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceUpdate(CombinatorialConfigure<DockerServiceUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPort(DockerPortSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPort(Configure<DockerPortSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPortSettings()));
    /// <summary><p>List port mappings or a specific mapping for the container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li><li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPortSettings Settings, IReadOnlyCollection<Output> Output)> DockerPort(CombinatorialConfigure<DockerPortSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPort, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainer(DockerContainerSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainer(Configure<DockerContainerSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerSettings()));
    /// <summary><p>Manage containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainer(CombinatorialConfigure<DockerContainerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainer, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePush(DockerImagePushSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePush(Configure<DockerImagePushSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImagePushSettings()));
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImagePushSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePush(CombinatorialConfigure<DockerImagePushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImagePush, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceInspect(DockerServiceInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceInspect(Configure<DockerServiceInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceInspectSettings()));
    /// <summary><p>Display detailed information on one or more services.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceInspect(CombinatorialConfigure<DockerServiceInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Connect a container to a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li><li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li><li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li><li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkConnect(DockerNetworkConnectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Connect a container to a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li><li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li><li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li><li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkConnect(Configure<DockerNetworkConnectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkConnectSettings()));
    /// <summary><p>Connect a container to a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li><li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li><li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li><li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkConnectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkConnect(CombinatorialConfigure<DockerNetworkConnectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkConnect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretLs(DockerSecretLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSecretLs(Configure<DockerSecretLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSecretLsSettings()));
    /// <summary><p>List secrets.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSecretLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretLs(CombinatorialConfigure<DockerSecretLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSecretLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Leave the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmLeave(DockerSwarmLeaveSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Leave the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmLeave(Configure<DockerSwarmLeaveSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmLeaveSettings()));
    /// <summary><p>Leave the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmLeaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmLeave(CombinatorialConfigure<DockerSwarmLeaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmLeave, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImages(DockerImagesSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImages(Configure<DockerImagesSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImagesSettings()));
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImagesSettings Settings, IReadOnlyCollection<Output> Output)> DockerImages(CombinatorialConfigure<DockerImagesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImages, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update a local engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineUpdate(DockerEngineUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update a local engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineUpdate(Configure<DockerEngineUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerEngineUpdateSettings()));
    /// <summary><p>Update a local engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li></ul></remarks>
    public static IEnumerable<(DockerEngineUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineUpdate(CombinatorialConfigure<DockerEngineUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerEngineUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemEvents(DockerSystemEventsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemEvents(Configure<DockerSystemEventsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSystemEventsSettings()));
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li></ul></remarks>
    public static IEnumerable<(DockerSystemEventsSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemEvents(CombinatorialConfigure<DockerSystemEventsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSystemEvents, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Return low-level information on Docker objects.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerInspect(DockerInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Return low-level information on Docker objects.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerInspect(Configure<DockerInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerInspectSettings()));
    /// <summary><p>Return low-level information on Docker objects.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li></ul></remarks>
    public static IEnumerable<(DockerInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerInspect(CombinatorialConfigure<DockerInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Check for available engine updates.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li><li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li><li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineCheck(DockerEngineCheckSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Check for available engine updates.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li><li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li><li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineCheck(Configure<DockerEngineCheckSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerEngineCheckSettings()));
    /// <summary><p>Check for available engine updates.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li><li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li><li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li></ul></remarks>
    public static IEnumerable<(DockerEngineCheckSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineCheck(CombinatorialConfigure<DockerEngineCheckSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerEngineCheck, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerAttach(DockerAttachSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerAttach(Configure<DockerAttachSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerAttachSettings()));
    /// <summary><p>Attach local standard input, output, and error streams to a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li><li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerAttachSettings Settings, IReadOnlyCollection<Output> Output)> DockerAttach(CombinatorialConfigure<DockerAttachSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerAttach, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerWait(DockerContainerWaitSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerWait(Configure<DockerContainerWaitSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerWaitSettings()));
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerWaitSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerWait(CombinatorialConfigure<DockerContainerWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerWait, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display and rotate the root CA.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li><li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmCa(DockerSwarmCaSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display and rotate the root CA.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li><li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmCa(Configure<DockerSwarmCaSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmCaSettings()));
    /// <summary><p>Display and rotate the root CA.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li><li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmCaSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmCa(CombinatorialConfigure<DockerSwarmCaSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmCa, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage the docker engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngine(DockerEngineSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage the docker engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngine(Configure<DockerEngineSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerEngineSettings()));
    /// <summary><p>Manage the docker engine.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerEngineSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngine(CombinatorialConfigure<DockerEngineSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerEngine, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove unused data.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemPrune(DockerSystemPruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove unused data.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemPrune(Configure<DockerSystemPruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSystemPruneSettings()));
    /// <summary><p>Remove unused data.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li></ul></remarks>
    public static IEnumerable<(DockerSystemPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemPrune(CombinatorialConfigure<DockerSystemPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSystemPrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage builds.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilder(DockerBuilderSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage builds.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilder(Configure<DockerBuilderSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuilderSettings()));
    /// <summary><p>Manage builds.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerBuilderSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilder(CombinatorialConfigure<DockerBuilderSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuilder, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPause(DockerContainerPauseSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerPause(Configure<DockerContainerPauseSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerPauseSettings()));
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerPauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPause(CombinatorialConfigure<DockerContainerPauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerPause, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerCommit(DockerContainerCommitSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerCommit(Configure<DockerContainerCommitSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerCommitSettings()));
    /// <summary><p>Create a new image from a container's changes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li><li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li><li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li><li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerCommitSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerCommit(CombinatorialConfigure<DockerContainerCommitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerCommit, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextLs(DockerContextLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextLs(Configure<DockerContextLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextLsSettings()));
    /// <summary><p>List contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextLs(CombinatorialConfigure<DockerContextLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextRm(DockerContextRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextRm(Configure<DockerContextRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextRmSettings()));
    /// <summary><p>Remove one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextRm(CombinatorialConfigure<DockerContextRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List the tasks in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li><li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackPs(DockerStackPsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List the tasks in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li><li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackPs(Configure<DockerStackPsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackPsSettings()));
    /// <summary><p>List the tasks in the stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li><li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStackPsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackPs(CombinatorialConfigure<DockerStackPsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStackPs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerCreate(DockerContainerCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerCreate(Configure<DockerContainerCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerCreateSettings()));
    /// <summary><p>Create a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerCreate(CombinatorialConfigure<DockerContainerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a volume.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li><li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeCreate(DockerVolumeCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a volume.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li><li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeCreate(Configure<DockerVolumeCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumeCreateSettings()));
    /// <summary><p>Create a volume.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li><li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li><li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumeCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeCreate(CombinatorialConfigure<DockerVolumeCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolumeCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPlugin(DockerPluginSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPlugin(Configure<DockerPluginSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginSettings()));
    /// <summary><p>Manage plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginSettings Settings, IReadOnlyCollection<Output> Output)> DockerPlugin(CombinatorialConfigure<DockerPluginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPlugin, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Log in to a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogin(DockerLoginSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Log in to a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogin(Configure<DockerLoginSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerLoginSettings()));
    /// <summary><p>Log in to a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li></ul></remarks>
    public static IEnumerable<(DockerLoginSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogin(CombinatorialConfigure<DockerLoginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerLogin, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage the unlock key.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUnlockKey(DockerSwarmUnlockKeySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage the unlock key.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmUnlockKey(Configure<DockerSwarmUnlockKeySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmUnlockKeySettings()));
    /// <summary><p>Manage the unlock key.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li><li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmUnlockKeySettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUnlockKey(CombinatorialConfigure<DockerSwarmUnlockKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmUnlockKey, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStart(DockerStartSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStart(Configure<DockerStartSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStartSettings()));
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStartSettings Settings, IReadOnlyCollection<Output> Output)> DockerStart(CombinatorialConfigure<DockerStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStart, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Initialize a swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li><li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li><li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li><li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li><li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li><li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmInit(DockerSwarmInitSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Initialize a swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li><li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li><li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li><li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li><li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li><li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmInit(Configure<DockerSwarmInitSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmInitSettings()));
    /// <summary><p>Initialize a swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li><li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li><li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li><li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li><li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li><li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li><li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li><li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li><li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li><li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li><li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmInitSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmInit(CombinatorialConfigure<DockerSwarmInitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmInit, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerDiff(DockerContainerDiffSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerDiff(Configure<DockerContainerDiffSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerDiffSettings()));
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerDiffSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerDiff(CombinatorialConfigure<DockerContainerDiffSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerDiff, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRestart(DockerContainerRestartSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRestart(Configure<DockerContainerRestartSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerRestartSettings()));
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerRestartSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRestart(CombinatorialConfigure<DockerContainerRestartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerRestart, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Docker configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfig(DockerConfigSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Docker configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerConfig(Configure<DockerConfigSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerConfigSettings()));
    /// <summary><p>Manage Docker configs.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerConfigSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfig(CombinatorialConfigure<DockerConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerConfig, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Disable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginDisable(DockerPluginDisableSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Disable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginDisable(Configure<DockerPluginDisableSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginDisableSettings()));
    /// <summary><p>Disable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginDisableSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginDisable(CombinatorialConfigure<DockerPluginDisableSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginDisable, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerUnpause(DockerContainerUnpauseSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerUnpause(Configure<DockerContainerUnpauseSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerUnpauseSettings()));
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerUnpauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerUnpause(CombinatorialConfigure<DockerContainerUnpauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerUnpause, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Import a context from a tar or zip file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextImport(DockerContextImportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Import a context from a tar or zip file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextImport(Configure<DockerContextImportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextImportSettings()));
    /// <summary><p>Import a context from a tar or zip file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextImport(CombinatorialConfigure<DockerContextImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextImport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRm(DockerRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRm(Configure<DockerRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerRmSettings()));
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li></ul></remarks>
    public static IEnumerable<(DockerRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerRm(CombinatorialConfigure<DockerRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerDeploy(DockerDeploySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerDeploy(Configure<DockerDeploySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerDeploySettings()));
    /// <summary><p>Deploy a new stack or update an existing stack.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li><li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li><li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li><li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li><li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li></ul></remarks>
    public static IEnumerable<(DockerDeploySettings Settings, IReadOnlyCollection<Output> Output)> DockerDeploy(CombinatorialConfigure<DockerDeploySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerDeploy, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more nodes from the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeRm(DockerNodeRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more nodes from the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeRm(Configure<DockerNodeRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeRmSettings()));
    /// <summary><p>Remove one or more nodes from the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeRm(CombinatorialConfigure<DockerNodeRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodeRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove a checkpoint.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointRm(DockerCheckpointRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove a checkpoint.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointRm(Configure<DockerCheckpointRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCheckpointRmSettings()));
    /// <summary><p>Remove a checkpoint.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerCheckpointRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointRm(CombinatorialConfigure<DockerCheckpointRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCheckpointRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPush(DockerPushSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPush(Configure<DockerPushSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPushSettings()));
    /// <summary><p>Push an image or a repository to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerPushSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerPush(CombinatorialConfigure<DockerPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPush, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li><li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li><li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li><li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li><li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li><li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li><li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li><li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li><li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li><li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li><li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li><li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li><li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li><li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkCreate(DockerNetworkCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li><li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li><li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li><li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li><li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li><li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li><li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li><li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li><li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li><li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li><li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li><li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li><li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li><li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkCreate(Configure<DockerNetworkCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkCreateSettings()));
    /// <summary><p>Create a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li><li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li><li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li><li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li><li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li><li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li><li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li><li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li><li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li><li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li><li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li><li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li><li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li><li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkCreate(CombinatorialConfigure<DockerNetworkCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeLs(DockerVolumeLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeLs(Configure<DockerVolumeLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumeLsSettings()));
    /// <summary><p>List volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumeLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeLs(CombinatorialConfigure<DockerVolumeLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolumeLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Return low-level information about keys and signatures.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustInspect(DockerTrustInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Return low-level information about keys and signatures.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustInspect(Configure<DockerTrustInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustInspectSettings()));
    /// <summary><p>Return low-level information about keys and signatures.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustInspect(CombinatorialConfigure<DockerTrustInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkInspect(DockerNetworkInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkInspect(Configure<DockerNetworkInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkInspectSettings()));
    /// <summary><p>Display detailed information on one or more networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkInspect(CombinatorialConfigure<DockerNetworkInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Activate Enterprise Edition.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li><li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li><li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineActivate(DockerEngineActivateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Activate Enterprise Edition.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li><li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li><li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEngineActivate(Configure<DockerEngineActivateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerEngineActivateSettings()));
    /// <summary><p>Activate Enterprise Edition.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li><li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li><li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li><li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li><li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li></ul></remarks>
    public static IEnumerable<(DockerEngineActivateSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineActivate(CombinatorialConfigure<DockerEngineActivateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerEngineActivate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Set the current docker context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextUse(DockerContextUseSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Set the current docker context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextUse(Configure<DockerContextUseSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextUseSettings()));
    /// <summary><p>Set the current docker context.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextUseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextUse(CombinatorialConfigure<DockerContextUseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextUse, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeRm(DockerVolumeRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolumeRm(Configure<DockerVolumeRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumeRmSettings()));
    /// <summary><p>Remove one or more volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumeRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeRm(CombinatorialConfigure<DockerVolumeRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolumeRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a local manifest list for annotating and pushing to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li><li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestCreate(DockerManifestCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a local manifest list for annotating and pushing to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li><li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestCreate(Configure<DockerManifestCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerManifestCreateSettings()));
    /// <summary><p>Create a local manifest list for annotating and pushing to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li><li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerManifestCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestCreate(CombinatorialConfigure<DockerManifestCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerManifestCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Push a manifest list to a repository.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestPush(DockerManifestPushSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Push a manifest list to a repository.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestPush(Configure<DockerManifestPushSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerManifestPushSettings()));
    /// <summary><p>Push a manifest list to a repository.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerManifestPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestPush(CombinatorialConfigure<DockerManifestPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerManifestPush, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Enable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginEnable(DockerPluginEnableSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Enable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginEnable(Configure<DockerPluginEnableSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginEnableSettings()));
    /// <summary><p>Enable a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginEnableSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginEnable(CombinatorialConfigure<DockerPluginEnableSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginEnable, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImport(DockerImportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImport(Configure<DockerImportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImportSettings()));
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerImport(CombinatorialConfigure<DockerImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRun(DockerContainerRunSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRun(Configure<DockerContainerRunSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerRunSettings()));
    /// <summary><p>Run a command in a new container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li><li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li><li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li><li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li><li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li><li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li><li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li><li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li><li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li><li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li><li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li><li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li><li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li><li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li><li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li><li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li><li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li><li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li><li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li><li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li><li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li><li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li><li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li><li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li><li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li><li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li><li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li><li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li><li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li><li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li><li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li><li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li><li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li><li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li><li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li><li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li><li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li><li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li><li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li><li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li><li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li><li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li><li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li><li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li><li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li><li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li><li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li><li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li><li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li><li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li><li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li><li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li><li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li><li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li><li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li><li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li><li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li><li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li><li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li><li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li><li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li><li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li><li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li><li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li><li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li><li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li><li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li><li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li><li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li><li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li><li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li><li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li><li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li><li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li><li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li><li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li><li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li><li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li><li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li><li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li><li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li><li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li><li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li><li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerRunSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRun(CombinatorialConfigure<DockerContainerRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerRun, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeInspect(DockerNodeInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeInspect(Configure<DockerNodeInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeInspectSettings()));
    /// <summary><p>Display detailed information on one or more nodes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeInspect(CombinatorialConfigure<DockerNodeInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodeInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSave(DockerSaveSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSave(Configure<DockerSaveSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSaveSettings()));
    /// <summary><p>Save one or more images to a tar archive (streamed to STDOUT by default).</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerSave(CombinatorialConfigure<DockerSaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSave, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStats(DockerContainerStatsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStats(Configure<DockerContainerStatsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerStatsSettings()));
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerStatsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStats(CombinatorialConfigure<DockerContainerStatsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerStats, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerExec(DockerContainerExecSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerExec(Configure<DockerContainerExecSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerExecSettings()));
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerExecSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerExec(CombinatorialConfigure<DockerContainerExecSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerExec, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List nodes in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeLs(DockerNodeLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List nodes in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeLs(Configure<DockerNodeLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeLsSettings()));
    /// <summary><p>List nodes in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeLs(CombinatorialConfigure<DockerNodeLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodeLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Join a swarm as a node and/or manager.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li><li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmJoin(DockerSwarmJoinSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Join a swarm as a node and/or manager.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li><li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarmJoin(Configure<DockerSwarmJoinSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmJoinSettings()));
    /// <summary><p>Join a swarm as a node and/or manager.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li><li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmJoinSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmJoin(CombinatorialConfigure<DockerSwarmJoinSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarmJoin, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerLogs(DockerContainerLogsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerLogs(Configure<DockerContainerLogsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerLogsSettings()));
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerLogs(CombinatorialConfigure<DockerContainerLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerLogs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List checkpoints for a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointLs(DockerCheckpointLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List checkpoints for a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointLs(Configure<DockerCheckpointLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCheckpointLsSettings()));
    /// <summary><p>List checkpoints for a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerCheckpointLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointLs(CombinatorialConfigure<DockerCheckpointLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCheckpointLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerKill(DockerContainerKillSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerKill(Configure<DockerContainerKillSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerKillSettings()));
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerKillSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerKill(CombinatorialConfigure<DockerContainerKillSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerKill, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Install a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li><li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginInstall(DockerPluginInstallSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Install a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li><li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginInstall(Configure<DockerPluginInstallSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginInstallSettings()));
    /// <summary><p>Install a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li><li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li><li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginInstallSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginInstall(CombinatorialConfigure<DockerPluginInstallSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginInstall, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove unused images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePrune(DockerImagePruneSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove unused images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePrune(Configure<DockerImagePruneSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImagePruneSettings()));
    /// <summary><p>Remove unused images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li><li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImagePruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePrune(CombinatorialConfigure<DockerImagePruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImagePrune, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageImport(DockerImageImportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageImport(Configure<DockerImageImportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageImportSettings()));
    /// <summary><p>Import the contents from a tarball to create a filesystem image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li><li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li><li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li><li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageImport(CombinatorialConfigure<DockerImageImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageImport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerDiff(DockerDiffSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerDiff(Configure<DockerDiffSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerDiffSettings()));
    /// <summary><p>Inspect changes to files or directories on a container's filesystem.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerDiffSettings Settings, IReadOnlyCollection<Output> Output)> DockerDiff(CombinatorialConfigure<DockerDiffSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerDiff, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerUnpause(DockerUnpauseSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerUnpause(Configure<DockerUnpauseSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerUnpauseSettings()));
    /// <summary><p>Unpause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerUnpauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerUnpause(CombinatorialConfigure<DockerUnpauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerUnpause, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerLs(DockerContainerLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerLs(Configure<DockerContainerLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerLsSettings()));
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerLs(CombinatorialConfigure<DockerContainerLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List tasks running on one or more nodes, defaults to current node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodePs(DockerNodePsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List tasks running on one or more nodes, defaults to current node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodePs(Configure<DockerNodePsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodePsSettings()));
    /// <summary><p>List tasks running on one or more nodes, defaults to current node.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li><li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodePsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodePs(CombinatorialConfigure<DockerNodePsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodePs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerTop(DockerContainerTopSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerTop(Configure<DockerContainerTopSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerTopSettings()));
    /// <summary><p>Display the running processes of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li><li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerTopSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerTop(CombinatorialConfigure<DockerContainerTopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerTop, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRename(DockerContainerRenameSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRename(Configure<DockerContainerRenameSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerRenameSettings()));
    /// <summary><p>Rename a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li><li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerRenameSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRename(CombinatorialConfigure<DockerContainerRenameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerRename, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageHistory(DockerImageHistorySettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageHistory(Configure<DockerImageHistorySettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageHistorySettings()));
    /// <summary><p>Show the history of an image.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li><li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageHistorySettings Settings, IReadOnlyCollection<Output> Output)> DockerImageHistory(CombinatorialConfigure<DockerImageHistorySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageHistory, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerPsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPs(DockerPsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerPsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPs(Configure<DockerPsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPsSettings()));
    /// <summary><p>List containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all</c> via <see cref="DockerPsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li><li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li><li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li><li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPsSettings Settings, IReadOnlyCollection<Output> Output)> DockerPs(CombinatorialConfigure<DockerPsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageTag(DockerImageTagSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageTag(Configure<DockerImageTagSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageTagSettings()));
    /// <summary><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li><li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageTagSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageTag(CombinatorialConfigure<DockerImageTagSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageTag, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerExport(DockerExportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerExport(Configure<DockerExportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerExportSettings()));
    /// <summary><p>Export a container's filesystem as a tar archive.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerExport(CombinatorialConfigure<DockerExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerExport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Disconnect a container from a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkDisconnect(DockerNetworkDisconnectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Disconnect a container from a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetworkDisconnect(Configure<DockerNetworkDisconnectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkDisconnectSettings()));
    /// <summary><p>Disconnect a container from a network.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li><li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkDisconnectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkDisconnect(CombinatorialConfigure<DockerNetworkDisconnectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetworkDisconnect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilderBuild(DockerBuilderBuildSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuilderBuild(Configure<DockerBuilderBuildSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuilderBuildSettings()));
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li></ul></remarks>
    public static IEnumerable<(DockerBuilderBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilderBuild(CombinatorialConfigure<DockerBuilderBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuilderBuild, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Build an image from a Dockerfile using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildxBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildxBuildSettings.AddHost"/></li><li><c>--allow</c> via <see cref="DockerBuildxBuildSettings.Allow"/></li><li><c>--build-arg</c> via <see cref="DockerBuildxBuildSettings.BuildArg"/></li><li><c>--builder</c> via <see cref="DockerBuildxBuildSettings.Builder"/></li><li><c>--cache-from</c> via <see cref="DockerBuildxBuildSettings.CacheFrom"/></li><li><c>--cache-to</c> via <see cref="DockerBuildxBuildSettings.CacheTo"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildxBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildxBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildxBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildxBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildxBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildxBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildxBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--file</c> via <see cref="DockerBuildxBuildSettings.File"/></li><li><c>--iidfile</c> via <see cref="DockerBuildxBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildxBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildxBuildSettings.Label"/></li><li><c>--load</c> via <see cref="DockerBuildxBuildSettings.Load"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildxBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildxBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildxBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildxBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildxBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildxBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildxBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildxBuildSettings.Pull"/></li><li><c>--push</c> via <see cref="DockerBuildxBuildSettings.Push"/></li><li><c>--quiet</c> via <see cref="DockerBuildxBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildxBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildxBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildxBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildxBuildSettings.ShmSize"/></li><li><c>--ssh</c> via <see cref="DockerBuildxBuildSettings.Ssh"/></li><li><c>--tag</c> via <see cref="DockerBuildxBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildxBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildxBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuildxBuild(DockerBuildxBuildSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Build an image from a Dockerfile using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildxBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildxBuildSettings.AddHost"/></li><li><c>--allow</c> via <see cref="DockerBuildxBuildSettings.Allow"/></li><li><c>--build-arg</c> via <see cref="DockerBuildxBuildSettings.BuildArg"/></li><li><c>--builder</c> via <see cref="DockerBuildxBuildSettings.Builder"/></li><li><c>--cache-from</c> via <see cref="DockerBuildxBuildSettings.CacheFrom"/></li><li><c>--cache-to</c> via <see cref="DockerBuildxBuildSettings.CacheTo"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildxBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildxBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildxBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildxBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildxBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildxBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildxBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--file</c> via <see cref="DockerBuildxBuildSettings.File"/></li><li><c>--iidfile</c> via <see cref="DockerBuildxBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildxBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildxBuildSettings.Label"/></li><li><c>--load</c> via <see cref="DockerBuildxBuildSettings.Load"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildxBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildxBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildxBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildxBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildxBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildxBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildxBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildxBuildSettings.Pull"/></li><li><c>--push</c> via <see cref="DockerBuildxBuildSettings.Push"/></li><li><c>--quiet</c> via <see cref="DockerBuildxBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildxBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildxBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildxBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildxBuildSettings.ShmSize"/></li><li><c>--ssh</c> via <see cref="DockerBuildxBuildSettings.Ssh"/></li><li><c>--tag</c> via <see cref="DockerBuildxBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildxBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildxBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuildxBuild(Configure<DockerBuildxBuildSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuildxBuildSettings()));
    /// <summary><p>Build an image from a Dockerfile using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildxBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildxBuildSettings.AddHost"/></li><li><c>--allow</c> via <see cref="DockerBuildxBuildSettings.Allow"/></li><li><c>--build-arg</c> via <see cref="DockerBuildxBuildSettings.BuildArg"/></li><li><c>--builder</c> via <see cref="DockerBuildxBuildSettings.Builder"/></li><li><c>--cache-from</c> via <see cref="DockerBuildxBuildSettings.CacheFrom"/></li><li><c>--cache-to</c> via <see cref="DockerBuildxBuildSettings.CacheTo"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildxBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildxBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildxBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildxBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildxBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildxBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildxBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--file</c> via <see cref="DockerBuildxBuildSettings.File"/></li><li><c>--iidfile</c> via <see cref="DockerBuildxBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildxBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildxBuildSettings.Label"/></li><li><c>--load</c> via <see cref="DockerBuildxBuildSettings.Load"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildxBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildxBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildxBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildxBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildxBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildxBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildxBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildxBuildSettings.Pull"/></li><li><c>--push</c> via <see cref="DockerBuildxBuildSettings.Push"/></li><li><c>--quiet</c> via <see cref="DockerBuildxBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildxBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildxBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildxBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildxBuildSettings.ShmSize"/></li><li><c>--ssh</c> via <see cref="DockerBuildxBuildSettings.Ssh"/></li><li><c>--tag</c> via <see cref="DockerBuildxBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildxBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildxBuildSettings.Ulimit"/></li></ul></remarks>
    public static IEnumerable<(DockerBuildxBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuildxBuild(CombinatorialConfigure<DockerBuildxBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuildxBuild, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a new builder instance using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--append</c> via <see cref="DockerBuildxCreateSettings.Append"/></li><li><c>--bootstrap</c> via <see cref="DockerBuildxCreateSettings.Bootstrap"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDaemonFlags"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDFlags"/></li><li><c>--config</c> via <see cref="DockerBuildxCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerBuildxCreateSettings.Driver"/></li><li><c>--driver-opt</c> via <see cref="DockerBuildxCreateSettings.DriverOpt"/></li><li><c>--leave</c> via <see cref="DockerBuildxCreateSettings.Leave"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerBuildxCreateSettings.Name"/></li><li><c>--node</c> via <see cref="DockerBuildxCreateSettings.Node"/></li><li><c>--platform</c> via <see cref="DockerBuildxCreateSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--use</c> via <see cref="DockerBuildxCreateSettings.Use"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuildxCreate(DockerBuildxCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a new builder instance using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--append</c> via <see cref="DockerBuildxCreateSettings.Append"/></li><li><c>--bootstrap</c> via <see cref="DockerBuildxCreateSettings.Bootstrap"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDaemonFlags"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDFlags"/></li><li><c>--config</c> via <see cref="DockerBuildxCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerBuildxCreateSettings.Driver"/></li><li><c>--driver-opt</c> via <see cref="DockerBuildxCreateSettings.DriverOpt"/></li><li><c>--leave</c> via <see cref="DockerBuildxCreateSettings.Leave"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerBuildxCreateSettings.Name"/></li><li><c>--node</c> via <see cref="DockerBuildxCreateSettings.Node"/></li><li><c>--platform</c> via <see cref="DockerBuildxCreateSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--use</c> via <see cref="DockerBuildxCreateSettings.Use"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuildxCreate(Configure<DockerBuildxCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuildxCreateSettings()));
    /// <summary><p>Create a new builder instance using Docker Buildx plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--append</c> via <see cref="DockerBuildxCreateSettings.Append"/></li><li><c>--bootstrap</c> via <see cref="DockerBuildxCreateSettings.Bootstrap"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDaemonFlags"/></li><li><c>--buildkitd-flags</c> via <see cref="DockerBuildxCreateSettings.BuildKitDFlags"/></li><li><c>--config</c> via <see cref="DockerBuildxCreateSettings.Config"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--driver</c> via <see cref="DockerBuildxCreateSettings.Driver"/></li><li><c>--driver-opt</c> via <see cref="DockerBuildxCreateSettings.DriverOpt"/></li><li><c>--leave</c> via <see cref="DockerBuildxCreateSettings.Leave"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--name</c> via <see cref="DockerBuildxCreateSettings.Name"/></li><li><c>--node</c> via <see cref="DockerBuildxCreateSettings.Node"/></li><li><c>--platform</c> via <see cref="DockerBuildxCreateSettings.Platform"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--use</c> via <see cref="DockerBuildxCreateSettings.Use"/></li></ul></remarks>
    public static IEnumerable<(DockerBuildxCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuildxCreate(CombinatorialConfigure<DockerBuildxCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuildxCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStats(DockerStatsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStats(Configure<DockerStatsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStatsSettings()));
    /// <summary><p>Display a live stream of container(s) resource usage statistics.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li><li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li><li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStatsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStats(CombinatorialConfigure<DockerStatsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStats, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Search the Docker Hub for images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li><li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li><li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li><li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSearch(DockerSearchSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Search the Docker Hub for images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li><li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li><li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li><li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSearch(Configure<DockerSearchSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSearchSettings()));
    /// <summary><p>Search the Docker Hub for images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li><li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li><li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li><li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSearchSettings Settings, IReadOnlyCollection<Output> Output)> DockerSearch(CombinatorialConfigure<DockerSearchSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSearch, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Docker image manifests and manifest lists.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifest(DockerManifestSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Docker image manifests and manifest lists.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifest(Configure<DockerManifestSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerManifestSettings()));
    /// <summary><p>Manage Docker image manifests and manifest lists.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerManifestSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifest(CombinatorialConfigure<DockerManifestSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerManifest, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Push a plugin to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginPush(DockerPluginPushSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Push a plugin to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginPush(Configure<DockerPluginPushSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginPushSettings()));
    /// <summary><p>Push a plugin to a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginPush(CombinatorialConfigure<DockerPluginPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginPush, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageLoad(DockerImageLoadSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageLoad(Configure<DockerImageLoadSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageLoadSettings()));
    /// <summary><p>Load an image from a tar archive or STDIN.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageLoad(CombinatorialConfigure<DockerImageLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageLoad, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage Swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarm(DockerSwarmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage Swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSwarm(Configure<DockerSwarmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSwarmSettings()));
    /// <summary><p>Manage Swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerSwarmSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarm(CombinatorialConfigure<DockerSwarmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSwarm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRm(DockerContainerRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerRm(Configure<DockerContainerRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerRmSettings()));
    /// <summary><p>Remove one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li><li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRm(CombinatorialConfigure<DockerContainerRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerUpdate(DockerContainerUpdateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerUpdate(Configure<DockerContainerUpdateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerUpdateSettings()));
    /// <summary><p>Update configuration of one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li><li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li><li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li><li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li><li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li><li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li><li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li><li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li><li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li><li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerUpdate(CombinatorialConfigure<DockerContainerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Change settings for a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginSet(DockerPluginSetSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Change settings for a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginSet(Configure<DockerPluginSetSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginSetSettings()));
    /// <summary><p>Change settings for a plugin.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li><li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginSetSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginSet(CombinatorialConfigure<DockerPluginSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginSet, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerWait(DockerWaitSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerWait(Configure<DockerWaitSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerWaitSettings()));
    /// <summary><p>Block until one or more containers stop, then print their exit codes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerWaitSettings Settings, IReadOnlyCollection<Output> Output)> DockerWait(CombinatorialConfigure<DockerWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerWait, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Export a context to a tar or kubeconfig file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextExport(DockerContextExportSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Export a context to a tar or kubeconfig file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextExport(Configure<DockerContextExportSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextExportSettings()));
    /// <summary><p>Export a context to a tar or kubeconfig file.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li><li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextExport(CombinatorialConfigure<DockerContextExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextExport, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Add additional information to a local image manifest.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li><li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li><li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestAnnotate(DockerManifestAnnotateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Add additional information to a local image manifest.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li><li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li><li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerManifestAnnotate(Configure<DockerManifestAnnotateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerManifestAnnotateSettings()));
    /// <summary><p>Add additional information to a local image manifest.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li><li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li><li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li><li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li></ul></remarks>
    public static IEnumerable<(DockerManifestAnnotateSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestAnnotate(CombinatorialConfigure<DockerManifestAnnotateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerManifestAnnotate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePull(DockerImagePullSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImagePull(Configure<DockerImagePullSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImagePullSettings()));
    /// <summary><p>Pull an image or a repository from a registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li><li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li><li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImagePullSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePull(CombinatorialConfigure<DockerImagePullSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImagePull, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEvents(DockerEventsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerEvents(Configure<DockerEventsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerEventsSettings()));
    /// <summary><p>Get real time events from the server.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li></ul></remarks>
    public static IEnumerable<(DockerEventsSettings Settings, IReadOnlyCollection<Output> Output)> DockerEvents(CombinatorialConfigure<DockerEventsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerEvents, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackLs(DockerStackLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackLs(Configure<DockerStackLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackLsSettings()));
    /// <summary><p>List stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStackLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackLs(CombinatorialConfigure<DockerStackLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStackLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerInspect(DockerContainerInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerInspect(Configure<DockerContainerInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerInspectSettings()));
    /// <summary><p>Display detailed information on one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerInspect(CombinatorialConfigure<DockerContainerInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerKill(DockerKillSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerKill(Configure<DockerKillSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerKillSettings()));
    /// <summary><p>Kill one or more running containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerKillSettings Settings, IReadOnlyCollection<Output> Output)> DockerKill(CombinatorialConfigure<DockerKillSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerKill, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Create a checkpoint from a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointCreate(DockerCheckpointCreateSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Create a checkpoint from a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerCheckpointCreate(Configure<DockerCheckpointCreateSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerCheckpointCreateSettings()));
    /// <summary><p>Create a checkpoint from a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerCheckpointCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointCreate(CombinatorialConfigure<DockerCheckpointCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerCheckpointCreate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPause(DockerPauseSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPause(Configure<DockerPauseSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPauseSettings()));
    /// <summary><p>Pause all processes within one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerPause(CombinatorialConfigure<DockerPauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPause, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogs(DockerLogsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogs(Configure<DockerLogsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerLogsSettings()));
    /// <summary><p>Fetch the logs of a container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li><li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li><li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li><li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li></ul></remarks>
    public static IEnumerable<(DockerLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogs(CombinatorialConfigure<DockerLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerLogs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextInspect(DockerContextInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContextInspect(Configure<DockerContextInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextInspectSettings()));
    /// <summary><p>Display detailed information on one or more contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li><li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextInspect(CombinatorialConfigure<DockerContextInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContextInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Promote one or more nodes to manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodePromote(DockerNodePromoteSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Promote one or more nodes to manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodePromote(Configure<DockerNodePromoteSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodePromoteSettings()));
    /// <summary><p>Promote one or more nodes to manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodePromoteSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodePromote(CombinatorialConfigure<DockerNodePromoteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodePromote, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Demote one or more nodes from manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeDemote(DockerNodeDemoteSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Demote one or more nodes from manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNodeDemote(Configure<DockerNodeDemoteSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNodeDemoteSettings()));
    /// <summary><p>Demote one or more nodes from manager in the swarm.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNodeDemoteSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeDemote(CombinatorialConfigure<DockerNodeDemoteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNodeDemote, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerExec(DockerExecSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerExec(Configure<DockerExecSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerExecSettings()));
    /// <summary><p>Run a command in a running container.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li><li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li><li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li><li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li><li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li><li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li><li><c>--user</c> via <see cref="DockerExecSettings.User"/></li><li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li></ul></remarks>
    public static IEnumerable<(DockerExecSettings Settings, IReadOnlyCollection<Output> Output)> DockerExec(CombinatorialConfigure<DockerExecSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerExec, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageRm(DockerImageRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageRm(Configure<DockerImageRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageRmSettings()));
    /// <summary><p>Remove one or more images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageRm(CombinatorialConfigure<DockerImageRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImage(DockerImageSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImage(Configure<DockerImageSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageSettings()));
    /// <summary><p>Manage images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageSettings Settings, IReadOnlyCollection<Output> Output)> DockerImage(CombinatorialConfigure<DockerImageSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImage, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContext(DockerContextSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContext(Configure<DockerContextSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContextSettings()));
    /// <summary><p>Manage contexts.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContextSettings Settings, IReadOnlyCollection<Output> Output)> DockerContext(CombinatorialConfigure<DockerContextSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContext, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolume(DockerVolumeSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerVolume(Configure<DockerVolumeSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerVolumeSettings()));
    /// <summary><p>Manage volumes.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerVolumeSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolume(CombinatorialConfigure<DockerVolumeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerVolume, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStart(DockerContainerStartSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerContainerStart(Configure<DockerContainerStartSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerContainerStartSettings()));
    /// <summary><p>Start one or more stopped containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li><li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li><li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li><li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li><li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerContainerStartSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStart(CombinatorialConfigure<DockerContainerStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerContainerStart, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Display detailed information on one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginInspect(DockerPluginInspectSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Display detailed information on one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerPluginInspect(Configure<DockerPluginInspectSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerPluginInspectSettings()));
    /// <summary><p>Display detailed information on one or more plugins.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerPluginInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginInspect(CombinatorialConfigure<DockerPluginInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerPluginInspect, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Log out from a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogout(DockerLogoutSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Log out from a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerLogout(Configure<DockerLogoutSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerLogoutSettings()));
    /// <summary><p>Log out from a Docker registry.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerLogoutSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogout(CombinatorialConfigure<DockerLogoutSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerLogout, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Manage networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetwork(DockerNetworkSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Manage networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerNetwork(Configure<DockerNetworkSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerNetworkSettings()));
    /// <summary><p>Manage networks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerNetworkSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetwork(CombinatorialConfigure<DockerNetworkSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerNetwork, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageLs(DockerImageLsSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerImageLs(Configure<DockerImageLsSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerImageLsSettings()));
    /// <summary><p>List images.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li><li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li><li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li><li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li><li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerImageLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageLs(CombinatorialConfigure<DockerImageLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerImageLs, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Show docker disk usage.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemDf(DockerSystemDfSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Show docker disk usage.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerSystemDf(Configure<DockerSystemDfSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerSystemDfSettings()));
    /// <summary><p>Show docker disk usage.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(DockerSystemDfSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemDf(CombinatorialConfigure<DockerSystemDfSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerSystemDf, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Revert changes to a service's configuration.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceRollback(DockerServiceRollbackSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Revert changes to a service's configuration.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerServiceRollback(Configure<DockerServiceRollbackSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerServiceRollbackSettings()));
    /// <summary><p>Revert changes to a service's configuration.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerServiceRollbackSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceRollback(CombinatorialConfigure<DockerServiceRollbackSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerServiceRollback, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRestart(DockerRestartSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerRestart(Configure<DockerRestartSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerRestartSettings()));
    /// <summary><p>Restart one or more containers.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerRestartSettings Settings, IReadOnlyCollection<Output> Output)> DockerRestart(CombinatorialConfigure<DockerRestartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerRestart, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSignerRemove(DockerTrustSignerRemoveSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerTrustSignerRemove(Configure<DockerTrustSignerRemoveSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerTrustSignerRemoveSettings()));
    /// <summary><p>Remove a signer.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li><li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerTrustSignerRemoveSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSignerRemove(CombinatorialConfigure<DockerTrustSignerRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerTrustSignerRemove, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Remove one or more stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackRm(DockerStackRmSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Remove one or more stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerStackRm(Configure<DockerStackRmSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerStackRmSettings()));
    /// <summary><p>Remove one or more stacks.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li><li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li></ul></remarks>
    public static IEnumerable<(DockerStackRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackRm(CombinatorialConfigure<DockerStackRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerStackRm, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuild(DockerBuildSettings options = null) => new DockerTasks().Run(options);
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> DockerBuild(Configure<DockerBuildSettings> configurator) => new DockerTasks().Run(configurator.Invoke(new DockerBuildSettings()));
    /// <summary><p>Build an image from a Dockerfile.</p><p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li><li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li><li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li><li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li><li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li><li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li><li><c>--config</c> via <see cref="DockerOptionsBase.Config"/></li><li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li><li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li><li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li><li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li><li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li><li><c>--debug</c> via <see cref="DockerOptionsBase.Debug"/></li><li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li><li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li><li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li><li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li><li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li><li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li><li><c>--log-level</c> via <see cref="DockerOptionsBase.LogLevel"/></li><li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li><li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li><li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li><li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li><li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li><li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li><li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li><li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li><li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li><li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li><li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li><li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li><li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li><li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li><li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li><li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li><li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li><li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li><li><c>--tls</c> via <see cref="DockerOptionsBase.TLS"/></li><li><c>--tlscacert</c> via <see cref="DockerOptionsBase.TLSCaCert"/></li><li><c>--tlscert</c> via <see cref="DockerOptionsBase.TLSCert"/></li><li><c>--tlskey</c> via <see cref="DockerOptionsBase.TLSKey"/></li><li><c>--tlsverify</c> via <see cref="DockerOptionsBase.TLSVerify"/></li><li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li></ul></remarks>
    public static IEnumerable<(DockerBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuild(CombinatorialConfigure<DockerBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(DockerBuild, degreeOfParallelism, completeOnFailure);
}
#region DockerConfigRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerConfigRm), Arguments = "config rm")]
public partial class DockerConfigRmSettings : DockerOptionsBase
{
    /// <summary>CONFIG</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Configs => Get<List<string>>(() => Configs);
}
#endregion
#region DockerLoadSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerLoad), Arguments = "load")]
public partial class DockerLoadSettings : DockerOptionsBase
{
    /// <summary>Read from tar archive file, instead of STDIN.</summary>
    [Argument(Format = "--input {value}")] public string Input => Get<string>(() => Input);
    /// <summary>Suppress the load output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerContainerPruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerPrune), Arguments = "container prune")]
public partial class DockerContainerPruneSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
}
#endregion
#region DockerTrustSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrust), Arguments = "trust")]
public partial class DockerTrustSettings : DockerOptionsBase
{
}
#endregion
#region DockerStackSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStack), Arguments = "stack")]
public partial class DockerStackSettings : DockerOptionsBase
{
    /// <summary>Kubernetes config file.</summary>
    [Argument(Format = "--kubeconfig {value}")] public string Kubeconfig => Get<string>(() => Kubeconfig);
    /// <summary>Orchestrator to use (swarm|kubernetes|all).</summary>
    [Argument(Format = "--orchestrator {value}")] public string Orchestrator => Get<string>(() => Orchestrator);
}
#endregion
#region DockerTopSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTop), Arguments = "top [ps")]
public partial class DockerTopSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>OPTIONS]</summary>
    [Argument(Format = "{value}")] public string Options => Get<string>(() => Options);
}
#endregion
#region DockerPullSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPull), Arguments = "pull")]
public partial class DockerPullSettings : DockerOptionsBase
{
    /// <summary>Download all tagged images in the repository.</summary>
    [Argument(Format = "--all-tags")] public bool? AllTags => Get<bool?>(() => AllTags);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Suppress verbose output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>NAME[:TAG|@DIGEST]</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
}
#endregion
#region DockerTrustSignSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustSign), Arguments = "trust sign IMAGE:TAG")]
public partial class DockerTrustSignSettings : DockerOptionsBase
{
}
#endregion
#region DockerCheckpointSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCheckpoint), Arguments = "checkpoint")]
public partial class DockerCheckpointSettings : DockerOptionsBase
{
}
#endregion
#region DockerTrustSignerSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustSigner), Arguments = "trust signer")]
public partial class DockerTrustSignerSettings : DockerOptionsBase
{
}
#endregion
#region DockerConfigInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerConfigInspect), Arguments = "config inspect")]
public partial class DockerConfigInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print the information in a human friendly format.</summary>
    [Argument(Format = "--pretty")] public bool? Pretty => Get<bool?>(() => Pretty);
    /// <summary>CONFIG</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Configs => Get<List<string>>(() => Configs);
}
#endregion
#region DockerServiceSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerService), Arguments = "service")]
public partial class DockerServiceSettings : DockerOptionsBase
{
}
#endregion
#region DockerTrustKeyGenerateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustKeyGenerate), Arguments = "trust key generate")]
public partial class DockerTrustKeyGenerateSettings : DockerOptionsBase
{
    /// <summary>NAME</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
}
#endregion
#region DockerSystemSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSystem), Arguments = "system")]
public partial class DockerSystemSettings : DockerOptionsBase
{
}
#endregion
#region DockerConfigLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerConfigLs), Arguments = "config ls")]
public partial class DockerConfigLsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print configs using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only display IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerContextUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextUpdate), Arguments = "context update")]
public partial class DockerContextUpdateSettings : DockerOptionsBase
{
    /// <summary>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</summary>
    [Argument(Format = "--default-stack-orchestrator {value}")] public string DefaultStackOrchestrator => Get<string>(() => DefaultStackOrchestrator);
    /// <summary>Description of the context.</summary>
    [Argument(Format = "--description {value}")] public string Description => Get<string>(() => Description);
    /// <summary>set the docker endpoint.</summary>
    [Argument(Format = "--docker {value}")] public string Docker => Get<string>(() => Docker);
    /// <summary>set the kubernetes endpoint.</summary>
    [Argument(Format = "--kubernetes {value}")] public string Kubernetes => Get<string>(() => Kubernetes);
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
}
#endregion
#region DockerStackServicesSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStackServices), Arguments = "stack services")]
public partial class DockerStackServicesSettings : DockerStackSettings
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print services using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Kubernetes namespace to use.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Only display IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>STACK</summary>
    [Argument(Format = "{value}")] public string Stack => Get<string>(() => Stack);
}
#endregion
#region DockerContainerPortSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerPort), Arguments = "container port")]
public partial class DockerContainerPortSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>[PRIVATE_PORT[/PROTO]]</summary>
    [Argument(Format = "{value}")] public string PrivatePort => Get<string>(() => PrivatePort);
}
#endregion
#region DockerRenameSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerRename), Arguments = "rename")]
public partial class DockerRenameSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>NEW_NAME</summary>
    [Argument(Format = "{value}")] public string NewName => Get<string>(() => NewName);
}
#endregion
#region DockerTagSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTag), Arguments = "tag")]
public partial class DockerTagSettings : DockerOptionsBase
{
    /// <summary>SOURCE_IMAGE[:TAG]</summary>
    [Argument(Format = "{value}")] public string SourceImage => Get<string>(() => SourceImage);
    /// <summary>TARGET_IMAGE[:TAG]</summary>
    [Argument(Format = "{value}")] public string TargetImage => Get<string>(() => TargetImage);
}
#endregion
#region DockerSecretInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSecretInspect), Arguments = "secret inspect")]
public partial class DockerSecretInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print the information in a human friendly format.</summary>
    [Argument(Format = "--pretty")] public bool? Pretty => Get<bool?>(() => Pretty);
    /// <summary>SECRET</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Secrets => Get<List<string>>(() => Secrets);
}
#endregion
#region DockerSecretSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSecret), Arguments = "secret")]
public partial class DockerSecretSettings : DockerOptionsBase
{
}
#endregion
#region DockerContainerExportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerExport), Arguments = "container export")]
public partial class DockerContainerExportSettings : DockerOptionsBase
{
    /// <summary>Write to a file, instead of STDOUT.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerHistorySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerHistory), Arguments = "history")]
public partial class DockerHistorySettings : DockerOptionsBase
{
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print sizes and dates in human readable format.</summary>
    [Argument(Format = "--human")] public bool? Human => Get<bool?>(() => Human);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only show numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
}
#endregion
#region DockerServiceCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceCreate), Arguments = "service create")]
public partial class DockerServiceCreateSettings : DockerOptionsBase
{
    /// <summary>Specify configurations to expose to the service.</summary>
    [Argument(Format = "--config {value}")] public string Config => Get<string>(() => Config);
    /// <summary>Placement constraints.</summary>
    [Argument(Format = "--constraint {value}")] public IReadOnlyList<string> Constraint => Get<List<string>>(() => Constraint);
    /// <summary>Container labels.</summary>
    [Argument(Format = "--container-label {value}")] public IReadOnlyList<string> ContainerLabel => Get<List<string>>(() => ContainerLabel);
    /// <summary>Credential spec for managed service account (Windows only).</summary>
    [Argument(Format = "--credential-spec {value}")] public string CredentialSpec => Get<string>(() => CredentialSpec);
    /// <summary>Exit immediately instead of waiting for the service to converge.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Set custom DNS servers.</summary>
    [Argument(Format = "--dns {value}")] public IReadOnlyList<string> Dns => Get<List<string>>(() => Dns);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-option {value}")] public IReadOnlyList<string> DnsOption => Get<List<string>>(() => DnsOption);
    /// <summary>Set custom DNS search domains.</summary>
    [Argument(Format = "--dns-search {value}")] public IReadOnlyList<string> DnsSearch => Get<List<string>>(() => DnsSearch);
    /// <summary>Endpoint mode (vip or dnsrr).</summary>
    [Argument(Format = "--endpoint-mode {value}")] public string EndpointMode => Get<string>(() => EndpointMode);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Read in a file of environment variables.</summary>
    [Argument(Format = "--env-file {value}")] public IReadOnlyList<string> EnvFile => Get<List<string>>(() => EnvFile);
    /// <summary>User defined resources.</summary>
    [Argument(Format = "--generic-resource {value}")] public IReadOnlyList<string> GenericResource => Get<List<string>>(() => GenericResource);
    /// <summary>Set one or more supplementary user groups for the container.</summary>
    [Argument(Format = "--group {value}")] public IReadOnlyList<string> Group => Get<List<string>>(() => Group);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Set one or more custom host-to-IP mappings (host:ip).</summary>
    [Argument(Format = "--host {value}")] public IReadOnlyList<string> Host => Get<List<string>>(() => Host);
    /// <summary>Container hostname.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Use an init inside each service container to forward signals and reap processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Service container isolation mode.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Service labels.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Limit CPUs.</summary>
    [Argument(Format = "--limit-cpu {value}")] public decimal? LimitCpu => Get<decimal?>(() => LimitCpu);
    /// <summary>Limit Memory.</summary>
    [Argument(Format = "--limit-memory {value}")] public long? LimitMemory => Get<long?>(() => LimitMemory);
    /// <summary>Logging driver for service.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Logging driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Service mode (replicated or global).</summary>
    [Argument(Format = "--mode {value}")] public string Mode => Get<string>(() => Mode);
    /// <summary>Attach a filesystem mount to the service.</summary>
    [Argument(Format = "--mount {value}")] public string Mount => Get<string>(() => Mount);
    /// <summary>Service name.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Network attachments.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Do not query the registry to resolve image digest and supported platforms.</summary>
    [Argument(Format = "--no-resolve-image")] public bool? NoResolveImage => Get<bool?>(() => NoResolveImage);
    /// <summary>Add a placement preference.</summary>
    [Argument(Format = "--placement-pref {value}")] public string PlacementPref => Get<string>(() => PlacementPref);
    /// <summary>Publish a port as a node port.</summary>
    [Argument(Format = "--publish {value}")] public string Publish => Get<string>(() => Publish);
    /// <summary>Suppress progress output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Number of tasks.</summary>
    [Argument(Format = "--replicas {value}")] public int? Replicas => Get<int?>(() => Replicas);
    /// <summary>Maximum number of tasks per node (default 0 = unlimited).</summary>
    [Argument(Format = "--replicas-max-per-node {value}")] public int? ReplicasMaxPerNode => Get<int?>(() => ReplicasMaxPerNode);
    /// <summary>Reserve CPUs.</summary>
    [Argument(Format = "--reserve-cpu {value}")] public decimal? ReserveCpu => Get<decimal?>(() => ReserveCpu);
    /// <summary>Reserve Memory.</summary>
    [Argument(Format = "--reserve-memory {value}")] public long? ReserveMemory => Get<long?>(() => ReserveMemory);
    /// <summary>Restart when condition is met ("none"|"on-failure"|"any") (default "any").</summary>
    [Argument(Format = "--restart-condition {value}")] public DockerRestartCondition RestartCondition => Get<DockerRestartCondition>(() => RestartCondition);
    /// <summary>Delay between restart attempts (ns|us|ms|s|m|h) (default 5s).</summary>
    [Argument(Format = "--restart-delay {value}")] public string RestartDelay => Get<string>(() => RestartDelay);
    /// <summary>Maximum number of restarts before giving up.</summary>
    [Argument(Format = "--restart-max-attempts {value}")] public int? RestartMaxAttempts => Get<int?>(() => RestartMaxAttempts);
    /// <summary>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--restart-window {value}")] public string RestartWindow => Get<string>(() => RestartWindow);
    /// <summary>Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--rollback-delay {value}")] public string RollbackDelay => Get<string>(() => RollbackDelay);
    /// <summary>Action on rollback failure ("pause"|"continue") (default "pause").</summary>
    [Argument(Format = "--rollback-failure-action {value}")] public DockerRollbackFailureAction RollbackFailureAction => Get<DockerRollbackFailureAction>(() => RollbackFailureAction);
    /// <summary>Failure rate to tolerate during a rollback (default 0).</summary>
    [Argument(Format = "--rollback-max-failure-ratio {value}")] public float? RollbackMaxFailureRatio => Get<float?>(() => RollbackMaxFailureRatio);
    /// <summary>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s).</summary>
    [Argument(Format = "--rollback-monitor {value}")] public string RollbackMonitor => Get<string>(() => RollbackMonitor);
    /// <summary>Rollback order ("start-first"|"stop-first") (default "stop-first").</summary>
    [Argument(Format = "--rollback-order {value}")] public DockerRollbackOrder RollbackOrder => Get<DockerRollbackOrder>(() => RollbackOrder);
    /// <summary>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</summary>
    [Argument(Format = "--rollback-parallelism {value}")] public int? RollbackParallelism => Get<int?>(() => RollbackParallelism);
    /// <summary>Specify secrets to expose to the service.</summary>
    [Argument(Format = "--secret {value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s).</summary>
    [Argument(Format = "--stop-grace-period {value}")] public string StopGracePeriod => Get<string>(() => StopGracePeriod);
    /// <summary>Signal to stop the container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Sysctl options.</summary>
    [Argument(Format = "--sysctl {value}")] public IReadOnlyList<string> Sysctl => Get<List<string>>(() => Sysctl);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Delay between updates (ns|us|ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--update-delay {value}")] public string UpdateDelay => Get<string>(() => UpdateDelay);
    /// <summary>Action on update failure ("pause"|"continue"|"rollback") (default "pause").</summary>
    [Argument(Format = "--update-failure-action {value}")] public DockerUpdateFailureAction UpdateFailureAction => Get<DockerUpdateFailureAction>(() => UpdateFailureAction);
    /// <summary>Failure rate to tolerate during an update (default 0).</summary>
    [Argument(Format = "--update-max-failure-ratio {value}")] public float? UpdateMaxFailureRatio => Get<float?>(() => UpdateMaxFailureRatio);
    /// <summary>Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s).</summary>
    [Argument(Format = "--update-monitor {value}")] public string UpdateMonitor => Get<string>(() => UpdateMonitor);
    /// <summary>Update order ("start-first"|"stop-first") (default "stop-first").</summary>
    [Argument(Format = "--update-order {value}")] public DockerUpdateOrder UpdateOrder => Get<DockerUpdateOrder>(() => UpdateOrder);
    /// <summary>Maximum number of tasks updated simultaneously (0 to update all at once).</summary>
    [Argument(Format = "--update-parallelism {value}")] public int? UpdateParallelism => Get<int?>(() => UpdateParallelism);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>Send registry authentication details to swarm agents.</summary>
    [Argument(Format = "--with-registry-auth")] public bool? WithRegistryAuth => Get<bool?>(() => WithRegistryAuth);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
    /// <summary>[COMMAND]</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerServicePsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServicePs), Arguments = "service ps")]
public partial class DockerServicePsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print tasks using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Do not map IDs to Names.</summary>
    [Argument(Format = "--no-resolve")] public bool? NoResolve => Get<bool?>(() => NoResolve);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display task IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>SERVICE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Services => Get<List<string>>(() => Services);
}
#endregion
#region DockerStopSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStop), Arguments = "stop")]
public partial class DockerStopSettings : DockerOptionsBase
{
    /// <summary>Seconds to wait for stop before killing it.</summary>
    [Argument(Format = "--time {value}")] public int? Time => Get<int?>(() => Time);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerNodeSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNode), Arguments = "node")]
public partial class DockerNodeSettings : DockerOptionsBase
{
}
#endregion
#region DockerUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerUpdate), Arguments = "update")]
public partial class DockerUpdateSettings : DockerOptionsBase
{
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit the CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit the CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerPluginCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginCreate), Arguments = "plugin create")]
public partial class DockerPluginCreateSettings : DockerOptionsBase
{
    /// <summary>Compress the context using gzip.</summary>
    [Argument(Format = "--compress")] public bool? Compress => Get<bool?>(() => Compress);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
    /// <summary>PLUGIN-DATA-DIR</summary>
    [Argument(Format = "{value}")] public string PluginDataDir => Get<string>(() => PluginDataDir);
}
#endregion
#region DockerSystemInfoSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSystemInfo), Arguments = "system info")]
public partial class DockerSystemInfoSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
}
#endregion
#region DockerVolumePruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolumePrune), Arguments = "volume prune")]
public partial class DockerVolumePruneSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'label=&lt;label&gt;').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
}
#endregion
#region DockerPluginUpgradeSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginUpgrade), Arguments = "plugin upgrade")]
public partial class DockerPluginUpgradeSettings : DockerOptionsBase
{
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Grant all permissions necessary to run the plugin.</summary>
    [Argument(Format = "--grant-all-permissions")] public bool? GrantAllPermissions => Get<bool?>(() => GrantAllPermissions);
    /// <summary>Do not check if specified remote plugin matches existing plugin image.</summary>
    [Argument(Format = "--skip-remote-check")] public bool? SkipRemoteCheck => Get<bool?>(() => SkipRemoteCheck);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
    /// <summary>[REMOTE]</summary>
    [Argument(Format = "{value}")] public string Remote => Get<string>(() => Remote);
}
#endregion
#region DockerBuilderPruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuilderPrune), Arguments = "builder prune")]
public partial class DockerBuilderPruneSettings : DockerOptionsBase
{
}
#endregion
#region DockerSwarmJoinTokenSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmJoinToken), Arguments = "swarm join-token")]
public partial class DockerSwarmJoinTokenSettings : DockerOptionsBase
{
    /// <summary>Only display token.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Rotate join token.</summary>
    [Argument(Format = "--rotate")] public bool? Rotate => Get<bool?>(() => Rotate);
    /// <summary>(worker|manager)</summary>
    [Argument(Format = "{value}")] public string Worker => Get<string>(() => Worker);
}
#endregion
#region DockerNodeUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodeUpdate), Arguments = "node update")]
public partial class DockerNodeUpdateSettings : DockerOptionsBase
{
    /// <summary>Availability of the node ("active"|"pause"|"drain").</summary>
    [Argument(Format = "--availability {value}")] public DockerAvailability Availability => Get<DockerAvailability>(() => Availability);
    /// <summary>Add or update a node label (key=value).</summary>
    [Argument(Format = "--label-add {value}")] public IReadOnlyList<string> LabelAdd => Get<List<string>>(() => LabelAdd);
    /// <summary>Remove a node label if exists.</summary>
    [Argument(Format = "--label-rm {value}")] public IReadOnlyList<string> LabelRm => Get<List<string>>(() => LabelRm);
    /// <summary>Role of the node ("worker"|"manager").</summary>
    [Argument(Format = "--role {value}")] public DockerRole Role => Get<DockerRole>(() => Role);
    /// <summary>NODE</summary>
    [Argument(Format = "{value}")] public string Node => Get<string>(() => Node);
}
#endregion
#region DockerTrustSignerAddSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustSignerAdd), Arguments = "trust signer add")]
public partial class DockerTrustSignerAddSettings : DockerOptionsBase
{
    /// <summary>OPTIONS</summary>
    [Argument(Format = "{value}")] public string Options => Get<string>(() => Options);
    /// <summary>NAME</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
    /// <summary>REPOSITORY</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Repositories => Get<List<string>>(() => Repositories);
}
#endregion
#region DockerSwarmUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmUpdate), Arguments = "swarm update")]
public partial class DockerSwarmUpdateSettings : DockerOptionsBase
{
    /// <summary>Change manager autolocking setting (true|false).</summary>
    [Argument(Format = "--autolock")] public bool? Autolock => Get<bool?>(() => Autolock);
    /// <summary>Validity period for node certificates (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--cert-expiry {value}")] public string CertExpiry => Get<string>(() => CertExpiry);
    /// <summary>Dispatcher heartbeat period (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--dispatcher-heartbeat {value}")] public string DispatcherHeartbeat => Get<string>(() => DispatcherHeartbeat);
    /// <summary>Specifications of one or more certificate signing endpoints.</summary>
    [Argument(Format = "--external-ca {value}")] public string ExternalCa => Get<string>(() => ExternalCa);
    /// <summary>Number of additional Raft snapshots to retain.</summary>
    [Argument(Format = "--max-snapshots {value}")] public int? MaxSnapshots => Get<int?>(() => MaxSnapshots);
    /// <summary>Number of log entries between Raft snapshots.</summary>
    [Argument(Format = "--snapshot-interval {value}")] public int? SnapshotInterval => Get<int?>(() => SnapshotInterval);
    /// <summary>Task history retention limit.</summary>
    [Argument(Format = "--task-history-limit {value}")] public long? TaskHistoryLimit => Get<long?>(() => TaskHistoryLimit);
}
#endregion
#region DockerServiceLogsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceLogs), Arguments = "service logs")]
public partial class DockerServiceLogsSettings : DockerOptionsBase
{
    /// <summary>Show extra details provided to logs.</summary>
    [Argument(Format = "--details")] public bool? Details => Get<bool?>(() => Details);
    /// <summary>Follow log output.</summary>
    [Argument(Format = "--follow")] public bool? Follow => Get<bool?>(() => Follow);
    /// <summary>Do not map IDs to Names in output.</summary>
    [Argument(Format = "--no-resolve")] public bool? NoResolve => Get<bool?>(() => NoResolve);
    /// <summary>Do not include task IDs in output.</summary>
    [Argument(Format = "--no-task-ids")] public bool? NoTaskIds => Get<bool?>(() => NoTaskIds);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Do not neatly format logs.</summary>
    [Argument(Format = "--raw")] public bool? Raw => Get<bool?>(() => Raw);
    /// <summary>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</summary>
    [Argument(Format = "--since {value}")] public string Since => Get<string>(() => Since);
    /// <summary>Number of lines to show from the end of the logs.</summary>
    [Argument(Format = "--tail {value}")] public string Tail => Get<string>(() => Tail);
    /// <summary>Show timestamps.</summary>
    [Argument(Format = "--timestamps")] public bool? Timestamps => Get<bool?>(() => Timestamps);
    /// <summary>SERVICE|TASK</summary>
    [Argument(Format = "{value}")] public string Service => Get<string>(() => Service);
}
#endregion
#region DockerServiceLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceLs), Arguments = "service ls")]
public partial class DockerServiceLsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print services using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only display IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerSwarmUnlockSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmUnlock), Arguments = "swarm unlock")]
public partial class DockerSwarmUnlockSettings : DockerOptionsBase
{
}
#endregion
#region DockerNetworkLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkLs), Arguments = "network ls")]
public partial class DockerNetworkLsSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'driver=bridge').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print networks using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Do not truncate the output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display network IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerPluginLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginLs), Arguments = "plugin ls")]
public partial class DockerPluginLsSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'enabled=true').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print plugins using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display plugin IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerPluginRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginRm), Arguments = "plugin rm")]
public partial class DockerPluginRmSettings : DockerOptionsBase
{
    /// <summary>Force the removal of an active plugin.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Plugins => Get<List<string>>(() => Plugins);
}
#endregion
#region DockerImageBuildSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageBuild), Arguments = "image build")]
public partial class DockerImageBuildSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Set build-time variables.</summary>
    [Argument(Format = "--build-arg {value}")] public IReadOnlyList<string> BuildArg => Get<List<string>>(() => BuildArg);
    /// <summary>Images to consider as cache sources.</summary>
    [Argument(Format = "--cache-from {value}")] public IReadOnlyList<string> CacheFrom => Get<List<string>>(() => CacheFrom);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Compress the build context using gzip.</summary>
    [Argument(Format = "--compress")] public bool? Compress => Get<bool?>(() => Compress);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Name of the Dockerfile (Default is 'PATH/Dockerfile').</summary>
    [Argument(Format = "--file {value}")] public string File => Get<string>(() => File);
    /// <summary>Always remove intermediate containers.</summary>
    [Argument(Format = "--force-rm")] public bool? ForceRm => Get<bool?>(() => ForceRm);
    /// <summary>Write the image ID to the file.</summary>
    [Argument(Format = "--iidfile {value}")] public string Iidfile => Get<string>(() => Iidfile);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Set metadata for an image.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Set the networking mode for the RUN instructions during build.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Do not use cache when building the image.</summary>
    [Argument(Format = "--no-cache")] public bool? NoCache => Get<bool?>(() => NoCache);
    /// <summary>Output destination (format: type=local,dest=path).</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Set type of progress output (auto, plain, tty). Use plain to show container output.</summary>
    [Argument(Format = "--progress {value}")] public string Progress => Get<string>(() => Progress);
    /// <summary>Always attempt to pull a newer version of the image.</summary>
    [Argument(Format = "--pull")] public bool? Pull => Get<bool?>(() => Pull);
    /// <summary>Suppress the build output and print image ID on success.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Remove intermediate containers after a successful build.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</summary>
    [Argument(Format = "--secret {value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Security options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Squash newly built layers into a single new layer.</summary>
    [Argument(Format = "--squash")] public bool? Squash => Get<bool?>(() => Squash);
    /// <summary>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</summary>
    [Argument(Format = "--ssh {value}")] public string Ssh => Get<string>(() => Ssh);
    /// <summary>Stream attaches to server to negotiate build context.</summary>
    [Argument(Format = "--stream")] public bool? Stream => Get<bool?>(() => Stream);
    /// <summary>Name and optionally a tag in the 'name:tag' format.</summary>
    [Argument(Format = "--tag {value}")] public IReadOnlyList<string> Tag => Get<List<string>>(() => Tag);
    /// <summary>Set the target build stage to build.</summary>
    [Argument(Format = "--target {value}")] public string Target => Get<string>(() => Target);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Path or url where the build context is located.</summary>
    [Argument(Format = "{value}")] public string Path => Get<string>(() => Path);
}
#endregion
#region DockerTrustRevokeSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustRevoke), Arguments = "trust revoke")]
public partial class DockerTrustRevokeSettings : DockerOptionsBase
{
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--yes")] public bool? Yes => Get<bool?>(() => Yes);
    /// <summary>IMAGE[:TAG]</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
}
#endregion
#region DockerRmiSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerRmi), Arguments = "rmi")]
public partial class DockerRmiSettings : DockerOptionsBase
{
    /// <summary>Force removal of the image.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Do not delete untagged parents.</summary>
    [Argument(Format = "--no-prune")] public bool? NoPrune => Get<bool?>(() => NoPrune);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerNetworkRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkRm), Arguments = "network rm")]
public partial class DockerNetworkRmSettings : DockerOptionsBase
{
    /// <summary>NETWORK</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Networks => Get<List<string>>(() => Networks);
}
#endregion
#region DockerVersionSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVersion), Arguments = "version")]
public partial class DockerVersionSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Kubernetes config file.</summary>
    [Argument(Format = "--kubeconfig {value}")] public string Kubeconfig => Get<string>(() => Kubeconfig);
}
#endregion
#region DockerSecretCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSecretCreate), Arguments = "secret create")]
public partial class DockerSecretCreateSettings : DockerOptionsBase
{
    /// <summary>Secret driver.</summary>
    [Argument(Format = "--driver {value}")] public string Driver => Get<string>(() => Driver);
    /// <summary>Secret labels.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Template driver.</summary>
    [Argument(Format = "--template-driver {value}")] public string TemplateDriver => Get<string>(() => TemplateDriver);
    /// <summary>SECRET</summary>
    [Argument(Format = "{value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Path to file to create the secret from.</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
}
#endregion
#region DockerServiceRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceRm), Arguments = "service rm")]
public partial class DockerServiceRmSettings : DockerOptionsBase
{
    /// <summary>SERVICE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Services => Get<List<string>>(() => Services);
}
#endregion
#region DockerTrustKeyLoadSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustKeyLoad), Arguments = "trust key load")]
public partial class DockerTrustKeyLoadSettings : DockerOptionsBase
{
    /// <summary>Name for the loaded key.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>KEYFILE</summary>
    [Argument(Format = "{value}")] public string Keyfile => Get<string>(() => Keyfile);
}
#endregion
#region DockerSecretRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSecretRm), Arguments = "secret rm")]
public partial class DockerSecretRmSettings : DockerOptionsBase
{
    /// <summary>SECRET</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Secrets => Get<List<string>>(() => Secrets);
}
#endregion
#region DockerImageInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageInspect), Arguments = "image inspect")]
public partial class DockerImageInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerImageSaveSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageSave), Arguments = "image save")]
public partial class DockerImageSaveSettings : DockerOptionsBase
{
    /// <summary>Write to a file, instead of STDOUT.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerTrustKeySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustKey), Arguments = "trust key")]
public partial class DockerTrustKeySettings : DockerOptionsBase
{
}
#endregion
#region DockerContainerAttachSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerAttach), Arguments = "container attach")]
public partial class DockerContainerAttachSettings : DockerOptionsBase
{
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Do not attach STDIN.</summary>
    [Argument(Format = "--no-stdin")] public bool? NoStdin => Get<bool?>(() => NoStdin);
    /// <summary>Proxy all received signals to the process.</summary>
    [Argument(Format = "--sig-proxy")] public bool? SigProxy => Get<bool?>(() => SigProxy);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerContextCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextCreate), Arguments = "context create")]
public partial class DockerContextCreateSettings : DockerOptionsBase
{
    /// <summary>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</summary>
    [Argument(Format = "--default-stack-orchestrator {value}")] public string DefaultStackOrchestrator => Get<string>(() => DefaultStackOrchestrator);
    /// <summary>Description of the context.</summary>
    [Argument(Format = "--description {value}")] public string Description => Get<string>(() => Description);
    /// <summary>set the docker endpoint.</summary>
    [Argument(Format = "--docker {value}")] public string Docker => Get<string>(() => Docker);
    /// <summary>create context from a named context.</summary>
    [Argument(Format = "--from {value}")] public string From => Get<string>(() => From);
    /// <summary>set the kubernetes endpoint.</summary>
    [Argument(Format = "--kubernetes {value}")] public string Kubernetes => Get<string>(() => Kubernetes);
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
}
#endregion
#region DockerConfigCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerConfigCreate), Arguments = "config create")]
public partial class DockerConfigCreateSettings : DockerOptionsBase
{
    /// <summary>Config labels.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Template driver.</summary>
    [Argument(Format = "--template-driver {value}")] public string TemplateDriver => Get<string>(() => TemplateDriver);
    /// <summary>CONFIG</summary>
    [Argument(Format = "{value}")] public string Config => Get<string>(() => Config);
    /// <summary>file|-</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
}
#endregion
#region DockerVolumeInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolumeInspect), Arguments = "volume inspect")]
public partial class DockerVolumeInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>VOLUME</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Volumes => Get<List<string>>(() => Volumes);
}
#endregion
#region DockerContainerStopSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerStop), Arguments = "container stop")]
public partial class DockerContainerStopSettings : DockerOptionsBase
{
    /// <summary>Seconds to wait for stop before killing it.</summary>
    [Argument(Format = "--time {value}")] public int? Time => Get<int?>(() => Time);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerNetworkPruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkPrune), Arguments = "network prune")]
public partial class DockerNetworkPruneSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
}
#endregion
#region DockerManifestInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerManifestInspect), Arguments = "manifest inspect")]
public partial class DockerManifestInspectSettings : DockerOptionsBase
{
    /// <summary>Allow communication with an insecure registry.</summary>
    [Argument(Format = "--insecure")] public bool? Insecure => Get<bool?>(() => Insecure);
    /// <summary>Output additional info including layers and platform.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
    /// <summary>[MANIFEST_LIST]</summary>
    [Argument(Format = "{value}")] public string ManifestList => Get<string>(() => ManifestList);
    /// <summary>MANIFEST</summary>
    [Argument(Format = "{value}")] public string Manifest => Get<string>(() => Manifest);
}
#endregion
#region DockerInfoSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerInfo), Arguments = "info")]
public partial class DockerInfoSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
}
#endregion
#region DockerCommitSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCommit), Arguments = "commit")]
public partial class DockerCommitSettings : DockerOptionsBase
{
    /// <summary>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</summary>
    [Argument(Format = "--author {value}")] public string Author => Get<string>(() => Author);
    /// <summary>Apply Dockerfile instruction to the created image.</summary>
    [Argument(Format = "--change {value}")] public IReadOnlyList<string> Change => Get<List<string>>(() => Change);
    /// <summary>Commit message.</summary>
    [Argument(Format = "--message {value}")] public string Message => Get<string>(() => Message);
    /// <summary>Pause container during commit.</summary>
    [Argument(Format = "--pause")] public bool? Pause => Get<bool?>(() => Pause);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerStackDeploySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStackDeploy), Arguments = "stack deploy")]
public partial class DockerStackDeploySettings : DockerOptionsBase
{
    /// <summary>Path to a Distributed Application Bundle file.</summary>
    [Argument(Format = "--bundle-file {value}")] public string BundleFile => Get<string>(() => BundleFile);
    /// <summary>Path to a Compose file, or "-" to read from stdin.</summary>
    [Argument(Format = "--compose-file {value}")] public IReadOnlyList<string> ComposeFile => Get<List<string>>(() => ComposeFile);
    /// <summary>Kubernetes namespace to use.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Prune services that are no longer referenced.</summary>
    [Argument(Format = "--prune")] public bool? Prune => Get<bool?>(() => Prune);
    /// <summary>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</summary>
    [Argument(Format = "--resolve-image {value}")] public DockerResolveImage ResolveImage => Get<DockerResolveImage>(() => ResolveImage);
    /// <summary>Send registry authentication details to Swarm agents.</summary>
    [Argument(Format = "--with-registry-auth")] public bool? WithRegistryAuth => Get<bool?>(() => WithRegistryAuth);
    /// <summary>STACK</summary>
    [Argument(Format = "{value}")] public string Stack => Get<string>(() => Stack);
}
#endregion
#region DockerServiceScaleSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceScale), Arguments = "service scale")]
public partial class DockerServiceScaleSettings : DockerOptionsBase
{
    /// <summary>SERVICE=REPLICAS</summary>
    [Argument(Format = "{key}={value}")] public IReadOnlyDictionary<string, string> ServiceReplicas => Get<Dictionary<string, string>>(() => ServiceReplicas);
}
#endregion
#region DockerRunSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerRun), Arguments = "run")]
public partial class DockerRunSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Attach to STDIN, STDOUT or STDERR.</summary>
    [Argument(Format = "--attach {value}")] public IReadOnlyList<string> Attach => Get<List<string>>(() => Attach);
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Block IO weight (relative device weight).</summary>
    [Argument(Format = "--blkio-weight-device {value}")] public IReadOnlyList<string> BlkioWeightDevice => Get<List<string>>(() => BlkioWeightDevice);
    /// <summary>Add Linux capabilities.</summary>
    [Argument(Format = "--cap-add {value}")] public IReadOnlyList<string> CapAdd => Get<List<string>>(() => CapAdd);
    /// <summary>Drop Linux capabilities.</summary>
    [Argument(Format = "--cap-drop {value}")] public IReadOnlyList<string> CapDrop => Get<List<string>>(() => CapDrop);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Write the container ID to the file.</summary>
    [Argument(Format = "--cidfile {value}")] public string Cidfile => Get<string>(() => Cidfile);
    /// <summary>CPU count (Windows only).</summary>
    [Argument(Format = "--cpu-count {value}")] public long? CpuCount => Get<long?>(() => CpuCount);
    /// <summary>CPU percent (Windows only).</summary>
    [Argument(Format = "--cpu-percent {value}")] public long? CpuPercent => Get<long?>(() => CpuPercent);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Run container in background and print container ID.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Add a host device to the container.</summary>
    [Argument(Format = "--device {value}")] public IReadOnlyList<string> Device => Get<List<string>>(() => Device);
    /// <summary>Add a rule to the cgroup allowed devices list.</summary>
    [Argument(Format = "--device-cgroup-rule {value}")] public IReadOnlyList<string> DeviceCgroupRule => Get<List<string>>(() => DeviceCgroupRule);
    /// <summary>Limit read rate (bytes per second) from a device.</summary>
    [Argument(Format = "--device-read-bps {value}")] public IReadOnlyList<string> DeviceReadBps => Get<List<string>>(() => DeviceReadBps);
    /// <summary>Limit read rate (IO per second) from a device.</summary>
    [Argument(Format = "--device-read-iops {value}")] public IReadOnlyList<string> DeviceReadIops => Get<List<string>>(() => DeviceReadIops);
    /// <summary>Limit write rate (bytes per second) to a device.</summary>
    [Argument(Format = "--device-write-bps {value}")] public IReadOnlyList<string> DeviceWriteBps => Get<List<string>>(() => DeviceWriteBps);
    /// <summary>Limit write rate (IO per second) to a device.</summary>
    [Argument(Format = "--device-write-iops {value}")] public IReadOnlyList<string> DeviceWriteIops => Get<List<string>>(() => DeviceWriteIops);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set custom DNS servers.</summary>
    [Argument(Format = "--dns {value}")] public IReadOnlyList<string> Dns => Get<List<string>>(() => Dns);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-opt {value}")] public IReadOnlyList<string> DnsOpt => Get<List<string>>(() => DnsOpt);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-option {value}")] public IReadOnlyList<string> DnsOption => Get<List<string>>(() => DnsOption);
    /// <summary>Set custom DNS search domains.</summary>
    [Argument(Format = "--dns-search {value}")] public IReadOnlyList<string> DnsSearch => Get<List<string>>(() => DnsSearch);
    /// <summary>Container NIS domain name.</summary>
    [Argument(Format = "--domainname {value}")] public string Domainname => Get<string>(() => Domainname);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Read in a file of environment variables.</summary>
    [Argument(Format = "--env-file {value}")] public IReadOnlyList<string> EnvFile => Get<List<string>>(() => EnvFile);
    /// <summary>Expose a port or a range of ports.</summary>
    [Argument(Format = "--expose {value}")] public IReadOnlyList<string> Expose => Get<List<string>>(() => Expose);
    /// <summary>GPU devices to add to the container ('all' to pass all GPUs).</summary>
    [Argument(Format = "--gpus {value}")] public string Gpus => Get<string>(() => Gpus);
    /// <summary>Add additional groups to join.</summary>
    [Argument(Format = "--group-add {value}")] public IReadOnlyList<string> GroupAdd => Get<List<string>>(() => GroupAdd);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Print usage.</summary>
    [Argument(Format = "--help")] public bool? Help => Get<bool?>(() => Help);
    /// <summary>Container host name.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Run an init inside the container that forwards signals and reaps processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Maximum IO bandwidth limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxbandwidth {value}")] public long? IoMaxbandwidth => Get<long?>(() => IoMaxbandwidth);
    /// <summary>Maximum IOps limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxiops {value}")] public int? IoMaxiops => Get<int?>(() => IoMaxiops);
    /// <summary>IPv4 address (e.g., 172.30.100.104).</summary>
    [Argument(Format = "--ip {value}")] public string Ip => Get<string>(() => Ip);
    /// <summary>IPv6 address (e.g., 2001:db8::33).</summary>
    [Argument(Format = "--ip6 {value}")] public string Ip6 => Get<string>(() => Ip6);
    /// <summary>IPC mode to use.</summary>
    [Argument(Format = "--ipc {value}")] public string Ipc => Get<string>(() => Ipc);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Set meta data on a container.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Read in a line delimited file of labels.</summary>
    [Argument(Format = "--label-file {value}")] public IReadOnlyList<string> LabelFile => Get<List<string>>(() => LabelFile);
    /// <summary>Add link to another container.</summary>
    [Argument(Format = "--link {value}")] public IReadOnlyList<string> Link => Get<List<string>>(() => Link);
    /// <summary>Container IPv4/IPv6 link-local addresses.</summary>
    [Argument(Format = "--link-local-ip {value}")] public IReadOnlyList<string> LinkLocalIp => Get<List<string>>(() => LinkLocalIp);
    /// <summary>Logging driver for the container.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Log driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Container MAC address (e.g., 92:d0:c6:0a:29:33).</summary>
    [Argument(Format = "--mac-address {value}")] public string MacAddress => Get<string>(() => MacAddress);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container memory swappiness (0 to 100).</summary>
    [Argument(Format = "--memory-swappiness {value}")] public long? MemorySwappiness => Get<long?>(() => MemorySwappiness);
    /// <summary>Attach a filesystem mount to the container.</summary>
    [Argument(Format = "--mount {value}")] public string Mount => Get<string>(() => Mount);
    /// <summary>Assign a name to the container.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--net {value}")] public string Net => Get<string>(() => Net);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--net-alias {value}")] public IReadOnlyList<string> NetAlias => Get<List<string>>(() => NetAlias);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--network-alias {value}")] public IReadOnlyList<string> NetworkAlias => Get<List<string>>(() => NetworkAlias);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Disable OOM Killer.</summary>
    [Argument(Format = "--oom-kill-disable")] public bool? OomKillDisable => Get<bool?>(() => OomKillDisable);
    /// <summary>Tune host's OOM preferences (-1000 to 1000).</summary>
    [Argument(Format = "--oom-score-adj {value}")] public int? OomScoreAdj => Get<int?>(() => OomScoreAdj);
    /// <summary>PID namespace to use.</summary>
    [Argument(Format = "--pid {value}")] public string Pid => Get<string>(() => Pid);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Give extended privileges to this container.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Publish a container's port(s) to the host.</summary>
    [Argument(Format = "--publish {value}")] public IReadOnlyList<string> Publish => Get<List<string>>(() => Publish);
    /// <summary>Publish all exposed ports to random ports.</summary>
    [Argument(Format = "--publish-all")] public bool? PublishAll => Get<bool?>(() => PublishAll);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>Automatically remove the container when it exits.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Runtime to use for this container.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Security Options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Proxy received signals to the process.</summary>
    [Argument(Format = "--sig-proxy")] public bool? SigProxy => Get<bool?>(() => SigProxy);
    /// <summary>Signal to stop a container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Timeout (in seconds) to stop a container.</summary>
    [Argument(Format = "--stop-timeout {value}")] public int? StopTimeout => Get<int?>(() => StopTimeout);
    /// <summary>Storage driver options for the container.</summary>
    [Argument(Format = "--storage-opt {value}")] public IReadOnlyList<string> StorageOpt => Get<List<string>>(() => StorageOpt);
    /// <summary>Sysctl options.</summary>
    [Argument(Format = "--sysctl {key}:{value}")] public IReadOnlyDictionary<string, string> Sysctl => Get<Dictionary<string, string>>(() => Sysctl);
    /// <summary>Mount a tmpfs directory.</summary>
    [Argument(Format = "--tmpfs {value}")] public IReadOnlyList<string> Tmpfs => Get<List<string>>(() => Tmpfs);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>User namespace to use.</summary>
    [Argument(Format = "--userns {value}")] public string Userns => Get<string>(() => Userns);
    /// <summary>UTS namespace to use.</summary>
    [Argument(Format = "--uts {value}")] public string Uts => Get<string>(() => Uts);
    /// <summary>Bind mount a volume.</summary>
    [Argument(Format = "--volume {value}")] public IReadOnlyList<string> Volume => Get<List<string>>(() => Volume);
    /// <summary>Optional volume driver for the container.</summary>
    [Argument(Format = "--volume-driver {value}")] public string VolumeDriver => Get<string>(() => VolumeDriver);
    /// <summary>Mount volumes from the specified container(s).</summary>
    [Argument(Format = "--volumes-from {value}")] public IReadOnlyList<string> VolumesFrom => Get<List<string>>(() => VolumesFrom);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
    /// <summary>[COMMAND]</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCreate), Arguments = "create")]
public partial class DockerCreateSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Attach to STDIN, STDOUT or STDERR.</summary>
    [Argument(Format = "--attach {value}")] public IReadOnlyList<string> Attach => Get<List<string>>(() => Attach);
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Block IO weight (relative device weight).</summary>
    [Argument(Format = "--blkio-weight-device {value}")] public IReadOnlyList<string> BlkioWeightDevice => Get<List<string>>(() => BlkioWeightDevice);
    /// <summary>Add Linux capabilities.</summary>
    [Argument(Format = "--cap-add {value}")] public IReadOnlyList<string> CapAdd => Get<List<string>>(() => CapAdd);
    /// <summary>Drop Linux capabilities.</summary>
    [Argument(Format = "--cap-drop {value}")] public IReadOnlyList<string> CapDrop => Get<List<string>>(() => CapDrop);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Write the container ID to the file.</summary>
    [Argument(Format = "--cidfile {value}")] public string Cidfile => Get<string>(() => Cidfile);
    /// <summary>CPU count (Windows only).</summary>
    [Argument(Format = "--cpu-count {value}")] public long? CpuCount => Get<long?>(() => CpuCount);
    /// <summary>CPU percent (Windows only).</summary>
    [Argument(Format = "--cpu-percent {value}")] public long? CpuPercent => Get<long?>(() => CpuPercent);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Add a host device to the container.</summary>
    [Argument(Format = "--device {value}")] public IReadOnlyList<string> Device => Get<List<string>>(() => Device);
    /// <summary>Add a rule to the cgroup allowed devices list.</summary>
    [Argument(Format = "--device-cgroup-rule {value}")] public IReadOnlyList<string> DeviceCgroupRule => Get<List<string>>(() => DeviceCgroupRule);
    /// <summary>Limit read rate (bytes per second) from a device.</summary>
    [Argument(Format = "--device-read-bps {value}")] public IReadOnlyList<string> DeviceReadBps => Get<List<string>>(() => DeviceReadBps);
    /// <summary>Limit read rate (IO per second) from a device.</summary>
    [Argument(Format = "--device-read-iops {value}")] public IReadOnlyList<string> DeviceReadIops => Get<List<string>>(() => DeviceReadIops);
    /// <summary>Limit write rate (bytes per second) to a device.</summary>
    [Argument(Format = "--device-write-bps {value}")] public IReadOnlyList<string> DeviceWriteBps => Get<List<string>>(() => DeviceWriteBps);
    /// <summary>Limit write rate (IO per second) to a device.</summary>
    [Argument(Format = "--device-write-iops {value}")] public IReadOnlyList<string> DeviceWriteIops => Get<List<string>>(() => DeviceWriteIops);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set custom DNS servers.</summary>
    [Argument(Format = "--dns {value}")] public IReadOnlyList<string> Dns => Get<List<string>>(() => Dns);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-opt {value}")] public IReadOnlyList<string> DnsOpt => Get<List<string>>(() => DnsOpt);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-option {value}")] public IReadOnlyList<string> DnsOption => Get<List<string>>(() => DnsOption);
    /// <summary>Set custom DNS search domains.</summary>
    [Argument(Format = "--dns-search {value}")] public IReadOnlyList<string> DnsSearch => Get<List<string>>(() => DnsSearch);
    /// <summary>Container NIS domain name.</summary>
    [Argument(Format = "--domainname {value}")] public string Domainname => Get<string>(() => Domainname);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Read in a file of environment variables.</summary>
    [Argument(Format = "--env-file {value}")] public IReadOnlyList<string> EnvFile => Get<List<string>>(() => EnvFile);
    /// <summary>Expose a port or a range of ports.</summary>
    [Argument(Format = "--expose {value}")] public IReadOnlyList<string> Expose => Get<List<string>>(() => Expose);
    /// <summary>GPU devices to add to the container ('all' to pass all GPUs).</summary>
    [Argument(Format = "--gpus {value}")] public string Gpus => Get<string>(() => Gpus);
    /// <summary>Add additional groups to join.</summary>
    [Argument(Format = "--group-add {value}")] public IReadOnlyList<string> GroupAdd => Get<List<string>>(() => GroupAdd);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Print usage.</summary>
    [Argument(Format = "--help")] public bool? Help => Get<bool?>(() => Help);
    /// <summary>Container host name.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Run an init inside the container that forwards signals and reaps processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Maximum IO bandwidth limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxbandwidth {value}")] public long? IoMaxbandwidth => Get<long?>(() => IoMaxbandwidth);
    /// <summary>Maximum IOps limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxiops {value}")] public int? IoMaxiops => Get<int?>(() => IoMaxiops);
    /// <summary>IPv4 address (e.g., 172.30.100.104).</summary>
    [Argument(Format = "--ip {value}")] public string Ip => Get<string>(() => Ip);
    /// <summary>IPv6 address (e.g., 2001:db8::33).</summary>
    [Argument(Format = "--ip6 {value}")] public string Ip6 => Get<string>(() => Ip6);
    /// <summary>IPC mode to use.</summary>
    [Argument(Format = "--ipc {value}")] public string Ipc => Get<string>(() => Ipc);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Set meta data on a container.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Read in a line delimited file of labels.</summary>
    [Argument(Format = "--label-file {value}")] public IReadOnlyList<string> LabelFile => Get<List<string>>(() => LabelFile);
    /// <summary>Add link to another container.</summary>
    [Argument(Format = "--link {value}")] public IReadOnlyList<string> Link => Get<List<string>>(() => Link);
    /// <summary>Container IPv4/IPv6 link-local addresses.</summary>
    [Argument(Format = "--link-local-ip {value}")] public IReadOnlyList<string> LinkLocalIp => Get<List<string>>(() => LinkLocalIp);
    /// <summary>Logging driver for the container.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Log driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Container MAC address (e.g., 92:d0:c6:0a:29:33).</summary>
    [Argument(Format = "--mac-address {value}")] public string MacAddress => Get<string>(() => MacAddress);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container memory swappiness (0 to 100).</summary>
    [Argument(Format = "--memory-swappiness {value}")] public long? MemorySwappiness => Get<long?>(() => MemorySwappiness);
    /// <summary>Attach a filesystem mount to the container.</summary>
    [Argument(Format = "--mount {value}")] public string Mount => Get<string>(() => Mount);
    /// <summary>Assign a name to the container.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--net {value}")] public string Net => Get<string>(() => Net);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--net-alias {value}")] public IReadOnlyList<string> NetAlias => Get<List<string>>(() => NetAlias);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--network-alias {value}")] public IReadOnlyList<string> NetworkAlias => Get<List<string>>(() => NetworkAlias);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Disable OOM Killer.</summary>
    [Argument(Format = "--oom-kill-disable")] public bool? OomKillDisable => Get<bool?>(() => OomKillDisable);
    /// <summary>Tune host's OOM preferences (-1000 to 1000).</summary>
    [Argument(Format = "--oom-score-adj {value}")] public int? OomScoreAdj => Get<int?>(() => OomScoreAdj);
    /// <summary>PID namespace to use.</summary>
    [Argument(Format = "--pid {value}")] public string Pid => Get<string>(() => Pid);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Give extended privileges to this container.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Publish a container's port(s) to the host.</summary>
    [Argument(Format = "--publish {value}")] public IReadOnlyList<string> Publish => Get<List<string>>(() => Publish);
    /// <summary>Publish all exposed ports to random ports.</summary>
    [Argument(Format = "--publish-all")] public bool? PublishAll => Get<bool?>(() => PublishAll);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>Automatically remove the container when it exits.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Runtime to use for this container.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Security Options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Signal to stop a container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Timeout (in seconds) to stop a container.</summary>
    [Argument(Format = "--stop-timeout {value}")] public int? StopTimeout => Get<int?>(() => StopTimeout);
    /// <summary>Storage driver options for the container.</summary>
    [Argument(Format = "--storage-opt {value}")] public IReadOnlyList<string> StorageOpt => Get<List<string>>(() => StorageOpt);
    /// <summary>Sysctl options.</summary>
    [Argument(Format = "--sysctl {key}:{value}")] public IReadOnlyDictionary<string, string> Sysctl => Get<Dictionary<string, string>>(() => Sysctl);
    /// <summary>Mount a tmpfs directory.</summary>
    [Argument(Format = "--tmpfs {value}")] public IReadOnlyList<string> Tmpfs => Get<List<string>>(() => Tmpfs);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>User namespace to use.</summary>
    [Argument(Format = "--userns {value}")] public string Userns => Get<string>(() => Userns);
    /// <summary>UTS namespace to use.</summary>
    [Argument(Format = "--uts {value}")] public string Uts => Get<string>(() => Uts);
    /// <summary>Bind mount a volume.</summary>
    [Argument(Format = "--volume {value}")] public IReadOnlyList<string> Volume => Get<List<string>>(() => Volume);
    /// <summary>Optional volume driver for the container.</summary>
    [Argument(Format = "--volume-driver {value}")] public string VolumeDriver => Get<string>(() => VolumeDriver);
    /// <summary>Mount volumes from the specified container(s).</summary>
    [Argument(Format = "--volumes-from {value}")] public IReadOnlyList<string> VolumesFrom => Get<List<string>>(() => VolumesFrom);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
    /// <summary>[COMMAND]</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerServiceUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceUpdate), Arguments = "service update")]
public partial class DockerServiceUpdateSettings : DockerOptionsBase
{
    /// <summary>Service command args.</summary>
    [Argument(Format = "--args {value}")] public string Args => Get<string>(() => Args);
    /// <summary>Add or update a config file on a service.</summary>
    [Argument(Format = "--config-add {value}")] public string ConfigAdd => Get<string>(() => ConfigAdd);
    /// <summary>Remove a configuration file.</summary>
    [Argument(Format = "--config-rm {value}")] public IReadOnlyList<string> ConfigRm => Get<List<string>>(() => ConfigRm);
    /// <summary>Add or update a placement constraint.</summary>
    [Argument(Format = "--constraint-add {value}")] public IReadOnlyList<string> ConstraintAdd => Get<List<string>>(() => ConstraintAdd);
    /// <summary>Remove a constraint.</summary>
    [Argument(Format = "--constraint-rm {value}")] public IReadOnlyList<string> ConstraintRm => Get<List<string>>(() => ConstraintRm);
    /// <summary>Add or update a container label.</summary>
    [Argument(Format = "--container-label-add {value}")] public IReadOnlyList<string> ContainerLabelAdd => Get<List<string>>(() => ContainerLabelAdd);
    /// <summary>Remove a container label by its key.</summary>
    [Argument(Format = "--container-label-rm {value}")] public IReadOnlyList<string> ContainerLabelRm => Get<List<string>>(() => ContainerLabelRm);
    /// <summary>Credential spec for managed service account (Windows only).</summary>
    [Argument(Format = "--credential-spec {value}")] public string CredentialSpec => Get<string>(() => CredentialSpec);
    /// <summary>Exit immediately instead of waiting for the service to converge.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Add or update a custom DNS server.</summary>
    [Argument(Format = "--dns-add {value}")] public IReadOnlyList<string> DnsAdd => Get<List<string>>(() => DnsAdd);
    /// <summary>Add or update a DNS option.</summary>
    [Argument(Format = "--dns-option-add {value}")] public IReadOnlyList<string> DnsOptionAdd => Get<List<string>>(() => DnsOptionAdd);
    /// <summary>Remove a DNS option.</summary>
    [Argument(Format = "--dns-option-rm {value}")] public IReadOnlyList<string> DnsOptionRm => Get<List<string>>(() => DnsOptionRm);
    /// <summary>Remove a custom DNS server.</summary>
    [Argument(Format = "--dns-rm {value}")] public IReadOnlyList<string> DnsRm => Get<List<string>>(() => DnsRm);
    /// <summary>Add or update a custom DNS search domain.</summary>
    [Argument(Format = "--dns-search-add {value}")] public IReadOnlyList<string> DnsSearchAdd => Get<List<string>>(() => DnsSearchAdd);
    /// <summary>Remove a DNS search domain.</summary>
    [Argument(Format = "--dns-search-rm {value}")] public IReadOnlyList<string> DnsSearchRm => Get<List<string>>(() => DnsSearchRm);
    /// <summary>Endpoint mode (vip or dnsrr).</summary>
    [Argument(Format = "--endpoint-mode {value}")] public string EndpointMode => Get<string>(() => EndpointMode);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Add or update an environment variable.</summary>
    [Argument(Format = "--env-add {value}")] public IReadOnlyList<string> EnvAdd => Get<List<string>>(() => EnvAdd);
    /// <summary>Remove an environment variable.</summary>
    [Argument(Format = "--env-rm {value}")] public IReadOnlyList<string> EnvRm => Get<List<string>>(() => EnvRm);
    /// <summary>Force update even if no changes require it.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Add a Generic resource.</summary>
    [Argument(Format = "--generic-resource-add {value}")] public IReadOnlyList<string> GenericResourceAdd => Get<List<string>>(() => GenericResourceAdd);
    /// <summary>Remove a Generic resource.</summary>
    [Argument(Format = "--generic-resource-rm {value}")] public IReadOnlyList<string> GenericResourceRm => Get<List<string>>(() => GenericResourceRm);
    /// <summary>Add an additional supplementary user group to the container.</summary>
    [Argument(Format = "--group-add {value}")] public IReadOnlyList<string> GroupAdd => Get<List<string>>(() => GroupAdd);
    /// <summary>Remove a previously added supplementary user group from the container.</summary>
    [Argument(Format = "--group-rm {value}")] public IReadOnlyList<string> GroupRm => Get<List<string>>(() => GroupRm);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--host-add {value}")] public IReadOnlyList<string> HostAdd => Get<List<string>>(() => HostAdd);
    /// <summary>Remove a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--host-rm {value}")] public IReadOnlyList<string> HostRm => Get<List<string>>(() => HostRm);
    /// <summary>Container hostname.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Service image tag.</summary>
    [Argument(Format = "--image {value}")] public string Image => Get<string>(() => Image);
    /// <summary>Use an init inside each service container to forward signals and reap processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Service container isolation mode.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Add or update a service label.</summary>
    [Argument(Format = "--label-add {value}")] public IReadOnlyList<string> LabelAdd => Get<List<string>>(() => LabelAdd);
    /// <summary>Remove a label by its key.</summary>
    [Argument(Format = "--label-rm {value}")] public IReadOnlyList<string> LabelRm => Get<List<string>>(() => LabelRm);
    /// <summary>Limit CPUs.</summary>
    [Argument(Format = "--limit-cpu {value}")] public decimal? LimitCpu => Get<decimal?>(() => LimitCpu);
    /// <summary>Limit Memory.</summary>
    [Argument(Format = "--limit-memory {value}")] public long? LimitMemory => Get<long?>(() => LimitMemory);
    /// <summary>Logging driver for service.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Logging driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Add or update a mount on a service.</summary>
    [Argument(Format = "--mount-add {value}")] public string MountAdd => Get<string>(() => MountAdd);
    /// <summary>Remove a mount by its target path.</summary>
    [Argument(Format = "--mount-rm {value}")] public IReadOnlyList<string> MountRm => Get<List<string>>(() => MountRm);
    /// <summary>Add a network.</summary>
    [Argument(Format = "--network-add {value}")] public string NetworkAdd => Get<string>(() => NetworkAdd);
    /// <summary>Remove a network.</summary>
    [Argument(Format = "--network-rm {value}")] public IReadOnlyList<string> NetworkRm => Get<List<string>>(() => NetworkRm);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Do not query the registry to resolve image digest and supported platforms.</summary>
    [Argument(Format = "--no-resolve-image")] public bool? NoResolveImage => Get<bool?>(() => NoResolveImage);
    /// <summary>Add a placement preference.</summary>
    [Argument(Format = "--placement-pref-add {value}")] public string PlacementPrefAdd => Get<string>(() => PlacementPrefAdd);
    /// <summary>Remove a placement preference.</summary>
    [Argument(Format = "--placement-pref-rm {value}")] public string PlacementPrefRm => Get<string>(() => PlacementPrefRm);
    /// <summary>Add or update a published port.</summary>
    [Argument(Format = "--publish-add {value}")] public string PublishAdd => Get<string>(() => PublishAdd);
    /// <summary>Remove a published port by its target port.</summary>
    [Argument(Format = "--publish-rm {value}")] public string PublishRm => Get<string>(() => PublishRm);
    /// <summary>Suppress progress output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Number of tasks.</summary>
    [Argument(Format = "--replicas {value}")] public int? Replicas => Get<int?>(() => Replicas);
    /// <summary>Maximum number of tasks per node (default 0 = unlimited).</summary>
    [Argument(Format = "--replicas-max-per-node {value}")] public int? ReplicasMaxPerNode => Get<int?>(() => ReplicasMaxPerNode);
    /// <summary>Reserve CPUs.</summary>
    [Argument(Format = "--reserve-cpu {value}")] public decimal? ReserveCpu => Get<decimal?>(() => ReserveCpu);
    /// <summary>Reserve Memory.</summary>
    [Argument(Format = "--reserve-memory {value}")] public long? ReserveMemory => Get<long?>(() => ReserveMemory);
    /// <summary>Restart when condition is met ("none"|"on-failure"|"any").</summary>
    [Argument(Format = "--restart-condition {value}")] public DockerRestartCondition RestartCondition => Get<DockerRestartCondition>(() => RestartCondition);
    /// <summary>Delay between restart attempts (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--restart-delay {value}")] public string RestartDelay => Get<string>(() => RestartDelay);
    /// <summary>Maximum number of restarts before giving up.</summary>
    [Argument(Format = "--restart-max-attempts {value}")] public int? RestartMaxAttempts => Get<int?>(() => RestartMaxAttempts);
    /// <summary>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--restart-window {value}")] public string RestartWindow => Get<string>(() => RestartWindow);
    /// <summary>Rollback to previous specification.</summary>
    [Argument(Format = "--rollback")] public bool? Rollback => Get<bool?>(() => Rollback);
    /// <summary>Delay between task rollbacks (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--rollback-delay {value}")] public string RollbackDelay => Get<string>(() => RollbackDelay);
    /// <summary>Action on rollback failure ("pause"|"continue").</summary>
    [Argument(Format = "--rollback-failure-action {value}")] public DockerRollbackFailureAction RollbackFailureAction => Get<DockerRollbackFailureAction>(() => RollbackFailureAction);
    /// <summary>Failure rate to tolerate during a rollback.</summary>
    [Argument(Format = "--rollback-max-failure-ratio {value}")] public float? RollbackMaxFailureRatio => Get<float?>(() => RollbackMaxFailureRatio);
    /// <summary>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--rollback-monitor {value}")] public string RollbackMonitor => Get<string>(() => RollbackMonitor);
    /// <summary>Rollback order ("start-first"|"stop-first").</summary>
    [Argument(Format = "--rollback-order {value}")] public DockerRollbackOrder RollbackOrder => Get<DockerRollbackOrder>(() => RollbackOrder);
    /// <summary>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</summary>
    [Argument(Format = "--rollback-parallelism {value}")] public int? RollbackParallelism => Get<int?>(() => RollbackParallelism);
    /// <summary>Add or update a secret on a service.</summary>
    [Argument(Format = "--secret-add {value}")] public string SecretAdd => Get<string>(() => SecretAdd);
    /// <summary>Remove a secret.</summary>
    [Argument(Format = "--secret-rm {value}")] public IReadOnlyList<string> SecretRm => Get<List<string>>(() => SecretRm);
    /// <summary>Time to wait before force killing a container (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--stop-grace-period {value}")] public string StopGracePeriod => Get<string>(() => StopGracePeriod);
    /// <summary>Signal to stop the container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Add or update a Sysctl option.</summary>
    [Argument(Format = "--sysctl-add {value}")] public IReadOnlyList<string> SysctlAdd => Get<List<string>>(() => SysctlAdd);
    /// <summary>Remove a Sysctl option.</summary>
    [Argument(Format = "--sysctl-rm {value}")] public IReadOnlyList<string> SysctlRm => Get<List<string>>(() => SysctlRm);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Delay between updates (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--update-delay {value}")] public string UpdateDelay => Get<string>(() => UpdateDelay);
    /// <summary>Action on update failure ("pause"|"continue"|"rollback").</summary>
    [Argument(Format = "--update-failure-action {value}")] public DockerUpdateFailureAction UpdateFailureAction => Get<DockerUpdateFailureAction>(() => UpdateFailureAction);
    /// <summary>Failure rate to tolerate during an update.</summary>
    [Argument(Format = "--update-max-failure-ratio {value}")] public float? UpdateMaxFailureRatio => Get<float?>(() => UpdateMaxFailureRatio);
    /// <summary>Duration after each task update to monitor for failure (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--update-monitor {value}")] public string UpdateMonitor => Get<string>(() => UpdateMonitor);
    /// <summary>Update order ("start-first"|"stop-first").</summary>
    [Argument(Format = "--update-order {value}")] public DockerUpdateOrder UpdateOrder => Get<DockerUpdateOrder>(() => UpdateOrder);
    /// <summary>Maximum number of tasks updated simultaneously (0 to update all at once).</summary>
    [Argument(Format = "--update-parallelism {value}")] public int? UpdateParallelism => Get<int?>(() => UpdateParallelism);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>Send registry authentication details to swarm agents.</summary>
    [Argument(Format = "--with-registry-auth")] public bool? WithRegistryAuth => Get<bool?>(() => WithRegistryAuth);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>SERVICE</summary>
    [Argument(Format = "{value}")] public string Service => Get<string>(() => Service);
}
#endregion
#region DockerPortSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPort), Arguments = "port")]
public partial class DockerPortSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>[PRIVATE_PORT[/PROTO]]</summary>
    [Argument(Format = "{value}")] public string PrivatePort => Get<string>(() => PrivatePort);
}
#endregion
#region DockerContainerSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainer), Arguments = "container")]
public partial class DockerContainerSettings : DockerOptionsBase
{
}
#endregion
#region DockerImagePushSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImagePush), Arguments = "image push")]
public partial class DockerImagePushSettings : DockerOptionsBase
{
    /// <summary>Push all tagged images in the repository.</summary>
    [Argument(Format = "--all-tags")] public bool? AllTags => Get<bool?>(() => AllTags);
    /// <summary>Skip image signing.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>NAME[:TAG]</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
}
#endregion
#region DockerServiceInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceInspect), Arguments = "service inspect")]
public partial class DockerServiceInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print the information in a human friendly format.</summary>
    [Argument(Format = "--pretty")] public bool? Pretty => Get<bool?>(() => Pretty);
    /// <summary>SERVICE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Services => Get<List<string>>(() => Services);
}
#endregion
#region DockerNetworkConnectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkConnect), Arguments = "network connect")]
public partial class DockerNetworkConnectSettings : DockerOptionsBase
{
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--alias {value}")] public IReadOnlyList<string> Alias => Get<List<string>>(() => Alias);
    /// <summary>driver options for the network.</summary>
    [Argument(Format = "--driver-opt {value}")] public IReadOnlyList<string> DriverOpt => Get<List<string>>(() => DriverOpt);
    /// <summary>IPv4 address (e.g., 172.30.100.104).</summary>
    [Argument(Format = "--ip {value}")] public string Ip => Get<string>(() => Ip);
    /// <summary>IPv6 address (e.g., 2001:db8::33).</summary>
    [Argument(Format = "--ip6 {value}")] public string Ip6 => Get<string>(() => Ip6);
    /// <summary>Add link to another container.</summary>
    [Argument(Format = "--link {value}")] public IReadOnlyList<string> Link => Get<List<string>>(() => Link);
    /// <summary>Add a link-local address for the container.</summary>
    [Argument(Format = "--link-local-ip {value}")] public IReadOnlyList<string> LinkLocalIp => Get<List<string>>(() => LinkLocalIp);
    /// <summary>NETWORK</summary>
    [Argument(Format = "{value}")] public string Network => Get<string>(() => Network);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerSecretLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSecretLs), Arguments = "secret ls")]
public partial class DockerSecretLsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print secrets using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only display IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerSwarmLeaveSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmLeave), Arguments = "swarm leave")]
public partial class DockerSwarmLeaveSettings : DockerOptionsBase
{
    /// <summary>Force this node to leave the swarm, ignoring warnings.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
}
#endregion
#region DockerImagesSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImages), Arguments = "images")]
public partial class DockerImagesSettings : DockerOptionsBase
{
    /// <summary>Show all images (default hides intermediate images).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Show digests.</summary>
    [Argument(Format = "--digests")] public bool? Digests => Get<bool?>(() => Digests);
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only show numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerEngineUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerEngineUpdate), Arguments = "engine update")]
public partial class DockerEngineUpdateSettings : DockerOptionsBase
{
    /// <summary>override default location of containerd endpoint.</summary>
    [Argument(Format = "--containerd {value}")] public string Containerd => Get<string>(() => Containerd);
    /// <summary>Specify engine image (default uses the same image as currently running).</summary>
    [Argument(Format = "--engine-image {value}")] public string EngineImage => Get<string>(() => EngineImage);
    /// <summary>Override the current location where engine images are pulled.</summary>
    [Argument(Format = "--registry-prefix {value}")] public string RegistryPrefix => Get<string>(() => RegistryPrefix);
    /// <summary>Specify engine version.</summary>
    [Argument(Format = "--version {value}")] public string Version => Get<string>(() => Version);
}
#endregion
#region DockerSystemEventsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSystemEvents), Arguments = "system events")]
public partial class DockerSystemEventsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Show all events created since timestamp.</summary>
    [Argument(Format = "--since {value}")] public string Since => Get<string>(() => Since);
    /// <summary>Stream events until this timestamp.</summary>
    [Argument(Format = "--until {value}")] public string Until => Get<string>(() => Until);
}
#endregion
#region DockerInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerInspect), Arguments = "inspect")]
public partial class DockerInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Display total file sizes if the type is container.</summary>
    [Argument(Format = "--size")] public bool? Size => Get<bool?>(() => Size);
    /// <summary>Return JSON for specified type.</summary>
    [Argument(Format = "--type {value}")] public string Type => Get<string>(() => Type);
    /// <summary>NAME|ID</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Names => Get<List<string>>(() => Names);
}
#endregion
#region DockerEngineCheckSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerEngineCheck), Arguments = "engine check")]
public partial class DockerEngineCheckSettings : DockerOptionsBase
{
    /// <summary>override default location of containerd endpoint.</summary>
    [Argument(Format = "--containerd {value}")] public string Containerd => Get<string>(() => Containerd);
    /// <summary>Report downgrades (default omits older versions).</summary>
    [Argument(Format = "--downgrades")] public bool? Downgrades => Get<bool?>(() => Downgrades);
    /// <summary>Specify engine image (default uses the same image as currently running).</summary>
    [Argument(Format = "--engine-image {value}")] public string EngineImage => Get<string>(() => EngineImage);
    /// <summary>Pretty-print updates using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Include pre-release versions.</summary>
    [Argument(Format = "--pre-releases")] public bool? PreReleases => Get<bool?>(() => PreReleases);
    /// <summary>Only display available versions.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Override the existing location where engine images are pulled.</summary>
    [Argument(Format = "--registry-prefix {value}")] public string RegistryPrefix => Get<string>(() => RegistryPrefix);
    /// <summary>Report available upgrades.</summary>
    [Argument(Format = "--upgrades")] public bool? Upgrades => Get<bool?>(() => Upgrades);
}
#endregion
#region DockerAttachSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerAttach), Arguments = "attach")]
public partial class DockerAttachSettings : DockerOptionsBase
{
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Do not attach STDIN.</summary>
    [Argument(Format = "--no-stdin")] public bool? NoStdin => Get<bool?>(() => NoStdin);
    /// <summary>Proxy all received signals to the process.</summary>
    [Argument(Format = "--sig-proxy")] public bool? SigProxy => Get<bool?>(() => SigProxy);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerContainerWaitSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerWait), Arguments = "container wait")]
public partial class DockerContainerWaitSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerSwarmCaSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmCa), Arguments = "swarm ca")]
public partial class DockerSwarmCaSettings : DockerOptionsBase
{
    /// <summary>Path to the PEM-formatted root CA certificate to use for the new cluster.</summary>
    [Argument(Format = "--ca-cert {value}")] public string CaCert => Get<string>(() => CaCert);
    /// <summary>Path to the PEM-formatted root CA key to use for the new cluster.</summary>
    [Argument(Format = "--ca-key {value}")] public string CaKey => Get<string>(() => CaKey);
    /// <summary>Validity period for node certificates (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--cert-expiry {value}")] public string CertExpiry => Get<string>(() => CertExpiry);
    /// <summary>Exit immediately instead of waiting for the root rotation to converge.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Specifications of one or more certificate signing endpoints.</summary>
    [Argument(Format = "--external-ca {value}")] public string ExternalCa => Get<string>(() => ExternalCa);
    /// <summary>Suppress progress output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</summary>
    [Argument(Format = "--rotate")] public bool? Rotate => Get<bool?>(() => Rotate);
}
#endregion
#region DockerEngineSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerEngine), Arguments = "engine")]
public partial class DockerEngineSettings : DockerOptionsBase
{
    /// <summary>COMMAND</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
}
#endregion
#region DockerSystemPruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSystemPrune), Arguments = "system prune")]
public partial class DockerSystemPruneSettings : DockerOptionsBase
{
    /// <summary>Remove all unused images not just dangling ones.</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Provide filter values (e.g. 'label=&lt;key&gt;=&lt;value&gt;').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Prune volumes.</summary>
    [Argument(Format = "--volumes")] public bool? Volumes => Get<bool?>(() => Volumes);
}
#endregion
#region DockerBuilderSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuilder), Arguments = "builder")]
public partial class DockerBuilderSettings : DockerOptionsBase
{
}
#endregion
#region DockerContainerPauseSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerPause), Arguments = "container pause")]
public partial class DockerContainerPauseSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContainerCommitSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerCommit), Arguments = "container commit")]
public partial class DockerContainerCommitSettings : DockerOptionsBase
{
    /// <summary>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</summary>
    [Argument(Format = "--author {value}")] public string Author => Get<string>(() => Author);
    /// <summary>Apply Dockerfile instruction to the created image.</summary>
    [Argument(Format = "--change {value}")] public IReadOnlyList<string> Change => Get<List<string>>(() => Change);
    /// <summary>Commit message.</summary>
    [Argument(Format = "--message {value}")] public string Message => Get<string>(() => Message);
    /// <summary>Pause container during commit.</summary>
    [Argument(Format = "--pause")] public bool? Pause => Get<bool?>(() => Pause);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerContextLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextLs), Arguments = "context ls")]
public partial class DockerContextLsSettings : DockerOptionsBase
{
    /// <summary>Pretty-print contexts using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only show context names.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerContextRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextRm), Arguments = "context rm")]
public partial class DockerContextRmSettings : DockerOptionsBase
{
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Contexts => Get<List<string>>(() => Contexts);
}
#endregion
#region DockerStackPsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStackPs), Arguments = "stack ps")]
public partial class DockerStackPsSettings : DockerStackSettings
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print tasks using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Kubernetes namespace to use.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Do not map IDs to Names.</summary>
    [Argument(Format = "--no-resolve")] public bool? NoResolve => Get<bool?>(() => NoResolve);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display task IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>STACK</summary>
    [Argument(Format = "{value}")] public string Stack => Get<string>(() => Stack);
}
#endregion
#region DockerContainerCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerCreate), Arguments = "container create")]
public partial class DockerContainerCreateSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Attach to STDIN, STDOUT or STDERR.</summary>
    [Argument(Format = "--attach {value}")] public IReadOnlyList<string> Attach => Get<List<string>>(() => Attach);
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Block IO weight (relative device weight).</summary>
    [Argument(Format = "--blkio-weight-device {value}")] public IReadOnlyList<string> BlkioWeightDevice => Get<List<string>>(() => BlkioWeightDevice);
    /// <summary>Add Linux capabilities.</summary>
    [Argument(Format = "--cap-add {value}")] public IReadOnlyList<string> CapAdd => Get<List<string>>(() => CapAdd);
    /// <summary>Drop Linux capabilities.</summary>
    [Argument(Format = "--cap-drop {value}")] public IReadOnlyList<string> CapDrop => Get<List<string>>(() => CapDrop);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Write the container ID to the file.</summary>
    [Argument(Format = "--cidfile {value}")] public string Cidfile => Get<string>(() => Cidfile);
    /// <summary>CPU count (Windows only).</summary>
    [Argument(Format = "--cpu-count {value}")] public long? CpuCount => Get<long?>(() => CpuCount);
    /// <summary>CPU percent (Windows only).</summary>
    [Argument(Format = "--cpu-percent {value}")] public long? CpuPercent => Get<long?>(() => CpuPercent);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Add a host device to the container.</summary>
    [Argument(Format = "--device {value}")] public IReadOnlyList<string> Device => Get<List<string>>(() => Device);
    /// <summary>Add a rule to the cgroup allowed devices list.</summary>
    [Argument(Format = "--device-cgroup-rule {value}")] public IReadOnlyList<string> DeviceCgroupRule => Get<List<string>>(() => DeviceCgroupRule);
    /// <summary>Limit read rate (bytes per second) from a device.</summary>
    [Argument(Format = "--device-read-bps {value}")] public IReadOnlyList<string> DeviceReadBps => Get<List<string>>(() => DeviceReadBps);
    /// <summary>Limit read rate (IO per second) from a device.</summary>
    [Argument(Format = "--device-read-iops {value}")] public IReadOnlyList<string> DeviceReadIops => Get<List<string>>(() => DeviceReadIops);
    /// <summary>Limit write rate (bytes per second) to a device.</summary>
    [Argument(Format = "--device-write-bps {value}")] public IReadOnlyList<string> DeviceWriteBps => Get<List<string>>(() => DeviceWriteBps);
    /// <summary>Limit write rate (IO per second) to a device.</summary>
    [Argument(Format = "--device-write-iops {value}")] public IReadOnlyList<string> DeviceWriteIops => Get<List<string>>(() => DeviceWriteIops);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set custom DNS servers.</summary>
    [Argument(Format = "--dns {value}")] public IReadOnlyList<string> Dns => Get<List<string>>(() => Dns);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-opt {value}")] public IReadOnlyList<string> DnsOpt => Get<List<string>>(() => DnsOpt);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-option {value}")] public IReadOnlyList<string> DnsOption => Get<List<string>>(() => DnsOption);
    /// <summary>Set custom DNS search domains.</summary>
    [Argument(Format = "--dns-search {value}")] public IReadOnlyList<string> DnsSearch => Get<List<string>>(() => DnsSearch);
    /// <summary>Container NIS domain name.</summary>
    [Argument(Format = "--domainname {value}")] public string Domainname => Get<string>(() => Domainname);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Read in a file of environment variables.</summary>
    [Argument(Format = "--env-file {value}")] public IReadOnlyList<string> EnvFile => Get<List<string>>(() => EnvFile);
    /// <summary>Expose a port or a range of ports.</summary>
    [Argument(Format = "--expose {value}")] public IReadOnlyList<string> Expose => Get<List<string>>(() => Expose);
    /// <summary>GPU devices to add to the container ('all' to pass all GPUs).</summary>
    [Argument(Format = "--gpus {value}")] public string Gpus => Get<string>(() => Gpus);
    /// <summary>Add additional groups to join.</summary>
    [Argument(Format = "--group-add {value}")] public IReadOnlyList<string> GroupAdd => Get<List<string>>(() => GroupAdd);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Print usage.</summary>
    [Argument(Format = "--help")] public bool? Help => Get<bool?>(() => Help);
    /// <summary>Container host name.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Run an init inside the container that forwards signals and reaps processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Maximum IO bandwidth limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxbandwidth {value}")] public long? IoMaxbandwidth => Get<long?>(() => IoMaxbandwidth);
    /// <summary>Maximum IOps limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxiops {value}")] public int? IoMaxiops => Get<int?>(() => IoMaxiops);
    /// <summary>IPv4 address (e.g., 172.30.100.104).</summary>
    [Argument(Format = "--ip {value}")] public string Ip => Get<string>(() => Ip);
    /// <summary>IPv6 address (e.g., 2001:db8::33).</summary>
    [Argument(Format = "--ip6 {value}")] public string Ip6 => Get<string>(() => Ip6);
    /// <summary>IPC mode to use.</summary>
    [Argument(Format = "--ipc {value}")] public string Ipc => Get<string>(() => Ipc);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Set meta data on a container.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Read in a line delimited file of labels.</summary>
    [Argument(Format = "--label-file {value}")] public IReadOnlyList<string> LabelFile => Get<List<string>>(() => LabelFile);
    /// <summary>Add link to another container.</summary>
    [Argument(Format = "--link {value}")] public IReadOnlyList<string> Link => Get<List<string>>(() => Link);
    /// <summary>Container IPv4/IPv6 link-local addresses.</summary>
    [Argument(Format = "--link-local-ip {value}")] public IReadOnlyList<string> LinkLocalIp => Get<List<string>>(() => LinkLocalIp);
    /// <summary>Logging driver for the container.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Log driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Container MAC address (e.g., 92:d0:c6:0a:29:33).</summary>
    [Argument(Format = "--mac-address {value}")] public string MacAddress => Get<string>(() => MacAddress);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container memory swappiness (0 to 100).</summary>
    [Argument(Format = "--memory-swappiness {value}")] public long? MemorySwappiness => Get<long?>(() => MemorySwappiness);
    /// <summary>Attach a filesystem mount to the container.</summary>
    [Argument(Format = "--mount {value}")] public string Mount => Get<string>(() => Mount);
    /// <summary>Assign a name to the container.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--net {value}")] public string Net => Get<string>(() => Net);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--net-alias {value}")] public IReadOnlyList<string> NetAlias => Get<List<string>>(() => NetAlias);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--network-alias {value}")] public IReadOnlyList<string> NetworkAlias => Get<List<string>>(() => NetworkAlias);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Disable OOM Killer.</summary>
    [Argument(Format = "--oom-kill-disable")] public bool? OomKillDisable => Get<bool?>(() => OomKillDisable);
    /// <summary>Tune host's OOM preferences (-1000 to 1000).</summary>
    [Argument(Format = "--oom-score-adj {value}")] public int? OomScoreAdj => Get<int?>(() => OomScoreAdj);
    /// <summary>PID namespace to use.</summary>
    [Argument(Format = "--pid {value}")] public string Pid => Get<string>(() => Pid);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Give extended privileges to this container.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Publish a container's port(s) to the host.</summary>
    [Argument(Format = "--publish {value}")] public IReadOnlyList<string> Publish => Get<List<string>>(() => Publish);
    /// <summary>Publish all exposed ports to random ports.</summary>
    [Argument(Format = "--publish-all")] public bool? PublishAll => Get<bool?>(() => PublishAll);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>Automatically remove the container when it exits.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Runtime to use for this container.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Security Options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Signal to stop a container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Timeout (in seconds) to stop a container.</summary>
    [Argument(Format = "--stop-timeout {value}")] public int? StopTimeout => Get<int?>(() => StopTimeout);
    /// <summary>Storage driver options for the container.</summary>
    [Argument(Format = "--storage-opt {value}")] public IReadOnlyList<string> StorageOpt => Get<List<string>>(() => StorageOpt);
    /// <summary>Sysctl options.</summary>
    [Argument(Format = "--sysctl {key}:{value}")] public IReadOnlyDictionary<string, string> Sysctl => Get<Dictionary<string, string>>(() => Sysctl);
    /// <summary>Mount a tmpfs directory.</summary>
    [Argument(Format = "--tmpfs {value}")] public IReadOnlyList<string> Tmpfs => Get<List<string>>(() => Tmpfs);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>User namespace to use.</summary>
    [Argument(Format = "--userns {value}")] public string Userns => Get<string>(() => Userns);
    /// <summary>UTS namespace to use.</summary>
    [Argument(Format = "--uts {value}")] public string Uts => Get<string>(() => Uts);
    /// <summary>Bind mount a volume.</summary>
    [Argument(Format = "--volume {value}")] public IReadOnlyList<string> Volume => Get<List<string>>(() => Volume);
    /// <summary>Optional volume driver for the container.</summary>
    [Argument(Format = "--volume-driver {value}")] public string VolumeDriver => Get<string>(() => VolumeDriver);
    /// <summary>Mount volumes from the specified container(s).</summary>
    [Argument(Format = "--volumes-from {value}")] public IReadOnlyList<string> VolumesFrom => Get<List<string>>(() => VolumesFrom);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
    /// <summary>[COMMAND]</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerVolumeCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolumeCreate), Arguments = "volume create")]
public partial class DockerVolumeCreateSettings : DockerOptionsBase
{
    /// <summary>Specify volume driver name.</summary>
    [Argument(Format = "--driver {value}")] public string Driver => Get<string>(() => Driver);
    /// <summary>Set metadata for a volume.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Specify volume name.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Set driver specific options.</summary>
    [Argument(Format = "--opt {key}:{value}")] public IReadOnlyDictionary<string, string> Opt => Get<Dictionary<string, string>>(() => Opt);
    /// <summary>[VOLUME]</summary>
    [Argument(Format = "{value}")] public string Volume => Get<string>(() => Volume);
}
#endregion
#region DockerPluginSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPlugin), Arguments = "plugin")]
public partial class DockerPluginSettings : DockerOptionsBase
{
}
#endregion
#region DockerLoginSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerLogin), Arguments = "login")]
public partial class DockerLoginSettings : DockerOptionsBase
{
    /// <summary>Password.</summary>
    [Argument(Format = "--password {value}", Secret = true)] public string Password => Get<string>(() => Password);
    /// <summary>Username.</summary>
    [Argument(Format = "--username {value}")] public string Username => Get<string>(() => Username);
    /// <summary>[SERVER]</summary>
    [Argument(Format = "{value}")] public string Server => Get<string>(() => Server);
}
#endregion
#region DockerSwarmUnlockKeySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmUnlockKey), Arguments = "swarm unlock-key")]
public partial class DockerSwarmUnlockKeySettings : DockerOptionsBase
{
    /// <summary>Only display token.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Rotate unlock key.</summary>
    [Argument(Format = "--rotate")] public bool? Rotate => Get<bool?>(() => Rotate);
}
#endregion
#region DockerStartSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStart), Arguments = "start")]
public partial class DockerStartSettings : DockerOptionsBase
{
    /// <summary>Attach STDOUT/STDERR and forward signals.</summary>
    [Argument(Format = "--attach")] public bool? Attach => Get<bool?>(() => Attach);
    /// <summary>Restore from this checkpoint.</summary>
    [Argument(Format = "--checkpoint {value}")] public string Checkpoint => Get<string>(() => Checkpoint);
    /// <summary>Use a custom checkpoint storage directory.</summary>
    [Argument(Format = "--checkpoint-dir {value}")] public string CheckpointDir => Get<string>(() => CheckpointDir);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Attach container's STDIN.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerSwarmInitSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmInit), Arguments = "swarm init")]
public partial class DockerSwarmInitSettings : DockerOptionsBase
{
    /// <summary>Advertised address (format: &lt;ip|interface&gt;[:port]).</summary>
    [Argument(Format = "--advertise-addr {value}")] public string AdvertiseAddr => Get<string>(() => AdvertiseAddr);
    /// <summary>Enable manager autolocking (requiring an unlock key to start a stopped manager).</summary>
    [Argument(Format = "--autolock")] public bool? Autolock => Get<bool?>(() => Autolock);
    /// <summary>Availability of the node ("active"|"pause"|"drain").</summary>
    [Argument(Format = "--availability {value}")] public DockerAvailability Availability => Get<DockerAvailability>(() => Availability);
    /// <summary>Validity period for node certificates (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--cert-expiry {value}")] public string CertExpiry => Get<string>(() => CertExpiry);
    /// <summary>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</summary>
    [Argument(Format = "--data-path-addr {value}")] public string DataPathAddr => Get<string>(() => DataPathAddr);
    /// <summary>Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.</summary>
    [Argument(Format = "--data-path-port {value}")] public string DataPathPort => Get<string>(() => DataPathPort);
    /// <summary>default address pool in CIDR format.</summary>
    [Argument(Format = "--default-addr-pool {value}")] public string DefaultAddrPool => Get<string>(() => DefaultAddrPool);
    /// <summary>default address pool subnet mask length.</summary>
    [Argument(Format = "--default-addr-pool-mask-length {value}")] public string DefaultAddrPoolMaskLength => Get<string>(() => DefaultAddrPoolMaskLength);
    /// <summary>Dispatcher heartbeat period (ns|us|ms|s|m|h).</summary>
    [Argument(Format = "--dispatcher-heartbeat {value}")] public string DispatcherHeartbeat => Get<string>(() => DispatcherHeartbeat);
    /// <summary>Specifications of one or more certificate signing endpoints.</summary>
    [Argument(Format = "--external-ca {value}")] public string ExternalCa => Get<string>(() => ExternalCa);
    /// <summary>Force create a new cluster from current state.</summary>
    [Argument(Format = "--force-new-cluster")] public bool? ForceNewCluster => Get<bool?>(() => ForceNewCluster);
    /// <summary>Listen address (format: &lt;ip|interface&gt;[:port]).</summary>
    [Argument(Format = "--listen-addr {value}")] public string ListenAddr => Get<string>(() => ListenAddr);
    /// <summary>Number of additional Raft snapshots to retain.</summary>
    [Argument(Format = "--max-snapshots {value}")] public int? MaxSnapshots => Get<int?>(() => MaxSnapshots);
    /// <summary>Number of log entries between Raft snapshots.</summary>
    [Argument(Format = "--snapshot-interval {value}")] public int? SnapshotInterval => Get<int?>(() => SnapshotInterval);
    /// <summary>Task history retention limit.</summary>
    [Argument(Format = "--task-history-limit {value}")] public long? TaskHistoryLimit => Get<long?>(() => TaskHistoryLimit);
}
#endregion
#region DockerContainerDiffSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerDiff), Arguments = "container diff")]
public partial class DockerContainerDiffSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerContainerRestartSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerRestart), Arguments = "container restart")]
public partial class DockerContainerRestartSettings : DockerOptionsBase
{
    /// <summary>Seconds to wait for stop before killing the container.</summary>
    [Argument(Format = "--time {value}")] public int? Time => Get<int?>(() => Time);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerConfigSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerConfig), Arguments = "config")]
public partial class DockerConfigSettings : DockerOptionsBase
{
}
#endregion
#region DockerPluginDisableSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginDisable), Arguments = "plugin disable")]
public partial class DockerPluginDisableSettings : DockerOptionsBase
{
    /// <summary>Force the disable of an active plugin.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
}
#endregion
#region DockerContainerUnpauseSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerUnpause), Arguments = "container unpause")]
public partial class DockerContainerUnpauseSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContextImportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextImport), Arguments = "context import")]
public partial class DockerContextImportSettings : DockerOptionsBase
{
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
    /// <summary>FILE|-</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
}
#endregion
#region DockerRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerRm), Arguments = "rm")]
public partial class DockerRmSettings : DockerOptionsBase
{
    /// <summary>Force the removal of a running container (uses SIGKILL).</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Remove the specified link.</summary>
    [Argument(Format = "--link")] public bool? Link => Get<bool?>(() => Link);
    /// <summary>Remove the volumes associated with the container.</summary>
    [Argument(Format = "--volumes")] public bool? Volumes => Get<bool?>(() => Volumes);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerDeploySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerDeploy), Arguments = "deploy")]
public partial class DockerDeploySettings : DockerOptionsBase
{
    /// <summary>Path to a Distributed Application Bundle file.</summary>
    [Argument(Format = "--bundle-file {value}")] public string BundleFile => Get<string>(() => BundleFile);
    /// <summary>Path to a Compose file, or "-" to read from stdin.</summary>
    [Argument(Format = "--compose-file {value}")] public IReadOnlyList<string> ComposeFile => Get<List<string>>(() => ComposeFile);
    /// <summary>Kubernetes namespace to use.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Prune services that are no longer referenced.</summary>
    [Argument(Format = "--prune")] public bool? Prune => Get<bool?>(() => Prune);
    /// <summary>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</summary>
    [Argument(Format = "--resolve-image {value}")] public DockerResolveImage ResolveImage => Get<DockerResolveImage>(() => ResolveImage);
    /// <summary>Send registry authentication details to Swarm agents.</summary>
    [Argument(Format = "--with-registry-auth")] public bool? WithRegistryAuth => Get<bool?>(() => WithRegistryAuth);
    /// <summary>STACK</summary>
    [Argument(Format = "{value}")] public string Stack => Get<string>(() => Stack);
}
#endregion
#region DockerNodeRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodeRm), Arguments = "node rm")]
public partial class DockerNodeRmSettings : DockerOptionsBase
{
    /// <summary>Force remove a node from the swarm.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>NODE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Nodes => Get<List<string>>(() => Nodes);
}
#endregion
#region DockerCheckpointRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCheckpointRm), Arguments = "checkpoint rm")]
public partial class DockerCheckpointRmSettings : DockerOptionsBase
{
    /// <summary>Use a custom checkpoint storage directory.</summary>
    [Argument(Format = "--checkpoint-dir {value}")] public string CheckpointDir => Get<string>(() => CheckpointDir);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>CHECKPOINT</summary>
    [Argument(Format = "{value}")] public string Checkpoint => Get<string>(() => Checkpoint);
}
#endregion
#region DockerPushSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPush), Arguments = "push")]
public partial class DockerPushSettings : DockerOptionsBase
{
    /// <summary>Push all tagged images in the repository.</summary>
    [Argument(Format = "--all-tags")] public bool? AllTags => Get<bool?>(() => AllTags);
    /// <summary>Skip image signing.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>NAME[:TAG]</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
}
#endregion
#region DockerNetworkCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkCreate), Arguments = "network create")]
public partial class DockerNetworkCreateSettings : DockerOptionsBase
{
    /// <summary>Enable manual container attachment.</summary>
    [Argument(Format = "--attachable")] public bool? Attachable => Get<bool?>(() => Attachable);
    /// <summary>Auxiliary IPv4 or IPv6 addresses used by Network driver.</summary>
    [Argument(Format = "--aux-address {key}:{value}")] public IReadOnlyDictionary<string, string> AuxAddress => Get<Dictionary<string, string>>(() => AuxAddress);
    /// <summary>The network from which copying the configuration.</summary>
    [Argument(Format = "--config-from {value}")] public string ConfigFrom => Get<string>(() => ConfigFrom);
    /// <summary>Create a configuration only network.</summary>
    [Argument(Format = "--config-only")] public bool? ConfigOnly => Get<bool?>(() => ConfigOnly);
    /// <summary>Driver to manage the Network.</summary>
    [Argument(Format = "--driver {value}")] public string Driver => Get<string>(() => Driver);
    /// <summary>IPv4 or IPv6 Gateway for the master subnet.</summary>
    [Argument(Format = "--gateway {value}")] public IReadOnlyList<string> Gateway => Get<List<string>>(() => Gateway);
    /// <summary>Create swarm routing-mesh network.</summary>
    [Argument(Format = "--ingress")] public bool? Ingress => Get<bool?>(() => Ingress);
    /// <summary>Restrict external access to the network.</summary>
    [Argument(Format = "--internal")] public bool? Internal => Get<bool?>(() => Internal);
    /// <summary>Allocate container ip from a sub-range.</summary>
    [Argument(Format = "--ip-range {value}")] public IReadOnlyList<string> IpRange => Get<List<string>>(() => IpRange);
    /// <summary>IP Address Management Driver.</summary>
    [Argument(Format = "--ipam-driver {value}")] public string IpamDriver => Get<string>(() => IpamDriver);
    /// <summary>Set IPAM driver specific options.</summary>
    [Argument(Format = "--ipam-opt {key}:{value}")] public IReadOnlyDictionary<string, string> IpamOpt => Get<Dictionary<string, string>>(() => IpamOpt);
    /// <summary>Enable IPv6 networking.</summary>
    [Argument(Format = "--ipv6")] public bool? Ipv6 => Get<bool?>(() => Ipv6);
    /// <summary>Set metadata on a network.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Set driver specific options.</summary>
    [Argument(Format = "--opt {key}:{value}")] public IReadOnlyDictionary<string, string> Opt => Get<Dictionary<string, string>>(() => Opt);
    /// <summary>Control the network's scope.</summary>
    [Argument(Format = "--scope {value}")] public string Scope => Get<string>(() => Scope);
    /// <summary>Subnet in CIDR format that represents a network segment.</summary>
    [Argument(Format = "--subnet {value}")] public IReadOnlyList<string> Subnet => Get<List<string>>(() => Subnet);
    /// <summary>NETWORK</summary>
    [Argument(Format = "{value}")] public string Network => Get<string>(() => Network);
}
#endregion
#region DockerVolumeLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolumeLs), Arguments = "volume ls")]
public partial class DockerVolumeLsSettings : DockerOptionsBase
{
    /// <summary>Provide filter values (e.g. 'dangling=true').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print volumes using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only display volume names.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerTrustInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustInspect), Arguments = "trust inspect")]
public partial class DockerTrustInspectSettings : DockerOptionsBase
{
    /// <summary>IMAGE[:TAG]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerNetworkInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkInspect), Arguments = "network inspect")]
public partial class DockerNetworkInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Verbose output for diagnostics.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
    /// <summary>NETWORK</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Networks => Get<List<string>>(() => Networks);
}
#endregion
#region DockerEngineActivateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerEngineActivate), Arguments = "engine activate")]
public partial class DockerEngineActivateSettings : DockerOptionsBase
{
    /// <summary>override default location of containerd endpoint.</summary>
    [Argument(Format = "--containerd {value}")] public string Containerd => Get<string>(() => Containerd);
    /// <summary>only display license information and exit.</summary>
    [Argument(Format = "--display-only")] public bool? DisplayOnly => Get<bool?>(() => DisplayOnly);
    /// <summary>Specify engine image.</summary>
    [Argument(Format = "--engine-image {value}")] public string EngineImage => Get<string>(() => EngineImage);
    /// <summary>Pretty-print licenses using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>License File.</summary>
    [Argument(Format = "--license {value}")] public string License => Get<string>(() => License);
    /// <summary>Only display available licenses by ID.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Override the default location where engine images are pulled.</summary>
    [Argument(Format = "--registry-prefix {value}")] public string RegistryPrefix => Get<string>(() => RegistryPrefix);
    /// <summary>Specify engine version (default is to use currently running version).</summary>
    [Argument(Format = "--version {value}")] public string Version => Get<string>(() => Version);
}
#endregion
#region DockerContextUseSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextUse), Arguments = "context use")]
public partial class DockerContextUseSettings : DockerOptionsBase
{
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
}
#endregion
#region DockerVolumeRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolumeRm), Arguments = "volume rm")]
public partial class DockerVolumeRmSettings : DockerOptionsBase
{
    /// <summary>Force the removal of one or more volumes.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>VOLUME</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Volumes => Get<List<string>>(() => Volumes);
}
#endregion
#region DockerManifestCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerManifestCreate), Arguments = "manifest create")]
public partial class DockerManifestCreateSettings : DockerOptionsBase
{
    /// <summary>MANIFEST_LIST</summary>
    [Argument(Format = "{value}")] public string ManifestList => Get<string>(() => ManifestList);
    /// <summary>MANIFEST</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Manifests => Get<List<string>>(() => Manifests);
}
#endregion
#region DockerManifestPushSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerManifestPush), Arguments = "manifest push")]
public partial class DockerManifestPushSettings : DockerOptionsBase
{
    /// <summary>Allow push to an insecure registry.</summary>
    [Argument(Format = "--insecure")] public bool? Insecure => Get<bool?>(() => Insecure);
    /// <summary>Remove the local manifest list after push.</summary>
    [Argument(Format = "--purge")] public bool? Purge => Get<bool?>(() => Purge);
    /// <summary>MANIFEST_LIST</summary>
    [Argument(Format = "{value}")] public string ManifestList => Get<string>(() => ManifestList);
}
#endregion
#region DockerPluginEnableSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginEnable), Arguments = "plugin enable")]
public partial class DockerPluginEnableSettings : DockerOptionsBase
{
    /// <summary>HTTP client timeout (in seconds).</summary>
    [Argument(Format = "--timeout {value}")] public int? Timeout => Get<int?>(() => Timeout);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
}
#endregion
#region DockerImportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImport), Arguments = "import")]
public partial class DockerImportSettings : DockerOptionsBase
{
    /// <summary>Apply Dockerfile instruction to the created image.</summary>
    [Argument(Format = "--change {value}")] public IReadOnlyList<string> Change => Get<List<string>>(() => Change);
    /// <summary>Set commit message for imported image.</summary>
    [Argument(Format = "--message {value}")] public string Message => Get<string>(() => Message);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>file|URL|-</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerContainerRunSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerRun), Arguments = "container run")]
public partial class DockerContainerRunSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Attach to STDIN, STDOUT or STDERR.</summary>
    [Argument(Format = "--attach {value}")] public IReadOnlyList<string> Attach => Get<List<string>>(() => Attach);
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Block IO weight (relative device weight).</summary>
    [Argument(Format = "--blkio-weight-device {value}")] public IReadOnlyList<string> BlkioWeightDevice => Get<List<string>>(() => BlkioWeightDevice);
    /// <summary>Add Linux capabilities.</summary>
    [Argument(Format = "--cap-add {value}")] public IReadOnlyList<string> CapAdd => Get<List<string>>(() => CapAdd);
    /// <summary>Drop Linux capabilities.</summary>
    [Argument(Format = "--cap-drop {value}")] public IReadOnlyList<string> CapDrop => Get<List<string>>(() => CapDrop);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Write the container ID to the file.</summary>
    [Argument(Format = "--cidfile {value}")] public string Cidfile => Get<string>(() => Cidfile);
    /// <summary>CPU count (Windows only).</summary>
    [Argument(Format = "--cpu-count {value}")] public long? CpuCount => Get<long?>(() => CpuCount);
    /// <summary>CPU percent (Windows only).</summary>
    [Argument(Format = "--cpu-percent {value}")] public long? CpuPercent => Get<long?>(() => CpuPercent);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Run container in background and print container ID.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Add a host device to the container.</summary>
    [Argument(Format = "--device {value}")] public IReadOnlyList<string> Device => Get<List<string>>(() => Device);
    /// <summary>Add a rule to the cgroup allowed devices list.</summary>
    [Argument(Format = "--device-cgroup-rule {value}")] public IReadOnlyList<string> DeviceCgroupRule => Get<List<string>>(() => DeviceCgroupRule);
    /// <summary>Limit read rate (bytes per second) from a device.</summary>
    [Argument(Format = "--device-read-bps {value}")] public IReadOnlyList<string> DeviceReadBps => Get<List<string>>(() => DeviceReadBps);
    /// <summary>Limit read rate (IO per second) from a device.</summary>
    [Argument(Format = "--device-read-iops {value}")] public IReadOnlyList<string> DeviceReadIops => Get<List<string>>(() => DeviceReadIops);
    /// <summary>Limit write rate (bytes per second) to a device.</summary>
    [Argument(Format = "--device-write-bps {value}")] public IReadOnlyList<string> DeviceWriteBps => Get<List<string>>(() => DeviceWriteBps);
    /// <summary>Limit write rate (IO per second) to a device.</summary>
    [Argument(Format = "--device-write-iops {value}")] public IReadOnlyList<string> DeviceWriteIops => Get<List<string>>(() => DeviceWriteIops);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set custom DNS servers.</summary>
    [Argument(Format = "--dns {value}")] public IReadOnlyList<string> Dns => Get<List<string>>(() => Dns);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-opt {value}")] public IReadOnlyList<string> DnsOpt => Get<List<string>>(() => DnsOpt);
    /// <summary>Set DNS options.</summary>
    [Argument(Format = "--dns-option {value}")] public IReadOnlyList<string> DnsOption => Get<List<string>>(() => DnsOption);
    /// <summary>Set custom DNS search domains.</summary>
    [Argument(Format = "--dns-search {value}")] public IReadOnlyList<string> DnsSearch => Get<List<string>>(() => DnsSearch);
    /// <summary>Container NIS domain name.</summary>
    [Argument(Format = "--domainname {value}")] public string Domainname => Get<string>(() => Domainname);
    /// <summary>Overwrite the default ENTRYPOINT of the image.</summary>
    [Argument(Format = "--entrypoint {value}")] public string Entrypoint => Get<string>(() => Entrypoint);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Read in a file of environment variables.</summary>
    [Argument(Format = "--env-file {value}")] public IReadOnlyList<string> EnvFile => Get<List<string>>(() => EnvFile);
    /// <summary>Expose a port or a range of ports.</summary>
    [Argument(Format = "--expose {value}")] public IReadOnlyList<string> Expose => Get<List<string>>(() => Expose);
    /// <summary>GPU devices to add to the container ('all' to pass all GPUs).</summary>
    [Argument(Format = "--gpus {value}")] public string Gpus => Get<string>(() => Gpus);
    /// <summary>Add additional groups to join.</summary>
    [Argument(Format = "--group-add {value}")] public IReadOnlyList<string> GroupAdd => Get<List<string>>(() => GroupAdd);
    /// <summary>Command to run to check health.</summary>
    [Argument(Format = "--health-cmd {value}")] public string HealthCmd => Get<string>(() => HealthCmd);
    /// <summary>Time between running the check (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-interval {value}")] public string HealthInterval => Get<string>(() => HealthInterval);
    /// <summary>Consecutive failures needed to report unhealthy.</summary>
    [Argument(Format = "--health-retries {value}")] public int? HealthRetries => Get<int?>(() => HealthRetries);
    /// <summary>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-start-period {value}")] public string HealthStartPeriod => Get<string>(() => HealthStartPeriod);
    /// <summary>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</summary>
    [Argument(Format = "--health-timeout {value}")] public string HealthTimeout => Get<string>(() => HealthTimeout);
    /// <summary>Print usage.</summary>
    [Argument(Format = "--help")] public bool? Help => Get<bool?>(() => Help);
    /// <summary>Container host name.</summary>
    [Argument(Format = "--hostname {value}")] public string Hostname => Get<string>(() => Hostname);
    /// <summary>Run an init inside the container that forwards signals and reaps processes.</summary>
    [Argument(Format = "--init")] public bool? Init => Get<bool?>(() => Init);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Maximum IO bandwidth limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxbandwidth {value}")] public long? IoMaxbandwidth => Get<long?>(() => IoMaxbandwidth);
    /// <summary>Maximum IOps limit for the system drive (Windows only).</summary>
    [Argument(Format = "--io-maxiops {value}")] public int? IoMaxiops => Get<int?>(() => IoMaxiops);
    /// <summary>IPv4 address (e.g., 172.30.100.104).</summary>
    [Argument(Format = "--ip {value}")] public string Ip => Get<string>(() => Ip);
    /// <summary>IPv6 address (e.g., 2001:db8::33).</summary>
    [Argument(Format = "--ip6 {value}")] public string Ip6 => Get<string>(() => Ip6);
    /// <summary>IPC mode to use.</summary>
    [Argument(Format = "--ipc {value}")] public string Ipc => Get<string>(() => Ipc);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Set meta data on a container.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Read in a line delimited file of labels.</summary>
    [Argument(Format = "--label-file {value}")] public IReadOnlyList<string> LabelFile => Get<List<string>>(() => LabelFile);
    /// <summary>Add link to another container.</summary>
    [Argument(Format = "--link {value}")] public IReadOnlyList<string> Link => Get<List<string>>(() => Link);
    /// <summary>Container IPv4/IPv6 link-local addresses.</summary>
    [Argument(Format = "--link-local-ip {value}")] public IReadOnlyList<string> LinkLocalIp => Get<List<string>>(() => LinkLocalIp);
    /// <summary>Logging driver for the container.</summary>
    [Argument(Format = "--log-driver {value}")] public string LogDriver => Get<string>(() => LogDriver);
    /// <summary>Log driver options.</summary>
    [Argument(Format = "--log-opt {value}")] public IReadOnlyList<string> LogOpt => Get<List<string>>(() => LogOpt);
    /// <summary>Container MAC address (e.g., 92:d0:c6:0a:29:33).</summary>
    [Argument(Format = "--mac-address {value}")] public string MacAddress => Get<string>(() => MacAddress);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container memory swappiness (0 to 100).</summary>
    [Argument(Format = "--memory-swappiness {value}")] public long? MemorySwappiness => Get<long?>(() => MemorySwappiness);
    /// <summary>Attach a filesystem mount to the container.</summary>
    [Argument(Format = "--mount {value}")] public string Mount => Get<string>(() => Mount);
    /// <summary>Assign a name to the container.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--net {value}")] public string Net => Get<string>(() => Net);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--net-alias {value}")] public IReadOnlyList<string> NetAlias => Get<List<string>>(() => NetAlias);
    /// <summary>Connect a container to a network.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Add network-scoped alias for the container.</summary>
    [Argument(Format = "--network-alias {value}")] public IReadOnlyList<string> NetworkAlias => Get<List<string>>(() => NetworkAlias);
    /// <summary>Disable any container-specified HEALTHCHECK.</summary>
    [Argument(Format = "--no-healthcheck")] public bool? NoHealthcheck => Get<bool?>(() => NoHealthcheck);
    /// <summary>Disable OOM Killer.</summary>
    [Argument(Format = "--oom-kill-disable")] public bool? OomKillDisable => Get<bool?>(() => OomKillDisable);
    /// <summary>Tune host's OOM preferences (-1000 to 1000).</summary>
    [Argument(Format = "--oom-score-adj {value}")] public int? OomScoreAdj => Get<int?>(() => OomScoreAdj);
    /// <summary>PID namespace to use.</summary>
    [Argument(Format = "--pid {value}")] public string Pid => Get<string>(() => Pid);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Give extended privileges to this container.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Publish a container's port(s) to the host.</summary>
    [Argument(Format = "--publish {value}")] public IReadOnlyList<string> Publish => Get<List<string>>(() => Publish);
    /// <summary>Publish all exposed ports to random ports.</summary>
    [Argument(Format = "--publish-all")] public bool? PublishAll => Get<bool?>(() => PublishAll);
    /// <summary>Mount the container's root filesystem as read only.</summary>
    [Argument(Format = "--read-only")] public bool? ReadOnly => Get<bool?>(() => ReadOnly);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>Automatically remove the container when it exits.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Runtime to use for this container.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Security Options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Proxy received signals to the process.</summary>
    [Argument(Format = "--sig-proxy")] public bool? SigProxy => Get<bool?>(() => SigProxy);
    /// <summary>Signal to stop a container.</summary>
    [Argument(Format = "--stop-signal {value}")] public string StopSignal => Get<string>(() => StopSignal);
    /// <summary>Timeout (in seconds) to stop a container.</summary>
    [Argument(Format = "--stop-timeout {value}")] public int? StopTimeout => Get<int?>(() => StopTimeout);
    /// <summary>Storage driver options for the container.</summary>
    [Argument(Format = "--storage-opt {value}")] public IReadOnlyList<string> StorageOpt => Get<List<string>>(() => StorageOpt);
    /// <summary>Sysctl options.</summary>
    [Argument(Format = "--sysctl {key}:{value}")] public IReadOnlyDictionary<string, string> Sysctl => Get<Dictionary<string, string>>(() => Sysctl);
    /// <summary>Mount a tmpfs directory.</summary>
    [Argument(Format = "--tmpfs {value}")] public IReadOnlyList<string> Tmpfs => Get<List<string>>(() => Tmpfs);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>User namespace to use.</summary>
    [Argument(Format = "--userns {value}")] public string Userns => Get<string>(() => Userns);
    /// <summary>UTS namespace to use.</summary>
    [Argument(Format = "--uts {value}")] public string Uts => Get<string>(() => Uts);
    /// <summary>Bind mount a volume.</summary>
    [Argument(Format = "--volume {value}")] public IReadOnlyList<string> Volume => Get<List<string>>(() => Volume);
    /// <summary>Optional volume driver for the container.</summary>
    [Argument(Format = "--volume-driver {value}")] public string VolumeDriver => Get<string>(() => VolumeDriver);
    /// <summary>Mount volumes from the specified container(s).</summary>
    [Argument(Format = "--volumes-from {value}")] public IReadOnlyList<string> VolumesFrom => Get<List<string>>(() => VolumesFrom);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
    /// <summary>[COMMAND]</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerNodeInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodeInspect), Arguments = "node inspect")]
public partial class DockerNodeInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print the information in a human friendly format.</summary>
    [Argument(Format = "--pretty")] public bool? Pretty => Get<bool?>(() => Pretty);
    /// <summary>self|NODE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Selves => Get<List<string>>(() => Selves);
}
#endregion
#region DockerSaveSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSave), Arguments = "save")]
public partial class DockerSaveSettings : DockerOptionsBase
{
    /// <summary>Write to a file, instead of STDOUT.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerContainerStatsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerStats), Arguments = "container stats")]
public partial class DockerContainerStatsSettings : DockerOptionsBase
{
    /// <summary>Show all containers (default shows just running).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Disable streaming stats and only pull the first result.</summary>
    [Argument(Format = "--no-stream")] public bool? NoStream => Get<bool?>(() => NoStream);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>[CONTAINER...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContainerExecSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerExec), Arguments = "container exec")]
public partial class DockerContainerExecSettings : DockerOptionsBase
{
    /// <summary>Detached mode: run command in the background.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Give extended privileges to the command.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>COMMAND</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerNodeLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodeLs), Arguments = "node ls")]
public partial class DockerNodeLsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print nodes using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Only display IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerSwarmJoinSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarmJoin), Arguments = "swarm join HOST:PORT")]
public partial class DockerSwarmJoinSettings : DockerOptionsBase
{
    /// <summary>Advertised address (format: &lt;ip|interface&gt;[:port]).</summary>
    [Argument(Format = "--advertise-addr {value}")] public string AdvertiseAddr => Get<string>(() => AdvertiseAddr);
    /// <summary>Availability of the node ("active"|"pause"|"drain").</summary>
    [Argument(Format = "--availability {value}")] public DockerAvailability Availability => Get<DockerAvailability>(() => Availability);
    /// <summary>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</summary>
    [Argument(Format = "--data-path-addr {value}")] public string DataPathAddr => Get<string>(() => DataPathAddr);
    /// <summary>Listen address (format: &lt;ip|interface&gt;[:port]).</summary>
    [Argument(Format = "--listen-addr {value}")] public string ListenAddr => Get<string>(() => ListenAddr);
    /// <summary>Token for entry into the swarm.</summary>
    [Argument(Format = "--token {value}")] public string Token => Get<string>(() => Token);
}
#endregion
#region DockerContainerLogsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerLogs), Arguments = "container logs")]
public partial class DockerContainerLogsSettings : DockerOptionsBase
{
    /// <summary>Show extra details provided to logs.</summary>
    [Argument(Format = "--details")] public bool? Details => Get<bool?>(() => Details);
    /// <summary>Follow log output.</summary>
    [Argument(Format = "--follow")] public bool? Follow => Get<bool?>(() => Follow);
    /// <summary>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</summary>
    [Argument(Format = "--since {value}")] public string Since => Get<string>(() => Since);
    /// <summary>Number of lines to show from the end of the logs.</summary>
    [Argument(Format = "--tail {value}")] public string Tail => Get<string>(() => Tail);
    /// <summary>Show timestamps.</summary>
    [Argument(Format = "--timestamps")] public bool? Timestamps => Get<bool?>(() => Timestamps);
    /// <summary>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</summary>
    [Argument(Format = "--until {value}")] public string Until => Get<string>(() => Until);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerCheckpointLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCheckpointLs), Arguments = "checkpoint ls")]
public partial class DockerCheckpointLsSettings : DockerOptionsBase
{
    /// <summary>Use a custom checkpoint storage directory.</summary>
    [Argument(Format = "--checkpoint-dir {value}")] public string CheckpointDir => Get<string>(() => CheckpointDir);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerContainerKillSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerKill), Arguments = "container kill")]
public partial class DockerContainerKillSettings : DockerOptionsBase
{
    /// <summary>Signal to send to the container.</summary>
    [Argument(Format = "--signal {value}")] public string Signal => Get<string>(() => Signal);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerPluginInstallSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginInstall), Arguments = "plugin install")]
public partial class DockerPluginInstallSettings : DockerOptionsBase
{
    /// <summary>Local name for plugin.</summary>
    [Argument(Format = "--alias {value}")] public string Alias => Get<string>(() => Alias);
    /// <summary>Do not enable the plugin on install.</summary>
    [Argument(Format = "--disable")] public bool? Disable => Get<bool?>(() => Disable);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Grant all permissions necessary to run the plugin.</summary>
    [Argument(Format = "--grant-all-permissions")] public bool? GrantAllPermissions => Get<bool?>(() => GrantAllPermissions);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
    /// <summary>[KEY=VALUE...]</summary>
    [Argument(Format = "{key}={value}")] public IReadOnlyDictionary<string, string> KeyValues => Get<Dictionary<string, string>>(() => KeyValues);
}
#endregion
#region DockerImagePruneSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImagePrune), Arguments = "image prune")]
public partial class DockerImagePruneSettings : DockerOptionsBase
{
    /// <summary>Remove all unused images, not just dangling ones.</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Do not prompt for confirmation.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
}
#endregion
#region DockerImageImportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageImport), Arguments = "image import")]
public partial class DockerImageImportSettings : DockerOptionsBase
{
    /// <summary>Apply Dockerfile instruction to the created image.</summary>
    [Argument(Format = "--change {value}")] public IReadOnlyList<string> Change => Get<List<string>>(() => Change);
    /// <summary>Set commit message for imported image.</summary>
    [Argument(Format = "--message {value}")] public string Message => Get<string>(() => Message);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>file|URL|-</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerDiffSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerDiff), Arguments = "diff")]
public partial class DockerDiffSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerUnpauseSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerUnpause), Arguments = "unpause")]
public partial class DockerUnpauseSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContainerLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerLs), Arguments = "container ls")]
public partial class DockerContainerLsSettings : DockerOptionsBase
{
    /// <summary>Show all containers (default shows just running).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print containers using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Show n last created containers (includes all states).</summary>
    [Argument(Format = "--last {value}")] public int? Last => Get<int?>(() => Last);
    /// <summary>Show the latest created container (includes all states).</summary>
    [Argument(Format = "--latest")] public bool? Latest => Get<bool?>(() => Latest);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Display total file sizes.</summary>
    [Argument(Format = "--size")] public bool? Size => Get<bool?>(() => Size);
}
#endregion
#region DockerNodePsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodePs), Arguments = "node ps")]
public partial class DockerNodePsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print tasks using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Do not map IDs to Names.</summary>
    [Argument(Format = "--no-resolve")] public bool? NoResolve => Get<bool?>(() => NoResolve);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display task IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>[NODE...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Nodes => Get<List<string>>(() => Nodes);
}
#endregion
#region DockerContainerTopSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerTop), Arguments = "container top [ps")]
public partial class DockerContainerTopSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>OPTIONS]</summary>
    [Argument(Format = "{value}")] public string Options => Get<string>(() => Options);
}
#endregion
#region DockerContainerRenameSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerRename), Arguments = "container rename")]
public partial class DockerContainerRenameSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>NEW_NAME</summary>
    [Argument(Format = "{value}")] public string NewName => Get<string>(() => NewName);
}
#endregion
#region DockerImageHistorySettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageHistory), Arguments = "image history")]
public partial class DockerImageHistorySettings : DockerOptionsBase
{
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Print sizes and dates in human readable format.</summary>
    [Argument(Format = "--human")] public bool? Human => Get<bool?>(() => Human);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only show numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}")] public string Image => Get<string>(() => Image);
}
#endregion
#region DockerPsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPs), Arguments = "ps")]
public partial class DockerPsSettings : DockerOptionsBase
{
    /// <summary>Show all containers (default shows just running).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print containers using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Show n last created containers (includes all states).</summary>
    [Argument(Format = "--last {value}")] public int? Last => Get<int?>(() => Last);
    /// <summary>Show the latest created container (includes all states).</summary>
    [Argument(Format = "--latest")] public bool? Latest => Get<bool?>(() => Latest);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only display numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Display total file sizes.</summary>
    [Argument(Format = "--size")] public bool? Size => Get<bool?>(() => Size);
}
#endregion
#region DockerImageTagSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageTag), Arguments = "image tag")]
public partial class DockerImageTagSettings : DockerOptionsBase
{
    /// <summary>SOURCE_IMAGE[:TAG]</summary>
    [Argument(Format = "{value}")] public string SourceImage => Get<string>(() => SourceImage);
    /// <summary>TARGET_IMAGE[:TAG]</summary>
    [Argument(Format = "{value}")] public string TargetImage => Get<string>(() => TargetImage);
}
#endregion
#region DockerExportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerExport), Arguments = "export")]
public partial class DockerExportSettings : DockerOptionsBase
{
    /// <summary>Write to a file, instead of STDOUT.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerNetworkDisconnectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetworkDisconnect), Arguments = "network disconnect")]
public partial class DockerNetworkDisconnectSettings : DockerOptionsBase
{
    /// <summary>Force the container to disconnect from a network.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>NETWORK</summary>
    [Argument(Format = "{value}")] public string Network => Get<string>(() => Network);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerBuilderBuildSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuilderBuild), Arguments = "builder build")]
public partial class DockerBuilderBuildSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Set build-time variables.</summary>
    [Argument(Format = "--build-arg {value}")] public IReadOnlyList<string> BuildArg => Get<List<string>>(() => BuildArg);
    /// <summary>Images to consider as cache sources.</summary>
    [Argument(Format = "--cache-from {value}")] public IReadOnlyList<string> CacheFrom => Get<List<string>>(() => CacheFrom);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Compress the build context using gzip.</summary>
    [Argument(Format = "--compress")] public bool? Compress => Get<bool?>(() => Compress);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Name of the Dockerfile (Default is 'PATH/Dockerfile').</summary>
    [Argument(Format = "--file {value}")] public string File => Get<string>(() => File);
    /// <summary>Always remove intermediate containers.</summary>
    [Argument(Format = "--force-rm")] public bool? ForceRm => Get<bool?>(() => ForceRm);
    /// <summary>Write the image ID to the file.</summary>
    [Argument(Format = "--iidfile {value}")] public string Iidfile => Get<string>(() => Iidfile);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Set metadata for an image.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Set the networking mode for the RUN instructions during build.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Do not use cache when building the image.</summary>
    [Argument(Format = "--no-cache")] public bool? NoCache => Get<bool?>(() => NoCache);
    /// <summary>Output destination (format: type=local,dest=path).</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Set type of progress output (auto, plain, tty). Use plain to show container output.</summary>
    [Argument(Format = "--progress {value}")] public string Progress => Get<string>(() => Progress);
    /// <summary>Always attempt to pull a newer version of the image.</summary>
    [Argument(Format = "--pull")] public bool? Pull => Get<bool?>(() => Pull);
    /// <summary>Suppress the build output and print image ID on success.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Remove intermediate containers after a successful build.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</summary>
    [Argument(Format = "--secret {value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Security options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Squash newly built layers into a single new layer.</summary>
    [Argument(Format = "--squash")] public bool? Squash => Get<bool?>(() => Squash);
    /// <summary>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</summary>
    [Argument(Format = "--ssh {value}")] public string Ssh => Get<string>(() => Ssh);
    /// <summary>Stream attaches to server to negotiate build context.</summary>
    [Argument(Format = "--stream")] public bool? Stream => Get<bool?>(() => Stream);
    /// <summary>Name and optionally a tag in the 'name:tag' format.</summary>
    [Argument(Format = "--tag {value}")] public IReadOnlyList<string> Tag => Get<List<string>>(() => Tag);
    /// <summary>Set the target build stage to build.</summary>
    [Argument(Format = "--target {value}")] public string Target => Get<string>(() => Target);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Path or url where the build context is located.</summary>
    [Argument(Format = "{value}")] public string Path => Get<string>(() => Path);
}
#endregion
#region DockerBuildxBuildSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuildxBuild), Arguments = "buildx build")]
public partial class DockerBuildxBuildSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping <c>host:ip</c>.</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Allow extra privileged entitlement, e.g. <c>network.host</c>, <c>security.insecure</c>.</summary>
    [Argument(Format = "--allow  {value}")] public IReadOnlyList<string> Allow => Get<List<string>>(() => Allow);
    /// <summary>Set build-time variables.</summary>
    [Argument(Format = "--build-arg {value}")] public IReadOnlyList<string> BuildArg => Get<List<string>>(() => BuildArg);
    /// <summary>Override the configured builder instance.</summary>
    [Argument(Format = "--builder {value}")] public string Builder => Get<string>(() => Builder);
    /// <summary>External cache sources (eg. <c>user/app:cache, type=local,src=path/to/dir</c>).</summary>
    [Argument(Format = "--cache-from {value}")] public IReadOnlyList<string> CacheFrom => Get<List<string>>(() => CacheFrom);
    /// <summary>Cache export destinations (eg. <c>user/app:cache, type=local,dest=path/to/dir</c>)</summary>
    [Argument(Format = "--cache-to {value}")] public IReadOnlyList<string> CacheTo => Get<List<string>>(() => CacheTo);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Compress the build context using gzip.</summary>
    [Argument(Format = "--compress")] public bool? Compress => Get<bool?>(() => Compress);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>CPUs in which to allow execution (<c>0-3</c>, <c>0,1</c>).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (<c>0-3</c>, <c>0,1</c>).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Name of the Dockerfile (Default is <c>PATH/Dockerfile</c>).</summary>
    [Argument(Format = "--file {value}")] public string File => Get<string>(() => File);
    /// <summary>Write the image ID to the file.</summary>
    [Argument(Format = "--iidfile {value}")] public string Iidfile => Get<string>(() => Iidfile);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Set metadata for an image.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Shorthand for <c>--output=type=docker</c></summary>
    [Argument(Format = "--load")] public bool? Load => Get<bool?>(() => Load);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Swap limit equal to memory plus swap: <c>-1</c> to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Set the networking mode for the <c>RUN</c> instructions during build.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Do not use cache when building the image.</summary>
    [Argument(Format = "--no-cache")] public bool? NoCache => Get<bool?>(() => NoCache);
    /// <summary>Output destination (format: <c>type=local,dest=path</c>).</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Set type of progress output (<c>auto</c>, <c>plain</c>, <c>tty</c>). Use plain to show container output.</summary>
    [Argument(Format = "--progress {value}")] public DockerProgressType Progress => Get<DockerProgressType>(() => Progress);
    /// <summary>Always attempt to pull a newer version of the image.</summary>
    [Argument(Format = "--pull")] public bool? Pull => Get<bool?>(() => Pull);
    /// <summary>Shorthand for <c>--output=type=registry</c></summary>
    [Argument(Format = "--push")] public bool? Push => Get<bool?>(() => Push);
    /// <summary>Suppress the build output and print image ID on success.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Remove intermediate containers after a successful build.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Secret file to expose to the build (only if BuildKit enabled): <c>id=mysecret,src=/local/secret</c>.</summary>
    [Argument(Format = "--secret {value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Security options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of <c>/dev/shm</c>.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</summary>
    [Argument(Format = "--ssh {value}")] public string Ssh => Get<string>(() => Ssh);
    /// <summary>Name and optionally a tag in the <c>name:tag</c> format.</summary>
    [Argument(Format = "--tag {value}")] public IReadOnlyList<string> Tag => Get<List<string>>(() => Tag);
    /// <summary>Set the target build stage to build.</summary>
    [Argument(Format = "--target {value}")] public string Target => Get<string>(() => Target);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Path or url where the build context is located.</summary>
    [Argument(Format = "{value}")] public string Path => Get<string>(() => Path);
}
#endregion
#region DockerBuildxCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuildxCreate), Arguments = "buildx create")]
public partial class DockerBuildxCreateSettings : DockerOptionsBase
{
    /// <summary>Append a node to builder instead of changing it.</summary>
    [Argument(Format = "--append")] public bool? Append => Get<bool?>(() => Append);
    /// <summary>Boot builder after creation.</summary>
    [Argument(Format = "--bootstrap")] public bool? Bootstrap => Get<bool?>(() => Bootstrap);
    /// <summary>Flags for buildkitd daemon.</summary>
    [Argument(Format = "--buildkitd-flags {value}")] public string BuildKitDaemonFlags => Get<string>(() => BuildKitDaemonFlags);
    /// <summary>Flags for buildkitd daemon.</summary>
    [Argument(Format = "--buildkitd-flags {value}")] public string BuildKitDFlags => Get<string>(() => BuildKitDFlags);
    /// <summary>BuildKit config file.</summary>
    [Argument(Format = "--config {value}")] public string Config => Get<string>(() => Config);
    /// <summary>Driver to use (available: <c>docker-container</c>, <c>kubernetes</c>, <c>remote</c>).</summary>
    [Argument(Format = "--driver {value}")] public DockerDriverType Driver => Get<DockerDriverType>(() => Driver);
    /// <summary>Options for the driver.</summary>
    [Argument(Format = "--driver-opt {value}")] public string DriverOpt => Get<string>(() => DriverOpt);
    /// <summary>Remove a node from builder instead of changing it.</summary>
    [Argument(Format = "--leave")] public bool? Leave => Get<bool?>(() => Leave);
    /// <summary>Builder instance name.</summary>
    [Argument(Format = "--name {value}")] public string Name => Get<string>(() => Name);
    /// <summary>Create/modify node with given name.</summary>
    [Argument(Format = "--node {value}")] public string Node => Get<string>(() => Node);
    /// <summary>Fixed platforms for current node.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Set the current builder instance.</summary>
    [Argument(Format = "--use")] public bool? Use => Get<bool?>(() => Use);
}
#endregion
#region DockerStatsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStats), Arguments = "stats")]
public partial class DockerStatsSettings : DockerOptionsBase
{
    /// <summary>Show all containers (default shows just running).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Disable streaming stats and only pull the first result.</summary>
    [Argument(Format = "--no-stream")] public bool? NoStream => Get<bool?>(() => NoStream);
    /// <summary>Do not truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>[CONTAINER...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerSearchSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSearch), Arguments = "search")]
public partial class DockerSearchSettings : DockerOptionsBase
{
    /// <summary>Only show automated builds.</summary>
    [Argument(Format = "--automated")] public bool? Automated => Get<bool?>(() => Automated);
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print search using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Max number of search results.</summary>
    [Argument(Format = "--limit {value}")] public int? Limit => Get<int?>(() => Limit);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only displays with at least x stars.</summary>
    [Argument(Format = "--stars {value}")] public int? Stars => Get<int?>(() => Stars);
    /// <summary>TERM</summary>
    [Argument(Format = "{value}")] public string Term => Get<string>(() => Term);
}
#endregion
#region DockerManifestSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerManifest), Arguments = "manifest")]
public partial class DockerManifestSettings : DockerOptionsBase
{
    /// <summary>COMMAND</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
}
#endregion
#region DockerPluginPushSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginPush), Arguments = "plugin push")]
public partial class DockerPluginPushSettings : DockerOptionsBase
{
    /// <summary>Skip image signing.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>PLUGIN[:TAG]</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
}
#endregion
#region DockerImageLoadSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageLoad), Arguments = "image load")]
public partial class DockerImageLoadSettings : DockerOptionsBase
{
    /// <summary>Read from tar archive file, instead of STDIN.</summary>
    [Argument(Format = "--input {value}")] public string Input => Get<string>(() => Input);
    /// <summary>Suppress the load output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
}
#endregion
#region DockerSwarmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSwarm), Arguments = "swarm")]
public partial class DockerSwarmSettings : DockerOptionsBase
{
}
#endregion
#region DockerContainerRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerRm), Arguments = "container rm")]
public partial class DockerContainerRmSettings : DockerOptionsBase
{
    /// <summary>Force the removal of a running container (uses SIGKILL).</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Remove the specified link.</summary>
    [Argument(Format = "--link")] public bool? Link => Get<bool?>(() => Link);
    /// <summary>Remove the volumes associated with the container.</summary>
    [Argument(Format = "--volumes")] public bool? Volumes => Get<bool?>(() => Volumes);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContainerUpdateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerUpdate), Arguments = "container update")]
public partial class DockerContainerUpdateSettings : DockerOptionsBase
{
    /// <summary>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</summary>
    [Argument(Format = "--blkio-weight {value}")] public int? BlkioWeight => Get<int?>(() => BlkioWeight);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>Limit the CPU real-time period in microseconds.</summary>
    [Argument(Format = "--cpu-rt-period {value}")] public long? CpuRtPeriod => Get<long?>(() => CpuRtPeriod);
    /// <summary>Limit the CPU real-time runtime in microseconds.</summary>
    [Argument(Format = "--cpu-rt-runtime {value}")] public long? CpuRtRuntime => Get<long?>(() => CpuRtRuntime);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>Number of CPUs.</summary>
    [Argument(Format = "--cpus {value}")] public decimal? Cpus => Get<decimal?>(() => Cpus);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Kernel memory limit.</summary>
    [Argument(Format = "--kernel-memory {value}")] public long? KernelMemory => Get<long?>(() => KernelMemory);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Memory soft limit.</summary>
    [Argument(Format = "--memory-reservation {value}")] public long? MemoryReservation => Get<long?>(() => MemoryReservation);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Tune container pids limit (set -1 for unlimited).</summary>
    [Argument(Format = "--pids-limit {value}")] public long? PidsLimit => Get<long?>(() => PidsLimit);
    /// <summary>Restart policy to apply when a container exits.</summary>
    [Argument(Format = "--restart {value}")] public string Restart => Get<string>(() => Restart);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerPluginSetSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginSet), Arguments = "plugin set")]
public partial class DockerPluginSetSettings : DockerOptionsBase
{
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}")] public string Plugin => Get<string>(() => Plugin);
    /// <summary>KEY=VALUE</summary>
    [Argument(Format = "{key}={value}")] public IReadOnlyDictionary<string, string> KeyValues => Get<Dictionary<string, string>>(() => KeyValues);
}
#endregion
#region DockerWaitSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerWait), Arguments = "wait")]
public partial class DockerWaitSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerContextExportSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextExport), Arguments = "context export")]
public partial class DockerContextExportSettings : DockerOptionsBase
{
    /// <summary>Export as a kubeconfig file.</summary>
    [Argument(Format = "--kubeconfig")] public bool? Kubeconfig => Get<bool?>(() => Kubeconfig);
    /// <summary>CONTEXT</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
    /// <summary>[FILE|-]</summary>
    [Argument(Format = "{value}")] public string File => Get<string>(() => File);
}
#endregion
#region DockerManifestAnnotateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerManifestAnnotate), Arguments = "manifest annotate")]
public partial class DockerManifestAnnotateSettings : DockerOptionsBase
{
    /// <summary>Set architecture.</summary>
    [Argument(Format = "--arch {value}")] public string Arch => Get<string>(() => Arch);
    /// <summary>Set operating system.</summary>
    [Argument(Format = "--os {value}")] public string Os => Get<string>(() => Os);
    /// <summary>Set operating system feature.</summary>
    [Argument(Format = "--os-features {value}")] public IReadOnlyList<string> OsFeatures => Get<List<string>>(() => OsFeatures);
    /// <summary>Set architecture variant.</summary>
    [Argument(Format = "--variant {value}")] public string Variant => Get<string>(() => Variant);
    /// <summary>MANIFEST_LIST</summary>
    [Argument(Format = "{value}")] public string ManifestList => Get<string>(() => ManifestList);
    /// <summary>MANIFEST</summary>
    [Argument(Format = "{value}")] public string Manifest => Get<string>(() => Manifest);
}
#endregion
#region DockerImagePullSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImagePull), Arguments = "image pull")]
public partial class DockerImagePullSettings : DockerOptionsBase
{
    /// <summary>Download all tagged images in the repository.</summary>
    [Argument(Format = "--all-tags")] public bool? AllTags => Get<bool?>(() => AllTags);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Suppress verbose output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>NAME[:TAG|@DIGEST]</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
}
#endregion
#region DockerEventsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerEvents), Arguments = "events")]
public partial class DockerEventsSettings : DockerOptionsBase
{
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Show all events created since timestamp.</summary>
    [Argument(Format = "--since {value}")] public string Since => Get<string>(() => Since);
    /// <summary>Stream events until this timestamp.</summary>
    [Argument(Format = "--until {value}")] public string Until => Get<string>(() => Until);
}
#endregion
#region DockerStackLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStackLs), Arguments = "stack ls")]
public partial class DockerStackLsSettings : DockerStackSettings
{
    /// <summary>List stacks from all Kubernetes namespaces.</summary>
    [Argument(Format = "--all-namespaces")] public bool? AllNamespaces => Get<bool?>(() => AllNamespaces);
    /// <summary>Pretty-print stacks using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Kubernetes namespaces to use.</summary>
    [Argument(Format = "--namespace {value}")] public IReadOnlyList<string> Namespace => Get<List<string>>(() => Namespace);
}
#endregion
#region DockerContainerInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerInspect), Arguments = "container inspect")]
public partial class DockerContainerInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Display total file sizes.</summary>
    [Argument(Format = "--size")] public bool? Size => Get<bool?>(() => Size);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerKillSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerKill), Arguments = "kill")]
public partial class DockerKillSettings : DockerOptionsBase
{
    /// <summary>Signal to send to the container.</summary>
    [Argument(Format = "--signal {value}")] public string Signal => Get<string>(() => Signal);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerCheckpointCreateSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerCheckpointCreate), Arguments = "checkpoint create")]
public partial class DockerCheckpointCreateSettings : DockerOptionsBase
{
    /// <summary>Use a custom checkpoint storage directory.</summary>
    [Argument(Format = "--checkpoint-dir {value}")] public string CheckpointDir => Get<string>(() => CheckpointDir);
    /// <summary>Leave the container running after checkpoint.</summary>
    [Argument(Format = "--leave-running")] public bool? LeaveRunning => Get<bool?>(() => LeaveRunning);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>CHECKPOINT</summary>
    [Argument(Format = "{value}")] public string Checkpoint => Get<string>(() => Checkpoint);
}
#endregion
#region DockerPauseSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPause), Arguments = "pause")]
public partial class DockerPauseSettings : DockerOptionsBase
{
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerLogsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerLogs), Arguments = "logs")]
public partial class DockerLogsSettings : DockerOptionsBase
{
    /// <summary>Show extra details provided to logs.</summary>
    [Argument(Format = "--details")] public bool? Details => Get<bool?>(() => Details);
    /// <summary>Follow log output.</summary>
    [Argument(Format = "--follow")] public bool? Follow => Get<bool?>(() => Follow);
    /// <summary>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</summary>
    [Argument(Format = "--since {value}")] public string Since => Get<string>(() => Since);
    /// <summary>Number of lines to show from the end of the logs.</summary>
    [Argument(Format = "--tail {value}")] public string Tail => Get<string>(() => Tail);
    /// <summary>Show timestamps.</summary>
    [Argument(Format = "--timestamps")] public bool? Timestamps => Get<bool?>(() => Timestamps);
    /// <summary>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</summary>
    [Argument(Format = "--until {value}")] public string Until => Get<string>(() => Until);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
}
#endregion
#region DockerContextInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContextInspect), Arguments = "context inspect")]
public partial class DockerContextInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>[CONTEXT]</summary>
    [Argument(Format = "{value}")] public string Context => Get<string>(() => Context);
    /// <summary>[CONTEXT...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Contexts => Get<List<string>>(() => Contexts);
}
#endregion
#region DockerNodePromoteSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodePromote), Arguments = "node promote")]
public partial class DockerNodePromoteSettings : DockerOptionsBase
{
    /// <summary>NODE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Nodes => Get<List<string>>(() => Nodes);
}
#endregion
#region DockerNodeDemoteSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNodeDemote), Arguments = "node demote")]
public partial class DockerNodeDemoteSettings : DockerOptionsBase
{
    /// <summary>NODE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Nodes => Get<List<string>>(() => Nodes);
}
#endregion
#region DockerExecSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerExec), Arguments = "exec")]
public partial class DockerExecSettings : DockerOptionsBase
{
    /// <summary>Detached mode: run command in the background.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Set environment variables.</summary>
    [Argument(Format = "--env {value}")] public IReadOnlyList<string> Env => Get<List<string>>(() => Env);
    /// <summary>Keep STDIN open even if not attached.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>Give extended privileges to the command.</summary>
    [Argument(Format = "--privileged")] public bool? Privileged => Get<bool?>(() => Privileged);
    /// <summary>Allocate a pseudo-TTY.</summary>
    [Argument(Format = "--tty")] public bool? Tty => Get<bool?>(() => Tty);
    /// <summary>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</summary>
    [Argument(Format = "--user {value}")] public string User => Get<string>(() => User);
    /// <summary>Working directory inside the container.</summary>
    [Argument(Format = "--workdir {value}")] public string Workdir => Get<string>(() => Workdir);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}")] public string Container => Get<string>(() => Container);
    /// <summary>COMMAND</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
    /// <summary>[ARG...]</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Args => Get<List<string>>(() => Args);
}
#endregion
#region DockerImageRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageRm), Arguments = "image rm")]
public partial class DockerImageRmSettings : DockerOptionsBase
{
    /// <summary>Force removal of the image.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Do not delete untagged parents.</summary>
    [Argument(Format = "--no-prune")] public bool? NoPrune => Get<bool?>(() => NoPrune);
    /// <summary>IMAGE</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Images => Get<List<string>>(() => Images);
}
#endregion
#region DockerImageSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImage), Arguments = "image")]
public partial class DockerImageSettings : DockerOptionsBase
{
}
#endregion
#region DockerContextSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContext), Arguments = "context")]
public partial class DockerContextSettings : DockerOptionsBase
{
}
#endregion
#region DockerVolumeSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerVolume), Arguments = "volume")]
public partial class DockerVolumeSettings : DockerOptionsBase
{
    /// <summary>COMMAND</summary>
    [Argument(Format = "{value}")] public string Command => Get<string>(() => Command);
}
#endregion
#region DockerContainerStartSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerContainerStart), Arguments = "container start")]
public partial class DockerContainerStartSettings : DockerOptionsBase
{
    /// <summary>Attach STDOUT/STDERR and forward signals.</summary>
    [Argument(Format = "--attach")] public bool? Attach => Get<bool?>(() => Attach);
    /// <summary>Restore from this checkpoint.</summary>
    [Argument(Format = "--checkpoint {value}")] public string Checkpoint => Get<string>(() => Checkpoint);
    /// <summary>Use a custom checkpoint storage directory.</summary>
    [Argument(Format = "--checkpoint-dir {value}")] public string CheckpointDir => Get<string>(() => CheckpointDir);
    /// <summary>Override the key sequence for detaching a container.</summary>
    [Argument(Format = "--detach-keys {value}")] public string DetachKeys => Get<string>(() => DetachKeys);
    /// <summary>Attach container's STDIN.</summary>
    [Argument(Format = "--interactive")] public bool? Interactive => Get<bool?>(() => Interactive);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerPluginInspectSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerPluginInspect), Arguments = "plugin inspect")]
public partial class DockerPluginInspectSettings : DockerOptionsBase
{
    /// <summary>Format the output using the given Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>PLUGIN</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Plugins => Get<List<string>>(() => Plugins);
}
#endregion
#region DockerLogoutSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerLogout), Arguments = "logout")]
public partial class DockerLogoutSettings : DockerOptionsBase
{
    /// <summary>[SERVER]</summary>
    [Argument(Format = "{value}")] public string Server => Get<string>(() => Server);
}
#endregion
#region DockerNetworkSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerNetwork), Arguments = "network")]
public partial class DockerNetworkSettings : DockerOptionsBase
{
}
#endregion
#region DockerImageLsSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerImageLs), Arguments = "image ls")]
public partial class DockerImageLsSettings : DockerOptionsBase
{
    /// <summary>Show all images (default hides intermediate images).</summary>
    [Argument(Format = "--all")] public bool? All => Get<bool?>(() => All);
    /// <summary>Show digests.</summary>
    [Argument(Format = "--digests")] public bool? Digests => Get<bool?>(() => Digests);
    /// <summary>Filter output based on conditions provided.</summary>
    [Argument(Format = "--filter {value}")] public string Filter => Get<string>(() => Filter);
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Don't truncate output.</summary>
    [Argument(Format = "--no-trunc")] public bool? NoTrunc => Get<bool?>(() => NoTrunc);
    /// <summary>Only show numeric IDs.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>[REPOSITORY[:TAG]]</summary>
    [Argument(Format = "{value}")] public string Repository => Get<string>(() => Repository);
}
#endregion
#region DockerSystemDfSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerSystemDf), Arguments = "system df")]
public partial class DockerSystemDfSettings : DockerOptionsBase
{
    /// <summary>Pretty-print images using a Go template.</summary>
    [Argument(Format = "--format {value}")] public string Format => Get<string>(() => Format);
    /// <summary>Show detailed information on space usage.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region DockerServiceRollbackSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerServiceRollback), Arguments = "service rollback")]
public partial class DockerServiceRollbackSettings : DockerOptionsBase
{
    /// <summary>Exit immediately instead of waiting for the service to converge.</summary>
    [Argument(Format = "--detach")] public bool? Detach => Get<bool?>(() => Detach);
    /// <summary>Suppress progress output.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>SERVICE</summary>
    [Argument(Format = "{value}")] public string Service => Get<string>(() => Service);
}
#endregion
#region DockerRestartSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerRestart), Arguments = "restart")]
public partial class DockerRestartSettings : DockerOptionsBase
{
    /// <summary>Seconds to wait for stop before killing the container.</summary>
    [Argument(Format = "--time {value}")] public int? Time => Get<int?>(() => Time);
    /// <summary>CONTAINER</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Containers => Get<List<string>>(() => Containers);
}
#endregion
#region DockerTrustSignerRemoveSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerTrustSignerRemove), Arguments = "trust signer remove")]
public partial class DockerTrustSignerRemoveSettings : DockerOptionsBase
{
    /// <summary>Do not prompt for confirmation before removing the most recent signer.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>NAME</summary>
    [Argument(Format = "{value}")] public string Name => Get<string>(() => Name);
    /// <summary>REPOSITORY</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Repositories => Get<List<string>>(() => Repositories);
}
#endregion
#region DockerStackRmSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerStackRm), Arguments = "stack rm")]
public partial class DockerStackRmSettings : DockerStackSettings
{
    /// <summary>Kubernetes namespace to use.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>STACK</summary>
    [Argument(Format = "{value}", Separator = " ")] public IReadOnlyList<string> Stacks => Get<List<string>>(() => Stacks);
}
#endregion
#region DockerBuildSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(DockerTasks), Command = nameof(DockerTasks.DockerBuild), Arguments = "build")]
public partial class DockerBuildSettings : DockerOptionsBase
{
    /// <summary>Add a custom host-to-IP mapping (host:ip).</summary>
    [Argument(Format = "--add-host {value}")] public IReadOnlyList<string> AddHost => Get<List<string>>(() => AddHost);
    /// <summary>Set build-time variables.</summary>
    [Argument(Format = "--build-arg {value}")] public IReadOnlyList<string> BuildArg => Get<List<string>>(() => BuildArg);
    /// <summary>Images to consider as cache sources.</summary>
    [Argument(Format = "--cache-from {value}")] public IReadOnlyList<string> CacheFrom => Get<List<string>>(() => CacheFrom);
    /// <summary>Optional parent cgroup for the container.</summary>
    [Argument(Format = "--cgroup-parent {value}")] public string CgroupParent => Get<string>(() => CgroupParent);
    /// <summary>Compress the build context using gzip.</summary>
    [Argument(Format = "--compress")] public bool? Compress => Get<bool?>(() => Compress);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) period.</summary>
    [Argument(Format = "--cpu-period {value}")] public long? CpuPeriod => Get<long?>(() => CpuPeriod);
    /// <summary>Limit the CPU CFS (Completely Fair Scheduler) quota.</summary>
    [Argument(Format = "--cpu-quota {value}")] public long? CpuQuota => Get<long?>(() => CpuQuota);
    /// <summary>CPU shares (relative weight).</summary>
    [Argument(Format = "--cpu-shares {value}")] public long? CpuShares => Get<long?>(() => CpuShares);
    /// <summary>CPUs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-cpus {value}")] public string CpusetCpus => Get<string>(() => CpusetCpus);
    /// <summary>MEMs in which to allow execution (0-3, 0,1).</summary>
    [Argument(Format = "--cpuset-mems {value}")] public string CpusetMems => Get<string>(() => CpusetMems);
    /// <summary>Skip image verification.</summary>
    [Argument(Format = "--disable-content-trust")] public bool? DisableContentTrust => Get<bool?>(() => DisableContentTrust);
    /// <summary>Name of the Dockerfile (Default is 'PATH/Dockerfile').</summary>
    [Argument(Format = "--file {value}")] public string File => Get<string>(() => File);
    /// <summary>Always remove intermediate containers.</summary>
    [Argument(Format = "--force-rm")] public bool? ForceRm => Get<bool?>(() => ForceRm);
    /// <summary>Write the image ID to the file.</summary>
    [Argument(Format = "--iidfile {value}")] public string Iidfile => Get<string>(() => Iidfile);
    /// <summary>Container isolation technology.</summary>
    [Argument(Format = "--isolation {value}")] public string Isolation => Get<string>(() => Isolation);
    /// <summary>Set metadata for an image.</summary>
    [Argument(Format = "--label {value}")] public IReadOnlyList<string> Label => Get<List<string>>(() => Label);
    /// <summary>Memory limit.</summary>
    [Argument(Format = "--memory {value}")] public long? Memory => Get<long?>(() => Memory);
    /// <summary>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</summary>
    [Argument(Format = "--memory-swap {value}")] public long? MemorySwap => Get<long?>(() => MemorySwap);
    /// <summary>Set the networking mode for the RUN instructions during build.</summary>
    [Argument(Format = "--network {value}")] public string Network => Get<string>(() => Network);
    /// <summary>Do not use cache when building the image.</summary>
    [Argument(Format = "--no-cache")] public bool? NoCache => Get<bool?>(() => NoCache);
    /// <summary>Output destination (format: type=local,dest=path).</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Set platform if server is multi-platform capable.</summary>
    [Argument(Format = "--platform {value}")] public string Platform => Get<string>(() => Platform);
    /// <summary>Set type of progress output (<c>auto</c>, <c>plain</c>, <c>tty</c>). Use plain to show container output.</summary>
    [Argument(Format = "--progress {value}")] public DockerProgressType Progress => Get<DockerProgressType>(() => Progress);
    /// <summary>Always attempt to pull a newer version of the image.</summary>
    [Argument(Format = "--pull")] public bool? Pull => Get<bool?>(() => Pull);
    /// <summary>Suppress the build output and print image ID on success.</summary>
    [Argument(Format = "--quiet")] public bool? Quiet => Get<bool?>(() => Quiet);
    /// <summary>Remove intermediate containers after a successful build.</summary>
    [Argument(Format = "--rm")] public bool? Rm => Get<bool?>(() => Rm);
    /// <summary>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</summary>
    [Argument(Format = "--secret {value}")] public string Secret => Get<string>(() => Secret);
    /// <summary>Security options.</summary>
    [Argument(Format = "--security-opt {value}")] public IReadOnlyList<string> SecurityOpt => Get<List<string>>(() => SecurityOpt);
    /// <summary>Size of /dev/shm.</summary>
    [Argument(Format = "--shm-size {value}")] public long? ShmSize => Get<long?>(() => ShmSize);
    /// <summary>Squash newly built layers into a single new layer.</summary>
    [Argument(Format = "--squash")] public bool? Squash => Get<bool?>(() => Squash);
    /// <summary>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</summary>
    [Argument(Format = "--ssh {value}")] public string Ssh => Get<string>(() => Ssh);
    /// <summary>Stream attaches to server to negotiate build context.</summary>
    [Argument(Format = "--stream")] public bool? Stream => Get<bool?>(() => Stream);
    /// <summary>Name and optionally a tag in the 'name:tag' format.</summary>
    [Argument(Format = "--tag {value}")] public IReadOnlyList<string> Tag => Get<List<string>>(() => Tag);
    /// <summary>Set the target build stage to build.</summary>
    [Argument(Format = "--target {value}")] public string Target => Get<string>(() => Target);
    /// <summary>Ulimit options.</summary>
    [Argument(Format = "--ulimit {value}")] public string Ulimit => Get<string>(() => Ulimit);
    /// <summary>Path or url where the build context is located.</summary>
    [Argument(Format = "{value}")] public string Path => Get<string>(() => Path);
}
#endregion
#region DockerOptionsBase
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public partial class DockerOptionsBase : ToolOptions
{
    /// <summary>Set the logging level.</summary>
    [Argument(Format = "--log-level {value}")] public DockerLogLevel LogLevel => Get<DockerLogLevel>(() => LogLevel);
    /// <summary>Location of client config files (default ~/.docker).</summary>
    [Argument(Format = "--config {value}")] public string Config => Get<string>(() => Config);
    /// <summary>Enable debug mode.</summary>
    [Argument(Format = "--debug")] public bool? Debug => Get<bool?>(() => Debug);
    /// <summary>Use TLS; implied by --tlsverify.</summary>
    [Argument(Format = "--tls")] public bool? TLS => Get<bool?>(() => TLS);
    /// <summary>Use TLS and verify the remote.</summary>
    [Argument(Format = "--tlsverify")] public bool? TLSVerify => Get<bool?>(() => TLSVerify);
    /// <summary>Trust certs signed only by this CA (default ~/.docker/ca.pem).</summary>
    [Argument(Format = "--tlscacert {value}")] public string TLSCaCert => Get<string>(() => TLSCaCert);
    /// <summary>Path to TLS certificate file (default ~/.docker/cert.pem).</summary>
    [Argument(Format = "--tlscert {value}")] public string TLSCert => Get<string>(() => TLSCert);
    /// <summary>Path to TLS key file (default ~/.docker/key.pem).</summary>
    [Argument(Format = "--tlskey {value}")] public string TLSKey => Get<string>(() => TLSKey);
}
#endregion
#region DockerRunTargetSettings
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public partial class DockerRunTargetSettings : DockerRunSettings
{
    /// <summary>Whether to execute a <c>docker pull</c> before running the container.</summary>
    public bool? PullImage => Get<bool?>(() => PullImage);
    /// <summary>The .NET Runtime Identifier (<a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID</a>) to use to publish the build project. For example, <c>linux-x64</c>, <c>linux-arm64</c>, <c>win-x64</c>.</summary>
    public string DotNetRuntime => Get<string>(() => DotNetRuntime);
    /// <summary>Enables caching of the build executable.</summary>
    public bool? BuildCaching => Get<bool?>(() => BuildCaching);
    /// <summary>Whether to keep the <c>.env.&lt;target&gt;</c> file located under <c>build/bin/&lt;rid&gt;</c> after the target is complete.</summary>
    public bool? KeepEnvFile => Get<bool?>(() => KeepEnvFile);
    /// <summary>The username for <c>docker login</c>.</summary>
    public string Username => Get<string>(() => Username);
    /// <summary>The password for <c>docker login</c>.</summary>
    public string Password => Get<string>(() => Password);
    /// <summary>The server for <c>docker login</c>.</summary>
    public string Server => Get<string>(() => Server);
}
#endregion
#region DockerConfigRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerConfigRmSettingsExtensions
{
    #region Configs
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T SetConfigs<T>(this T o, params string[] v) where T : DockerConfigRmSettings => o.Modify(b => b.Set(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T SetConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigRmSettings => o.Modify(b => b.Set(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T AddConfigs<T>(this T o, params string[] v) where T : DockerConfigRmSettings => o.Modify(b => b.AddCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T AddConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigRmSettings => o.Modify(b => b.AddCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T RemoveConfigs<T>(this T o, params string[] v) where T : DockerConfigRmSettings => o.Modify(b => b.RemoveCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T RemoveConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigRmSettings => o.Modify(b => b.RemoveCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigRmSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigRmSettings), Property = nameof(DockerConfigRmSettings.Configs))]
    public static T ClearConfigs<T>(this T o) where T : DockerConfigRmSettings => o.Modify(b => b.ClearCollection(() => o.Configs));
    #endregion
}
#endregion
#region DockerLoadSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerLoadSettingsExtensions
{
    #region Input
    /// <inheritdoc cref="DockerLoadSettings.Input"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : DockerLoadSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="DockerLoadSettings.Input"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Input))]
    public static T ResetInput<T>(this T o) where T : DockerLoadSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerLoadSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerLoadSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerLoadSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerLoadSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerLoadSettings), Property = nameof(DockerLoadSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerLoadSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerContainerPruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerPruneSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerContainerPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerContainerPruneSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerContainerPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerContainerPruneSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerContainerPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerContainerPruneSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerContainerPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerContainerPruneSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerContainerPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerContainerPruneSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerContainerPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerContainerPruneSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerContainerPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerPruneSettings), Property = nameof(DockerContainerPruneSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerContainerPruneSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
}
#endregion
#region DockerTrustSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustSettingsExtensions
{
}
#endregion
#region DockerStackSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackSettingsExtensions
{
    #region Kubeconfig
    /// <inheritdoc cref="DockerStackSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerStackSettings), Property = nameof(DockerStackSettings.Kubeconfig))]
    public static T SetKubeconfig<T>(this T o, string v) where T : DockerStackSettings => o.Modify(b => b.Set(() => o.Kubeconfig, v));
    /// <inheritdoc cref="DockerStackSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerStackSettings), Property = nameof(DockerStackSettings.Kubeconfig))]
    public static T ResetKubeconfig<T>(this T o) where T : DockerStackSettings => o.Modify(b => b.Remove(() => o.Kubeconfig));
    #endregion
    #region Orchestrator
    /// <inheritdoc cref="DockerStackSettings.Orchestrator"/>
    [Pure] [Builder(Type = typeof(DockerStackSettings), Property = nameof(DockerStackSettings.Orchestrator))]
    public static T SetOrchestrator<T>(this T o, string v) where T : DockerStackSettings => o.Modify(b => b.Set(() => o.Orchestrator, v));
    /// <inheritdoc cref="DockerStackSettings.Orchestrator"/>
    [Pure] [Builder(Type = typeof(DockerStackSettings), Property = nameof(DockerStackSettings.Orchestrator))]
    public static T ResetOrchestrator<T>(this T o) where T : DockerStackSettings => o.Modify(b => b.Remove(() => o.Orchestrator));
    #endregion
}
#endregion
#region DockerTopSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTopSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerTopSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerTopSettings), Property = nameof(DockerTopSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerTopSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerTopSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerTopSettings), Property = nameof(DockerTopSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerTopSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Options
    /// <inheritdoc cref="DockerTopSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerTopSettings), Property = nameof(DockerTopSettings.Options))]
    public static T SetOptions<T>(this T o, string v) where T : DockerTopSettings => o.Modify(b => b.Set(() => o.Options, v));
    /// <inheritdoc cref="DockerTopSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerTopSettings), Property = nameof(DockerTopSettings.Options))]
    public static T ResetOptions<T>(this T o) where T : DockerTopSettings => o.Modify(b => b.Remove(() => o.Options));
    #endregion
}
#endregion
#region DockerPullSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPullSettingsExtensions
{
    #region AllTags
    /// <inheritdoc cref="DockerPullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.AllTags))]
    public static T SetAllTags<T>(this T o, bool? v) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.AllTags, v));
    /// <inheritdoc cref="DockerPullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.AllTags))]
    public static T ResetAllTags<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Remove(() => o.AllTags));
    /// <inheritdoc cref="DockerPullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.AllTags))]
    public static T EnableAllTags<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.AllTags, true));
    /// <inheritdoc cref="DockerPullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.AllTags))]
    public static T DisableAllTags<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.AllTags, false));
    /// <inheritdoc cref="DockerPullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.AllTags))]
    public static T ToggleAllTags<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.AllTags, !o.AllTags));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerPullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerPullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerPullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerPullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerPullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerPullSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerPullSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerPullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerPullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerPullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerPullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerPullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerPullSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerPullSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerPullSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerPullSettings), Property = nameof(DockerPullSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerPullSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
}
#endregion
#region DockerTrustSignSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustSignSettingsExtensions
{
}
#endregion
#region DockerCheckpointSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCheckpointSettingsExtensions
{
}
#endregion
#region DockerTrustSignerSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustSignerSettingsExtensions
{
}
#endregion
#region DockerConfigInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerConfigInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerConfigInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Pretty
    /// <inheritdoc cref="DockerConfigInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Pretty))]
    public static T SetPretty<T>(this T o, bool? v) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Pretty, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Pretty))]
    public static T ResetPretty<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.Remove(() => o.Pretty));
    /// <inheritdoc cref="DockerConfigInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Pretty))]
    public static T EnablePretty<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Pretty, true));
    /// <inheritdoc cref="DockerConfigInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Pretty))]
    public static T DisablePretty<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Pretty, false));
    /// <inheritdoc cref="DockerConfigInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Pretty))]
    public static T TogglePretty<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Pretty, !o.Pretty));
    #endregion
    #region Configs
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T SetConfigs<T>(this T o, params string[] v) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T SetConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigInspectSettings => o.Modify(b => b.Set(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T AddConfigs<T>(this T o, params string[] v) where T : DockerConfigInspectSettings => o.Modify(b => b.AddCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T AddConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigInspectSettings => o.Modify(b => b.AddCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T RemoveConfigs<T>(this T o, params string[] v) where T : DockerConfigInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T RemoveConfigs<T>(this T o, IEnumerable<string> v) where T : DockerConfigInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Configs, v));
    /// <inheritdoc cref="DockerConfigInspectSettings.Configs"/>
    [Pure] [Builder(Type = typeof(DockerConfigInspectSettings), Property = nameof(DockerConfigInspectSettings.Configs))]
    public static T ClearConfigs<T>(this T o) where T : DockerConfigInspectSettings => o.Modify(b => b.ClearCollection(() => o.Configs));
    #endregion
}
#endregion
#region DockerServiceSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceSettingsExtensions
{
}
#endregion
#region DockerTrustKeyGenerateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustKeyGenerateSettingsExtensions
{
    #region Name
    /// <inheritdoc cref="DockerTrustKeyGenerateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyGenerateSettings), Property = nameof(DockerTrustKeyGenerateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerTrustKeyGenerateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerTrustKeyGenerateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyGenerateSettings), Property = nameof(DockerTrustKeyGenerateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerTrustKeyGenerateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
}
#endregion
#region DockerSystemSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSystemSettingsExtensions
{
}
#endregion
#region DockerConfigLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerConfigLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerConfigLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerConfigLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerConfigLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerConfigLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerConfigLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerConfigLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerConfigLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerConfigLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerConfigLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerConfigLsSettings), Property = nameof(DockerConfigLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerConfigLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerContextUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextUpdateSettingsExtensions
{
    #region DefaultStackOrchestrator
    /// <inheritdoc cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.DefaultStackOrchestrator))]
    public static T SetDefaultStackOrchestrator<T>(this T o, string v) where T : DockerContextUpdateSettings => o.Modify(b => b.Set(() => o.DefaultStackOrchestrator, v));
    /// <inheritdoc cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.DefaultStackOrchestrator))]
    public static T ResetDefaultStackOrchestrator<T>(this T o) where T : DockerContextUpdateSettings => o.Modify(b => b.Remove(() => o.DefaultStackOrchestrator));
    #endregion
    #region Description
    /// <inheritdoc cref="DockerContextUpdateSettings.Description"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Description))]
    public static T SetDescription<T>(this T o, string v) where T : DockerContextUpdateSettings => o.Modify(b => b.Set(() => o.Description, v));
    /// <inheritdoc cref="DockerContextUpdateSettings.Description"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Description))]
    public static T ResetDescription<T>(this T o) where T : DockerContextUpdateSettings => o.Modify(b => b.Remove(() => o.Description));
    #endregion
    #region Docker
    /// <inheritdoc cref="DockerContextUpdateSettings.Docker"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Docker))]
    public static T SetDocker<T>(this T o, string v) where T : DockerContextUpdateSettings => o.Modify(b => b.Set(() => o.Docker, v));
    /// <inheritdoc cref="DockerContextUpdateSettings.Docker"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Docker))]
    public static T ResetDocker<T>(this T o) where T : DockerContextUpdateSettings => o.Modify(b => b.Remove(() => o.Docker));
    #endregion
    #region Kubernetes
    /// <inheritdoc cref="DockerContextUpdateSettings.Kubernetes"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Kubernetes))]
    public static T SetKubernetes<T>(this T o, string v) where T : DockerContextUpdateSettings => o.Modify(b => b.Set(() => o.Kubernetes, v));
    /// <inheritdoc cref="DockerContextUpdateSettings.Kubernetes"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Kubernetes))]
    public static T ResetKubernetes<T>(this T o) where T : DockerContextUpdateSettings => o.Modify(b => b.Remove(() => o.Kubernetes));
    #endregion
    #region Context
    /// <inheritdoc cref="DockerContextUpdateSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextUpdateSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextUpdateSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextUpdateSettings), Property = nameof(DockerContextUpdateSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextUpdateSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
}
#endregion
#region DockerStackServicesSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackServicesSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerStackServicesSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerStackServicesSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerStackServicesSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerStackServicesSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Namespace
    /// <inheritdoc cref="DockerStackServicesSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackServicesSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerStackServicesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerStackServicesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerStackServicesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerStackServicesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerStackServicesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Stack
    /// <inheritdoc cref="DockerStackServicesSettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Stack))]
    public static T SetStack<T>(this T o, string v) where T : DockerStackServicesSettings => o.Modify(b => b.Set(() => o.Stack, v));
    /// <inheritdoc cref="DockerStackServicesSettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackServicesSettings), Property = nameof(DockerStackServicesSettings.Stack))]
    public static T ResetStack<T>(this T o) where T : DockerStackServicesSettings => o.Modify(b => b.Remove(() => o.Stack));
    #endregion
}
#endregion
#region DockerContainerPortSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerPortSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerContainerPortSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerPortSettings), Property = nameof(DockerContainerPortSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerPortSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerPortSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerPortSettings), Property = nameof(DockerContainerPortSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerPortSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region PrivatePort
    /// <inheritdoc cref="DockerContainerPortSettings.PrivatePort"/>
    [Pure] [Builder(Type = typeof(DockerContainerPortSettings), Property = nameof(DockerContainerPortSettings.PrivatePort))]
    public static T SetPrivatePort<T>(this T o, string v) where T : DockerContainerPortSettings => o.Modify(b => b.Set(() => o.PrivatePort, v));
    /// <inheritdoc cref="DockerContainerPortSettings.PrivatePort"/>
    [Pure] [Builder(Type = typeof(DockerContainerPortSettings), Property = nameof(DockerContainerPortSettings.PrivatePort))]
    public static T ResetPrivatePort<T>(this T o) where T : DockerContainerPortSettings => o.Modify(b => b.Remove(() => o.PrivatePort));
    #endregion
}
#endregion
#region DockerRenameSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRenameSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerRenameSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerRenameSettings), Property = nameof(DockerRenameSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerRenameSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerRenameSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerRenameSettings), Property = nameof(DockerRenameSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerRenameSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region NewName
    /// <inheritdoc cref="DockerRenameSettings.NewName"/>
    [Pure] [Builder(Type = typeof(DockerRenameSettings), Property = nameof(DockerRenameSettings.NewName))]
    public static T SetNewName<T>(this T o, string v) where T : DockerRenameSettings => o.Modify(b => b.Set(() => o.NewName, v));
    /// <inheritdoc cref="DockerRenameSettings.NewName"/>
    [Pure] [Builder(Type = typeof(DockerRenameSettings), Property = nameof(DockerRenameSettings.NewName))]
    public static T ResetNewName<T>(this T o) where T : DockerRenameSettings => o.Modify(b => b.Remove(() => o.NewName));
    #endregion
}
#endregion
#region DockerTagSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTagSettingsExtensions
{
    #region SourceImage
    /// <inheritdoc cref="DockerTagSettings.SourceImage"/>
    [Pure] [Builder(Type = typeof(DockerTagSettings), Property = nameof(DockerTagSettings.SourceImage))]
    public static T SetSourceImage<T>(this T o, string v) where T : DockerTagSettings => o.Modify(b => b.Set(() => o.SourceImage, v));
    /// <inheritdoc cref="DockerTagSettings.SourceImage"/>
    [Pure] [Builder(Type = typeof(DockerTagSettings), Property = nameof(DockerTagSettings.SourceImage))]
    public static T ResetSourceImage<T>(this T o) where T : DockerTagSettings => o.Modify(b => b.Remove(() => o.SourceImage));
    #endregion
    #region TargetImage
    /// <inheritdoc cref="DockerTagSettings.TargetImage"/>
    [Pure] [Builder(Type = typeof(DockerTagSettings), Property = nameof(DockerTagSettings.TargetImage))]
    public static T SetTargetImage<T>(this T o, string v) where T : DockerTagSettings => o.Modify(b => b.Set(() => o.TargetImage, v));
    /// <inheritdoc cref="DockerTagSettings.TargetImage"/>
    [Pure] [Builder(Type = typeof(DockerTagSettings), Property = nameof(DockerTagSettings.TargetImage))]
    public static T ResetTargetImage<T>(this T o) where T : DockerTagSettings => o.Modify(b => b.Remove(() => o.TargetImage));
    #endregion
}
#endregion
#region DockerSecretInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSecretInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerSecretInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Pretty
    /// <inheritdoc cref="DockerSecretInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Pretty))]
    public static T SetPretty<T>(this T o, bool? v) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Pretty, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Pretty))]
    public static T ResetPretty<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.Remove(() => o.Pretty));
    /// <inheritdoc cref="DockerSecretInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Pretty))]
    public static T EnablePretty<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Pretty, true));
    /// <inheritdoc cref="DockerSecretInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Pretty))]
    public static T DisablePretty<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Pretty, false));
    /// <inheritdoc cref="DockerSecretInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Pretty))]
    public static T TogglePretty<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Pretty, !o.Pretty));
    #endregion
    #region Secrets
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T SetSecrets<T>(this T o, params string[] v) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T SetSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretInspectSettings => o.Modify(b => b.Set(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T AddSecrets<T>(this T o, params string[] v) where T : DockerSecretInspectSettings => o.Modify(b => b.AddCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T AddSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretInspectSettings => o.Modify(b => b.AddCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T RemoveSecrets<T>(this T o, params string[] v) where T : DockerSecretInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T RemoveSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretInspectSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretInspectSettings), Property = nameof(DockerSecretInspectSettings.Secrets))]
    public static T ClearSecrets<T>(this T o) where T : DockerSecretInspectSettings => o.Modify(b => b.ClearCollection(() => o.Secrets));
    #endregion
}
#endregion
#region DockerSecretSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSecretSettingsExtensions
{
}
#endregion
#region DockerContainerExportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerExportSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="DockerContainerExportSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerContainerExportSettings), Property = nameof(DockerContainerExportSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerContainerExportSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerContainerExportSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerContainerExportSettings), Property = nameof(DockerContainerExportSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerContainerExportSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerContainerExportSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerExportSettings), Property = nameof(DockerContainerExportSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerExportSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerExportSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerExportSettings), Property = nameof(DockerContainerExportSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerExportSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerHistorySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerHistorySettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerHistorySettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerHistorySettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Human
    /// <inheritdoc cref="DockerHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Human))]
    public static T SetHuman<T>(this T o, bool? v) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Human, v));
    /// <inheritdoc cref="DockerHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Human))]
    public static T ResetHuman<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Remove(() => o.Human));
    /// <inheritdoc cref="DockerHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Human))]
    public static T EnableHuman<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Human, true));
    /// <inheritdoc cref="DockerHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Human))]
    public static T DisableHuman<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Human, false));
    /// <inheritdoc cref="DockerHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Human))]
    public static T ToggleHuman<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Human, !o.Human));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerHistorySettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerHistorySettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerHistorySettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerHistorySettings), Property = nameof(DockerHistorySettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerHistorySettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
}
#endregion
#region DockerServiceCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceCreateSettingsExtensions
{
    #region Config
    /// <inheritdoc cref="DockerServiceCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Config))]
    public static T SetConfig<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Config, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Config))]
    public static T ResetConfig<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Config));
    #endregion
    #region Constraint
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T SetConstraint<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T SetConstraint<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T AddConstraint<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T AddConstraint<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T RemoveConstraint<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T RemoveConstraint<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Constraint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Constraint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Constraint))]
    public static T ClearConstraint<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Constraint));
    #endregion
    #region ContainerLabel
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T SetContainerLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T SetContainerLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T AddContainerLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T AddContainerLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T RemoveContainerLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T RemoveContainerLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabel, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ContainerLabel"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ContainerLabel))]
    public static T ClearContainerLabel<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.ContainerLabel));
    #endregion
    #region CredentialSpec
    /// <inheritdoc cref="DockerServiceCreateSettings.CredentialSpec"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.CredentialSpec))]
    public static T SetCredentialSpec<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.CredentialSpec, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.CredentialSpec"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.CredentialSpec))]
    public static T ResetCredentialSpec<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.CredentialSpec));
    #endregion
    #region Detach
    /// <inheritdoc cref="DockerServiceCreateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerServiceCreateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region Dns
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T SetDns<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T SetDns<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T AddDns<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T AddDns<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Dns))]
    public static T ClearDns<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Dns));
    #endregion
    #region DnsOption
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsOption))]
    public static T ClearDnsOption<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOption));
    #endregion
    #region DnsSearch
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.DnsSearch))]
    public static T ClearDnsSearch<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearch));
    #endregion
    #region EndpointMode
    /// <inheritdoc cref="DockerServiceCreateSettings.EndpointMode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EndpointMode))]
    public static T SetEndpointMode<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.EndpointMode, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EndpointMode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EndpointMode))]
    public static T ResetEndpointMode<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.EndpointMode));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerServiceCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region EnvFile
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.EnvFile))]
    public static T ClearEnvFile<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.EnvFile));
    #endregion
    #region GenericResource
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T SetGenericResource<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T SetGenericResource<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T AddGenericResource<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T AddGenericResource<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T RemoveGenericResource<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T RemoveGenericResource<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResource, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.GenericResource"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.GenericResource))]
    public static T ClearGenericResource<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.GenericResource));
    #endregion
    #region Group
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T SetGroup<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T SetGroup<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T AddGroup<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T AddGroup<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T RemoveGroup<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T RemoveGroup<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Group, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Group"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Group))]
    public static T ClearGroup<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Group));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region Host
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T SetHost<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T SetHost<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T AddHost<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T AddHost<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T RemoveHost<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T RemoveHost<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Host, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Host"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Host))]
    public static T ClearHost<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Host));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerServiceCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerServiceCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerServiceCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerServiceCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region LimitCpu
    /// <inheritdoc cref="DockerServiceCreateSettings.LimitCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LimitCpu))]
    public static T SetLimitCpu<T>(this T o, decimal? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.LimitCpu, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LimitCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LimitCpu))]
    public static T ResetLimitCpu<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.LimitCpu));
    #endregion
    #region LimitMemory
    /// <inheritdoc cref="DockerServiceCreateSettings.LimitMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LimitMemory))]
    public static T SetLimitMemory<T>(this T o, long? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.LimitMemory, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LimitMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LimitMemory))]
    public static T ResetLimitMemory<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.LimitMemory));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerServiceCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region Mode
    /// <inheritdoc cref="DockerServiceCreateSettings.Mode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Mode))]
    public static T SetMode<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Mode, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Mode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Mode))]
    public static T ResetMode<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Mode));
    #endregion
    #region Mount
    /// <inheritdoc cref="DockerServiceCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Mount))]
    public static T SetMount<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Mount, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Mount))]
    public static T ResetMount<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Mount));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerServiceCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerServiceCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerServiceCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region NoResolveImage
    /// <inheritdoc cref="DockerServiceCreateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoResolveImage))]
    public static T SetNoResolveImage<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoResolveImage))]
    public static T ResetNoResolveImage<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.NoResolveImage));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoResolveImage))]
    public static T EnableNoResolveImage<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoResolveImage))]
    public static T DisableNoResolveImage<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.NoResolveImage))]
    public static T ToggleNoResolveImage<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, !o.NoResolveImage));
    #endregion
    #region PlacementPref
    /// <inheritdoc cref="DockerServiceCreateSettings.PlacementPref"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.PlacementPref))]
    public static T SetPlacementPref<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.PlacementPref, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.PlacementPref"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.PlacementPref))]
    public static T ResetPlacementPref<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.PlacementPref));
    #endregion
    #region Publish
    /// <inheritdoc cref="DockerServiceCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Publish))]
    public static T SetPublish<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Publish))]
    public static T ResetPublish<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Publish));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerServiceCreateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerServiceCreateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerServiceCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Replicas
    /// <inheritdoc cref="DockerServiceCreateSettings.Replicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Replicas))]
    public static T SetReplicas<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Replicas, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Replicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Replicas))]
    public static T ResetReplicas<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Replicas));
    #endregion
    #region ReplicasMaxPerNode
    /// <inheritdoc cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReplicasMaxPerNode))]
    public static T SetReplicasMaxPerNode<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReplicasMaxPerNode, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReplicasMaxPerNode))]
    public static T ResetReplicasMaxPerNode<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.ReplicasMaxPerNode));
    #endregion
    #region ReserveCpu
    /// <inheritdoc cref="DockerServiceCreateSettings.ReserveCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReserveCpu))]
    public static T SetReserveCpu<T>(this T o, decimal? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReserveCpu, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReserveCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReserveCpu))]
    public static T ResetReserveCpu<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.ReserveCpu));
    #endregion
    #region ReserveMemory
    /// <inheritdoc cref="DockerServiceCreateSettings.ReserveMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReserveMemory))]
    public static T SetReserveMemory<T>(this T o, long? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.ReserveMemory, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.ReserveMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.ReserveMemory))]
    public static T ResetReserveMemory<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.ReserveMemory));
    #endregion
    #region RestartCondition
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartCondition"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartCondition))]
    public static T SetRestartCondition<T>(this T o, DockerRestartCondition v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RestartCondition, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartCondition"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartCondition))]
    public static T ResetRestartCondition<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RestartCondition));
    #endregion
    #region RestartDelay
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartDelay))]
    public static T SetRestartDelay<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RestartDelay, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartDelay))]
    public static T ResetRestartDelay<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RestartDelay));
    #endregion
    #region RestartMaxAttempts
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartMaxAttempts"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartMaxAttempts))]
    public static T SetRestartMaxAttempts<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RestartMaxAttempts, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartMaxAttempts"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartMaxAttempts))]
    public static T ResetRestartMaxAttempts<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RestartMaxAttempts));
    #endregion
    #region RestartWindow
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartWindow"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartWindow))]
    public static T SetRestartWindow<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RestartWindow, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RestartWindow"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RestartWindow))]
    public static T ResetRestartWindow<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RestartWindow));
    #endregion
    #region RollbackDelay
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackDelay))]
    public static T SetRollbackDelay<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackDelay, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackDelay))]
    public static T ResetRollbackDelay<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackDelay));
    #endregion
    #region RollbackFailureAction
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackFailureAction))]
    public static T SetRollbackFailureAction<T>(this T o, DockerRollbackFailureAction v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackFailureAction, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackFailureAction))]
    public static T ResetRollbackFailureAction<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackFailureAction));
    #endregion
    #region RollbackMaxFailureRatio
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackMaxFailureRatio))]
    public static T SetRollbackMaxFailureRatio<T>(this T o, float? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackMaxFailureRatio, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackMaxFailureRatio))]
    public static T ResetRollbackMaxFailureRatio<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackMaxFailureRatio));
    #endregion
    #region RollbackMonitor
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackMonitor))]
    public static T SetRollbackMonitor<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackMonitor, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackMonitor))]
    public static T ResetRollbackMonitor<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackMonitor));
    #endregion
    #region RollbackOrder
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackOrder))]
    public static T SetRollbackOrder<T>(this T o, DockerRollbackOrder v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackOrder, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackOrder))]
    public static T ResetRollbackOrder<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackOrder));
    #endregion
    #region RollbackParallelism
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackParallelism))]
    public static T SetRollbackParallelism<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.RollbackParallelism, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.RollbackParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.RollbackParallelism))]
    public static T ResetRollbackParallelism<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.RollbackParallelism));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerServiceCreateSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region StopGracePeriod
    /// <inheritdoc cref="DockerServiceCreateSettings.StopGracePeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.StopGracePeriod))]
    public static T SetStopGracePeriod<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.StopGracePeriod, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.StopGracePeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.StopGracePeriod))]
    public static T ResetStopGracePeriod<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.StopGracePeriod));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerServiceCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region Sysctl
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Sysctl, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Sysctl))]
    public static T ClearSysctl<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Sysctl));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerServiceCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerServiceCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region UpdateDelay
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateDelay))]
    public static T SetUpdateDelay<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateDelay, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateDelay))]
    public static T ResetUpdateDelay<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateDelay));
    #endregion
    #region UpdateFailureAction
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateFailureAction))]
    public static T SetUpdateFailureAction<T>(this T o, DockerUpdateFailureAction v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateFailureAction, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateFailureAction))]
    public static T ResetUpdateFailureAction<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateFailureAction));
    #endregion
    #region UpdateMaxFailureRatio
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateMaxFailureRatio))]
    public static T SetUpdateMaxFailureRatio<T>(this T o, float? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateMaxFailureRatio, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateMaxFailureRatio))]
    public static T ResetUpdateMaxFailureRatio<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateMaxFailureRatio));
    #endregion
    #region UpdateMonitor
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateMonitor))]
    public static T SetUpdateMonitor<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateMonitor, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateMonitor))]
    public static T ResetUpdateMonitor<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateMonitor));
    #endregion
    #region UpdateOrder
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateOrder))]
    public static T SetUpdateOrder<T>(this T o, DockerUpdateOrder v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateOrder, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateOrder))]
    public static T ResetUpdateOrder<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateOrder));
    #endregion
    #region UpdateParallelism
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateParallelism))]
    public static T SetUpdateParallelism<T>(this T o, int? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.UpdateParallelism, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.UpdateParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.UpdateParallelism))]
    public static T ResetUpdateParallelism<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.UpdateParallelism));
    #endregion
    #region User
    /// <inheritdoc cref="DockerServiceCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region WithRegistryAuth
    /// <inheritdoc cref="DockerServiceCreateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.WithRegistryAuth))]
    public static T SetWithRegistryAuth<T>(this T o, bool? v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.WithRegistryAuth))]
    public static T ResetWithRegistryAuth<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.WithRegistryAuth));
    /// <inheritdoc cref="DockerServiceCreateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.WithRegistryAuth))]
    public static T EnableWithRegistryAuth<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, true));
    /// <inheritdoc cref="DockerServiceCreateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.WithRegistryAuth))]
    public static T DisableWithRegistryAuth<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, false));
    /// <inheritdoc cref="DockerServiceCreateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.WithRegistryAuth))]
    public static T ToggleWithRegistryAuth<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, !o.WithRegistryAuth));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerServiceCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerServiceCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerServiceCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerServiceCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceCreateSettings), Property = nameof(DockerServiceCreateSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerServiceCreateSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerServicePsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServicePsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerServicePsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerServicePsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerServicePsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerServicePsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoResolve
    /// <inheritdoc cref="DockerServicePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoResolve))]
    public static T SetNoResolve<T>(this T o, bool? v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoResolve, v));
    /// <inheritdoc cref="DockerServicePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoResolve))]
    public static T ResetNoResolve<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Remove(() => o.NoResolve));
    /// <inheritdoc cref="DockerServicePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoResolve))]
    public static T EnableNoResolve<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoResolve, true));
    /// <inheritdoc cref="DockerServicePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoResolve))]
    public static T DisableNoResolve<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoResolve, false));
    /// <inheritdoc cref="DockerServicePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoResolve))]
    public static T ToggleNoResolve<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoResolve, !o.NoResolve));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerServicePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerServicePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerServicePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerServicePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerServicePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerServicePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerServicePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerServicePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerServicePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerServicePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Services
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T SetServices<T>(this T o, params string[] v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T SetServices<T>(this T o, IEnumerable<string> v) where T : DockerServicePsSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T AddServices<T>(this T o, params string[] v) where T : DockerServicePsSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T AddServices<T>(this T o, IEnumerable<string> v) where T : DockerServicePsSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T RemoveServices<T>(this T o, params string[] v) where T : DockerServicePsSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T RemoveServices<T>(this T o, IEnumerable<string> v) where T : DockerServicePsSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServicePsSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServicePsSettings), Property = nameof(DockerServicePsSettings.Services))]
    public static T ClearServices<T>(this T o) where T : DockerServicePsSettings => o.Modify(b => b.ClearCollection(() => o.Services));
    #endregion
}
#endregion
#region DockerStopSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStopSettingsExtensions
{
    #region Time
    /// <inheritdoc cref="DockerStopSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Time))]
    public static T SetTime<T>(this T o, int? v) where T : DockerStopSettings => o.Modify(b => b.Set(() => o.Time, v));
    /// <inheritdoc cref="DockerStopSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Time))]
    public static T ResetTime<T>(this T o) where T : DockerStopSettings => o.Modify(b => b.Remove(() => o.Time));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerStopSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerStopSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerStopSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerStopSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerStopSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerStopSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStopSettings), Property = nameof(DockerStopSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerStopSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerNodeSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeSettingsExtensions
{
}
#endregion
#region DockerUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerUpdateSettingsExtensions
{
    #region BlkioWeight
    /// <inheritdoc cref="DockerUpdateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerUpdateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerUpdateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerUpdateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerUpdateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerUpdateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerUpdateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerUpdateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerUpdateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerUpdateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerUpdateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerUpdateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerUpdateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerUpdateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerUpdateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerUpdateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerUpdateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerUpdateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerUpdateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerUpdateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerUpdateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerUpdateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerUpdateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerUpdateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerUpdateSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerUpdateSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerUpdateSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUpdateSettings), Property = nameof(DockerUpdateSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerUpdateSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerPluginCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginCreateSettingsExtensions
{
    #region Compress
    /// <inheritdoc cref="DockerPluginCreateSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Compress))]
    public static T SetCompress<T>(this T o, bool? v) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.Compress, v));
    /// <inheritdoc cref="DockerPluginCreateSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Compress))]
    public static T ResetCompress<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Remove(() => o.Compress));
    /// <inheritdoc cref="DockerPluginCreateSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Compress))]
    public static T EnableCompress<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.Compress, true));
    /// <inheritdoc cref="DockerPluginCreateSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Compress))]
    public static T DisableCompress<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.Compress, false));
    /// <inheritdoc cref="DockerPluginCreateSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Compress))]
    public static T ToggleCompress<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.Compress, !o.Compress));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginCreateSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginCreateSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
    #region PluginDataDir
    /// <inheritdoc cref="DockerPluginCreateSettings.PluginDataDir"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.PluginDataDir))]
    public static T SetPluginDataDir<T>(this T o, string v) where T : DockerPluginCreateSettings => o.Modify(b => b.Set(() => o.PluginDataDir, v));
    /// <inheritdoc cref="DockerPluginCreateSettings.PluginDataDir"/>
    [Pure] [Builder(Type = typeof(DockerPluginCreateSettings), Property = nameof(DockerPluginCreateSettings.PluginDataDir))]
    public static T ResetPluginDataDir<T>(this T o) where T : DockerPluginCreateSettings => o.Modify(b => b.Remove(() => o.PluginDataDir));
    #endregion
}
#endregion
#region DockerSystemInfoSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSystemInfoSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerSystemInfoSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemInfoSettings), Property = nameof(DockerSystemInfoSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSystemInfoSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSystemInfoSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemInfoSettings), Property = nameof(DockerSystemInfoSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSystemInfoSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
}
#endregion
#region DockerVolumePruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumePruneSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerVolumePruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerVolumePruneSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerVolumePruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerVolumePruneSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerVolumePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerVolumePruneSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerVolumePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerVolumePruneSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerVolumePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerVolumePruneSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerVolumePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerVolumePruneSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerVolumePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumePruneSettings), Property = nameof(DockerVolumePruneSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerVolumePruneSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
}
#endregion
#region DockerPluginUpgradeSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginUpgradeSettingsExtensions
{
    #region DisableContentTrust
    /// <inheritdoc cref="DockerPluginUpgradeSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region GrantAllPermissions
    /// <inheritdoc cref="DockerPluginUpgradeSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.GrantAllPermissions))]
    public static T SetGrantAllPermissions<T>(this T o, bool? v) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, v));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.GrantAllPermissions))]
    public static T ResetGrantAllPermissions<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Remove(() => o.GrantAllPermissions));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.GrantAllPermissions))]
    public static T EnableGrantAllPermissions<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, true));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.GrantAllPermissions))]
    public static T DisableGrantAllPermissions<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, false));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.GrantAllPermissions))]
    public static T ToggleGrantAllPermissions<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, !o.GrantAllPermissions));
    #endregion
    #region SkipRemoteCheck
    /// <inheritdoc cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.SkipRemoteCheck))]
    public static T SetSkipRemoteCheck<T>(this T o, bool? v) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.SkipRemoteCheck, v));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.SkipRemoteCheck))]
    public static T ResetSkipRemoteCheck<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Remove(() => o.SkipRemoteCheck));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.SkipRemoteCheck))]
    public static T EnableSkipRemoteCheck<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.SkipRemoteCheck, true));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.SkipRemoteCheck))]
    public static T DisableSkipRemoteCheck<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.SkipRemoteCheck, false));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.SkipRemoteCheck))]
    public static T ToggleSkipRemoteCheck<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.SkipRemoteCheck, !o.SkipRemoteCheck));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginUpgradeSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
    #region Remote
    /// <inheritdoc cref="DockerPluginUpgradeSettings.Remote"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.Remote))]
    public static T SetRemote<T>(this T o, string v) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Set(() => o.Remote, v));
    /// <inheritdoc cref="DockerPluginUpgradeSettings.Remote"/>
    [Pure] [Builder(Type = typeof(DockerPluginUpgradeSettings), Property = nameof(DockerPluginUpgradeSettings.Remote))]
    public static T ResetRemote<T>(this T o) where T : DockerPluginUpgradeSettings => o.Modify(b => b.Remove(() => o.Remote));
    #endregion
}
#endregion
#region DockerBuilderPruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuilderPruneSettingsExtensions
{
}
#endregion
#region DockerSwarmJoinTokenSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmJoinTokenSettingsExtensions
{
    #region Quiet
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rotate
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Rotate))]
    public static T SetRotate<T>(this T o, bool? v) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Rotate, v));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Rotate))]
    public static T ResetRotate<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Remove(() => o.Rotate));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Rotate))]
    public static T EnableRotate<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Rotate, true));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Rotate))]
    public static T DisableRotate<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Rotate, false));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Rotate))]
    public static T ToggleRotate<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Rotate, !o.Rotate));
    #endregion
    #region Worker
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Worker"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Worker))]
    public static T SetWorker<T>(this T o, string v) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Set(() => o.Worker, v));
    /// <inheritdoc cref="DockerSwarmJoinTokenSettings.Worker"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinTokenSettings), Property = nameof(DockerSwarmJoinTokenSettings.Worker))]
    public static T ResetWorker<T>(this T o) where T : DockerSwarmJoinTokenSettings => o.Modify(b => b.Remove(() => o.Worker));
    #endregion
}
#endregion
#region DockerNodeUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeUpdateSettingsExtensions
{
    #region Availability
    /// <inheritdoc cref="DockerNodeUpdateSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Availability))]
    public static T SetAvailability<T>(this T o, DockerAvailability v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.Availability, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Availability))]
    public static T ResetAvailability<T>(this T o) where T : DockerNodeUpdateSettings => o.Modify(b => b.Remove(() => o.Availability));
    #endregion
    #region LabelAdd
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T SetLabelAdd<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T SetLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T AddLabelAdd<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T AddLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T RemoveLabelAdd<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T RemoveLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelAdd))]
    public static T ClearLabelAdd<T>(this T o) where T : DockerNodeUpdateSettings => o.Modify(b => b.ClearCollection(() => o.LabelAdd));
    #endregion
    #region LabelRm
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T SetLabelRm<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T SetLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T AddLabelRm<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T AddLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T RemoveLabelRm<T>(this T o, params string[] v) where T : DockerNodeUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T RemoveLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerNodeUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.LabelRm))]
    public static T ClearLabelRm<T>(this T o) where T : DockerNodeUpdateSettings => o.Modify(b => b.ClearCollection(() => o.LabelRm));
    #endregion
    #region Role
    /// <inheritdoc cref="DockerNodeUpdateSettings.Role"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Role))]
    public static T SetRole<T>(this T o, DockerRole v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.Role, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.Role"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Role))]
    public static T ResetRole<T>(this T o) where T : DockerNodeUpdateSettings => o.Modify(b => b.Remove(() => o.Role));
    #endregion
    #region Node
    /// <inheritdoc cref="DockerNodeUpdateSettings.Node"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Node))]
    public static T SetNode<T>(this T o, string v) where T : DockerNodeUpdateSettings => o.Modify(b => b.Set(() => o.Node, v));
    /// <inheritdoc cref="DockerNodeUpdateSettings.Node"/>
    [Pure] [Builder(Type = typeof(DockerNodeUpdateSettings), Property = nameof(DockerNodeUpdateSettings.Node))]
    public static T ResetNode<T>(this T o) where T : DockerNodeUpdateSettings => o.Modify(b => b.Remove(() => o.Node));
    #endregion
}
#endregion
#region DockerTrustSignerAddSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustSignerAddSettingsExtensions
{
    #region Options
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Options))]
    public static T SetOptions<T>(this T o, string v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Set(() => o.Options, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Options))]
    public static T ResetOptions<T>(this T o) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Remove(() => o.Options));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Repositories
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T SetRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Set(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T SetRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.Set(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T AddRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.AddCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T AddRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.AddCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T RemoveRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.RemoveCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T RemoveRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerAddSettings => o.Modify(b => b.RemoveCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerAddSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerAddSettings), Property = nameof(DockerTrustSignerAddSettings.Repositories))]
    public static T ClearRepositories<T>(this T o) where T : DockerTrustSignerAddSettings => o.Modify(b => b.ClearCollection(() => o.Repositories));
    #endregion
}
#endregion
#region DockerSwarmUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmUpdateSettingsExtensions
{
    #region Autolock
    /// <inheritdoc cref="DockerSwarmUpdateSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.Autolock))]
    public static T SetAutolock<T>(this T o, bool? v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.Autolock, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.Autolock))]
    public static T ResetAutolock<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.Autolock));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.Autolock))]
    public static T EnableAutolock<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.Autolock, true));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.Autolock))]
    public static T DisableAutolock<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.Autolock, false));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.Autolock))]
    public static T ToggleAutolock<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.Autolock, !o.Autolock));
    #endregion
    #region CertExpiry
    /// <inheritdoc cref="DockerSwarmUpdateSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.CertExpiry))]
    public static T SetCertExpiry<T>(this T o, string v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.CertExpiry, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.CertExpiry))]
    public static T ResetCertExpiry<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.CertExpiry));
    #endregion
    #region DispatcherHeartbeat
    /// <inheritdoc cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.DispatcherHeartbeat))]
    public static T SetDispatcherHeartbeat<T>(this T o, string v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.DispatcherHeartbeat, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.DispatcherHeartbeat))]
    public static T ResetDispatcherHeartbeat<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.DispatcherHeartbeat));
    #endregion
    #region ExternalCa
    /// <inheritdoc cref="DockerSwarmUpdateSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.ExternalCa))]
    public static T SetExternalCa<T>(this T o, string v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.ExternalCa, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.ExternalCa))]
    public static T ResetExternalCa<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.ExternalCa));
    #endregion
    #region MaxSnapshots
    /// <inheritdoc cref="DockerSwarmUpdateSettings.MaxSnapshots"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.MaxSnapshots))]
    public static T SetMaxSnapshots<T>(this T o, int? v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.MaxSnapshots, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.MaxSnapshots"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.MaxSnapshots))]
    public static T ResetMaxSnapshots<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.MaxSnapshots));
    #endregion
    #region SnapshotInterval
    /// <inheritdoc cref="DockerSwarmUpdateSettings.SnapshotInterval"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.SnapshotInterval))]
    public static T SetSnapshotInterval<T>(this T o, int? v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.SnapshotInterval, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.SnapshotInterval"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.SnapshotInterval))]
    public static T ResetSnapshotInterval<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.SnapshotInterval));
    #endregion
    #region TaskHistoryLimit
    /// <inheritdoc cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.TaskHistoryLimit))]
    public static T SetTaskHistoryLimit<T>(this T o, long? v) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Set(() => o.TaskHistoryLimit, v));
    /// <inheritdoc cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUpdateSettings), Property = nameof(DockerSwarmUpdateSettings.TaskHistoryLimit))]
    public static T ResetTaskHistoryLimit<T>(this T o) where T : DockerSwarmUpdateSettings => o.Modify(b => b.Remove(() => o.TaskHistoryLimit));
    #endregion
}
#endregion
#region DockerServiceLogsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceLogsSettingsExtensions
{
    #region Details
    /// <inheritdoc cref="DockerServiceLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Details))]
    public static T SetDetails<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Details, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Details))]
    public static T ResetDetails<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Details));
    /// <inheritdoc cref="DockerServiceLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Details))]
    public static T EnableDetails<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Details, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Details))]
    public static T DisableDetails<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Details, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Details))]
    public static T ToggleDetails<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Details, !o.Details));
    #endregion
    #region Follow
    /// <inheritdoc cref="DockerServiceLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Follow))]
    public static T SetFollow<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Follow, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Follow))]
    public static T ResetFollow<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Follow));
    /// <inheritdoc cref="DockerServiceLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Follow))]
    public static T EnableFollow<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Follow, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Follow))]
    public static T DisableFollow<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Follow, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Follow))]
    public static T ToggleFollow<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Follow, !o.Follow));
    #endregion
    #region NoResolve
    /// <inheritdoc cref="DockerServiceLogsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoResolve))]
    public static T SetNoResolve<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoResolve, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoResolve))]
    public static T ResetNoResolve<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.NoResolve));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoResolve))]
    public static T EnableNoResolve<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoResolve, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoResolve))]
    public static T DisableNoResolve<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoResolve, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoResolve))]
    public static T ToggleNoResolve<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoResolve, !o.NoResolve));
    #endregion
    #region NoTaskIds
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTaskIds"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTaskIds))]
    public static T SetNoTaskIds<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTaskIds, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTaskIds"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTaskIds))]
    public static T ResetNoTaskIds<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.NoTaskIds));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTaskIds"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTaskIds))]
    public static T EnableNoTaskIds<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTaskIds, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTaskIds"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTaskIds))]
    public static T DisableNoTaskIds<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTaskIds, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTaskIds"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTaskIds))]
    public static T ToggleNoTaskIds<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTaskIds, !o.NoTaskIds));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Raw
    /// <inheritdoc cref="DockerServiceLogsSettings.Raw"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Raw))]
    public static T SetRaw<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Raw, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Raw"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Raw))]
    public static T ResetRaw<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Raw));
    /// <inheritdoc cref="DockerServiceLogsSettings.Raw"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Raw))]
    public static T EnableRaw<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Raw, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.Raw"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Raw))]
    public static T DisableRaw<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Raw, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.Raw"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Raw))]
    public static T ToggleRaw<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Raw, !o.Raw));
    #endregion
    #region Since
    /// <inheritdoc cref="DockerServiceLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Since))]
    public static T SetSince<T>(this T o, string v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Since, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Since))]
    public static T ResetSince<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Since));
    #endregion
    #region Tail
    /// <inheritdoc cref="DockerServiceLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Tail))]
    public static T SetTail<T>(this T o, string v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Tail, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Tail))]
    public static T ResetTail<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Tail));
    #endregion
    #region Timestamps
    /// <inheritdoc cref="DockerServiceLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Timestamps))]
    public static T SetTimestamps<T>(this T o, bool? v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Timestamps))]
    public static T ResetTimestamps<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Timestamps));
    /// <inheritdoc cref="DockerServiceLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Timestamps))]
    public static T EnableTimestamps<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, true));
    /// <inheritdoc cref="DockerServiceLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Timestamps))]
    public static T DisableTimestamps<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, false));
    /// <inheritdoc cref="DockerServiceLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Timestamps))]
    public static T ToggleTimestamps<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, !o.Timestamps));
    #endregion
    #region Service
    /// <inheritdoc cref="DockerServiceLogsSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Service))]
    public static T SetService<T>(this T o, string v) where T : DockerServiceLogsSettings => o.Modify(b => b.Set(() => o.Service, v));
    /// <inheritdoc cref="DockerServiceLogsSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceLogsSettings), Property = nameof(DockerServiceLogsSettings.Service))]
    public static T ResetService<T>(this T o) where T : DockerServiceLogsSettings => o.Modify(b => b.Remove(() => o.Service));
    #endregion
}
#endregion
#region DockerServiceLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerServiceLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerServiceLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerServiceLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerServiceLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerServiceLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerServiceLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerServiceLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerServiceLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerServiceLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceLsSettings), Property = nameof(DockerServiceLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerServiceLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerSwarmUnlockSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmUnlockSettingsExtensions
{
}
#endregion
#region DockerNetworkLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerNetworkLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerNetworkLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerNetworkLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerNetworkLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerNetworkLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerNetworkLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerNetworkLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerNetworkLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerNetworkLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerNetworkLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerNetworkLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerNetworkLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerNetworkLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerNetworkLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkLsSettings), Property = nameof(DockerNetworkLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerNetworkLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerPluginLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerPluginLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerPluginLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerPluginLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerPluginLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerPluginLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerPluginLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerPluginLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerPluginLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerPluginLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerPluginLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerPluginLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerPluginLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerPluginLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerPluginLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPluginLsSettings), Property = nameof(DockerPluginLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerPluginLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerPluginRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerPluginRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerPluginRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerPluginRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerPluginRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerPluginRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Plugins
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T SetPlugins<T>(this T o, params string[] v) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T SetPlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginRmSettings => o.Modify(b => b.Set(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T AddPlugins<T>(this T o, params string[] v) where T : DockerPluginRmSettings => o.Modify(b => b.AddCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T AddPlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginRmSettings => o.Modify(b => b.AddCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T RemovePlugins<T>(this T o, params string[] v) where T : DockerPluginRmSettings => o.Modify(b => b.RemoveCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T RemovePlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginRmSettings => o.Modify(b => b.RemoveCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginRmSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginRmSettings), Property = nameof(DockerPluginRmSettings.Plugins))]
    public static T ClearPlugins<T>(this T o) where T : DockerPluginRmSettings => o.Modify(b => b.ClearCollection(() => o.Plugins));
    #endregion
}
#endregion
#region DockerImageBuildSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageBuildSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerImageBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region BuildArg
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerImageBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.BuildArg))]
    public static T ClearBuildArg<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.BuildArg));
    #endregion
    #region CacheFrom
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CacheFrom))]
    public static T ClearCacheFrom<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.CacheFrom));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerImageBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Compress
    /// <inheritdoc cref="DockerImageBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Compress))]
    public static T SetCompress<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Compress, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Compress))]
    public static T ResetCompress<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Compress));
    /// <inheritdoc cref="DockerImageBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Compress))]
    public static T EnableCompress<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Compress, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Compress))]
    public static T DisableCompress<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Compress, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Compress))]
    public static T ToggleCompress<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Compress, !o.Compress));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerImageBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerImageBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerImageBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerImageBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerImageBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerImageBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerImageBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerImageBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerImageBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerImageBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerImageBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region File
    /// <inheritdoc cref="DockerImageBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerImageBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region ForceRm
    /// <inheritdoc cref="DockerImageBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ForceRm))]
    public static T SetForceRm<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, v));
    /// <inheritdoc cref="DockerImageBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ForceRm))]
    public static T ResetForceRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.ForceRm));
    /// <inheritdoc cref="DockerImageBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ForceRm))]
    public static T EnableForceRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, true));
    /// <inheritdoc cref="DockerImageBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ForceRm))]
    public static T DisableForceRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, false));
    /// <inheritdoc cref="DockerImageBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ForceRm))]
    public static T ToggleForceRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, !o.ForceRm));
    #endregion
    #region Iidfile
    /// <inheritdoc cref="DockerImageBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Iidfile))]
    public static T SetIidfile<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Iidfile, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Iidfile))]
    public static T ResetIidfile<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Iidfile));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerImageBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerImageBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerImageBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerImageBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerImageBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NoCache
    /// <inheritdoc cref="DockerImageBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.NoCache))]
    public static T SetNoCache<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.NoCache, v));
    /// <inheritdoc cref="DockerImageBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.NoCache))]
    public static T ResetNoCache<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.NoCache));
    /// <inheritdoc cref="DockerImageBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.NoCache))]
    public static T EnableNoCache<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.NoCache, true));
    /// <inheritdoc cref="DockerImageBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.NoCache))]
    public static T DisableNoCache<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.NoCache, false));
    /// <inheritdoc cref="DockerImageBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.NoCache))]
    public static T ToggleNoCache<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.NoCache, !o.NoCache));
    #endregion
    #region Output
    /// <inheritdoc cref="DockerImageBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerImageBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Progress
    /// <inheritdoc cref="DockerImageBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Progress))]
    public static T SetProgress<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Progress, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Progress))]
    public static T ResetProgress<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Progress));
    #endregion
    #region Pull
    /// <inheritdoc cref="DockerImageBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Pull))]
    public static T SetPull<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Pull, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Pull))]
    public static T ResetPull<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Pull));
    /// <inheritdoc cref="DockerImageBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Pull))]
    public static T EnablePull<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Pull, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Pull))]
    public static T DisablePull<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Pull, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Pull))]
    public static T TogglePull<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Pull, !o.Pull));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImageBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImageBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerImageBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerImageBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerImageBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerImageBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerImageBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerImageBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region Squash
    /// <inheritdoc cref="DockerImageBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Squash))]
    public static T SetSquash<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Squash, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Squash))]
    public static T ResetSquash<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Squash));
    /// <inheritdoc cref="DockerImageBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Squash))]
    public static T EnableSquash<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Squash, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Squash))]
    public static T DisableSquash<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Squash, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Squash))]
    public static T ToggleSquash<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Squash, !o.Squash));
    #endregion
    #region Ssh
    /// <inheritdoc cref="DockerImageBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Ssh))]
    public static T SetSsh<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Ssh, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Ssh))]
    public static T ResetSsh<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Ssh));
    #endregion
    #region Stream
    /// <inheritdoc cref="DockerImageBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Stream))]
    public static T SetStream<T>(this T o, bool? v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Stream, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Stream))]
    public static T ResetStream<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Stream));
    /// <inheritdoc cref="DockerImageBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Stream))]
    public static T EnableStream<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Stream, true));
    /// <inheritdoc cref="DockerImageBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Stream))]
    public static T DisableStream<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Stream, false));
    /// <inheritdoc cref="DockerImageBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Stream))]
    public static T ToggleStream<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Stream, !o.Stream));
    #endregion
    #region Tag
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T SetTag<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T SetTag<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T AddTag<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T AddTag<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, params string[] v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, IEnumerable<string> v) where T : DockerImageBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Tag))]
    public static T ClearTag<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.ClearCollection(() => o.Tag));
    #endregion
    #region Target
    /// <inheritdoc cref="DockerImageBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Target))]
    public static T SetTarget<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Target, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Target))]
    public static T ResetTarget<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Target));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerImageBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region Path
    /// <inheritdoc cref="DockerImageBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Path))]
    public static T SetPath<T>(this T o, string v) where T : DockerImageBuildSettings => o.Modify(b => b.Set(() => o.Path, v));
    /// <inheritdoc cref="DockerImageBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerImageBuildSettings), Property = nameof(DockerImageBuildSettings.Path))]
    public static T ResetPath<T>(this T o) where T : DockerImageBuildSettings => o.Modify(b => b.Remove(() => o.Path));
    #endregion
}
#endregion
#region DockerTrustRevokeSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustRevokeSettingsExtensions
{
    #region Yes
    /// <inheritdoc cref="DockerTrustRevokeSettings.Yes"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Yes))]
    public static T SetYes<T>(this T o, bool? v) where T : DockerTrustRevokeSettings => o.Modify(b => b.Set(() => o.Yes, v));
    /// <inheritdoc cref="DockerTrustRevokeSettings.Yes"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Yes))]
    public static T ResetYes<T>(this T o) where T : DockerTrustRevokeSettings => o.Modify(b => b.Remove(() => o.Yes));
    /// <inheritdoc cref="DockerTrustRevokeSettings.Yes"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Yes))]
    public static T EnableYes<T>(this T o) where T : DockerTrustRevokeSettings => o.Modify(b => b.Set(() => o.Yes, true));
    /// <inheritdoc cref="DockerTrustRevokeSettings.Yes"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Yes))]
    public static T DisableYes<T>(this T o) where T : DockerTrustRevokeSettings => o.Modify(b => b.Set(() => o.Yes, false));
    /// <inheritdoc cref="DockerTrustRevokeSettings.Yes"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Yes))]
    public static T ToggleYes<T>(this T o) where T : DockerTrustRevokeSettings => o.Modify(b => b.Set(() => o.Yes, !o.Yes));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerTrustRevokeSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerTrustRevokeSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerTrustRevokeSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerTrustRevokeSettings), Property = nameof(DockerTrustRevokeSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerTrustRevokeSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
}
#endregion
#region DockerRmiSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRmiSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerRmiSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerRmiSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerRmiSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerRmiSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerRmiSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region NoPrune
    /// <inheritdoc cref="DockerRmiSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.NoPrune))]
    public static T SetNoPrune<T>(this T o, bool? v) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.NoPrune, v));
    /// <inheritdoc cref="DockerRmiSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.NoPrune))]
    public static T ResetNoPrune<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Remove(() => o.NoPrune));
    /// <inheritdoc cref="DockerRmiSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.NoPrune))]
    public static T EnableNoPrune<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.NoPrune, true));
    /// <inheritdoc cref="DockerRmiSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.NoPrune))]
    public static T DisableNoPrune<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.NoPrune, false));
    /// <inheritdoc cref="DockerRmiSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.NoPrune))]
    public static T ToggleNoPrune<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.NoPrune, !o.NoPrune));
    #endregion
    #region Images
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerRmiSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerRmiSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerRmiSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerRmiSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerRmiSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerRmiSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerRmiSettings), Property = nameof(DockerRmiSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerRmiSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerNetworkRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkRmSettingsExtensions
{
    #region Networks
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T SetNetworks<T>(this T o, params string[] v) where T : DockerNetworkRmSettings => o.Modify(b => b.Set(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T SetNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkRmSettings => o.Modify(b => b.Set(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T AddNetworks<T>(this T o, params string[] v) where T : DockerNetworkRmSettings => o.Modify(b => b.AddCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T AddNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkRmSettings => o.Modify(b => b.AddCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T RemoveNetworks<T>(this T o, params string[] v) where T : DockerNetworkRmSettings => o.Modify(b => b.RemoveCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T RemoveNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkRmSettings => o.Modify(b => b.RemoveCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkRmSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkRmSettings), Property = nameof(DockerNetworkRmSettings.Networks))]
    public static T ClearNetworks<T>(this T o) where T : DockerNetworkRmSettings => o.Modify(b => b.ClearCollection(() => o.Networks));
    #endregion
}
#endregion
#region DockerVersionSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVersionSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerVersionSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVersionSettings), Property = nameof(DockerVersionSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerVersionSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerVersionSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVersionSettings), Property = nameof(DockerVersionSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerVersionSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Kubeconfig
    /// <inheritdoc cref="DockerVersionSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerVersionSettings), Property = nameof(DockerVersionSettings.Kubeconfig))]
    public static T SetKubeconfig<T>(this T o, string v) where T : DockerVersionSettings => o.Modify(b => b.Set(() => o.Kubeconfig, v));
    /// <inheritdoc cref="DockerVersionSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerVersionSettings), Property = nameof(DockerVersionSettings.Kubeconfig))]
    public static T ResetKubeconfig<T>(this T o) where T : DockerVersionSettings => o.Modify(b => b.Remove(() => o.Kubeconfig));
    #endregion
}
#endregion
#region DockerSecretCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSecretCreateSettingsExtensions
{
    #region Driver
    /// <inheritdoc cref="DockerSecretCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Driver))]
    public static T SetDriver<T>(this T o, string v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.Driver, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Driver))]
    public static T ResetDriver<T>(this T o) where T : DockerSecretCreateSettings => o.Modify(b => b.Remove(() => o.Driver));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerSecretCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerSecretCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerSecretCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerSecretCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerSecretCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region TemplateDriver
    /// <inheritdoc cref="DockerSecretCreateSettings.TemplateDriver"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.TemplateDriver))]
    public static T SetTemplateDriver<T>(this T o, string v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.TemplateDriver, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.TemplateDriver"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.TemplateDriver))]
    public static T ResetTemplateDriver<T>(this T o) where T : DockerSecretCreateSettings => o.Modify(b => b.Remove(() => o.TemplateDriver));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerSecretCreateSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerSecretCreateSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region File
    /// <inheritdoc cref="DockerSecretCreateSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerSecretCreateSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerSecretCreateSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerSecretCreateSettings), Property = nameof(DockerSecretCreateSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerSecretCreateSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
}
#endregion
#region DockerServiceRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceRmSettingsExtensions
{
    #region Services
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T SetServices<T>(this T o, params string[] v) where T : DockerServiceRmSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T SetServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceRmSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T AddServices<T>(this T o, params string[] v) where T : DockerServiceRmSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T AddServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceRmSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T RemoveServices<T>(this T o, params string[] v) where T : DockerServiceRmSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T RemoveServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceRmSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceRmSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceRmSettings), Property = nameof(DockerServiceRmSettings.Services))]
    public static T ClearServices<T>(this T o) where T : DockerServiceRmSettings => o.Modify(b => b.ClearCollection(() => o.Services));
    #endregion
}
#endregion
#region DockerTrustKeyLoadSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustKeyLoadSettingsExtensions
{
    #region Name
    /// <inheritdoc cref="DockerTrustKeyLoadSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyLoadSettings), Property = nameof(DockerTrustKeyLoadSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerTrustKeyLoadSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerTrustKeyLoadSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyLoadSettings), Property = nameof(DockerTrustKeyLoadSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerTrustKeyLoadSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Keyfile
    /// <inheritdoc cref="DockerTrustKeyLoadSettings.Keyfile"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyLoadSettings), Property = nameof(DockerTrustKeyLoadSettings.Keyfile))]
    public static T SetKeyfile<T>(this T o, string v) where T : DockerTrustKeyLoadSettings => o.Modify(b => b.Set(() => o.Keyfile, v));
    /// <inheritdoc cref="DockerTrustKeyLoadSettings.Keyfile"/>
    [Pure] [Builder(Type = typeof(DockerTrustKeyLoadSettings), Property = nameof(DockerTrustKeyLoadSettings.Keyfile))]
    public static T ResetKeyfile<T>(this T o) where T : DockerTrustKeyLoadSettings => o.Modify(b => b.Remove(() => o.Keyfile));
    #endregion
}
#endregion
#region DockerSecretRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSecretRmSettingsExtensions
{
    #region Secrets
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T SetSecrets<T>(this T o, params string[] v) where T : DockerSecretRmSettings => o.Modify(b => b.Set(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T SetSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretRmSettings => o.Modify(b => b.Set(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T AddSecrets<T>(this T o, params string[] v) where T : DockerSecretRmSettings => o.Modify(b => b.AddCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T AddSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretRmSettings => o.Modify(b => b.AddCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T RemoveSecrets<T>(this T o, params string[] v) where T : DockerSecretRmSettings => o.Modify(b => b.RemoveCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T RemoveSecrets<T>(this T o, IEnumerable<string> v) where T : DockerSecretRmSettings => o.Modify(b => b.RemoveCollection(() => o.Secrets, v));
    /// <inheritdoc cref="DockerSecretRmSettings.Secrets"/>
    [Pure] [Builder(Type = typeof(DockerSecretRmSettings), Property = nameof(DockerSecretRmSettings.Secrets))]
    public static T ClearSecrets<T>(this T o) where T : DockerSecretRmSettings => o.Modify(b => b.ClearCollection(() => o.Secrets));
    #endregion
}
#endregion
#region DockerImageInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerImageInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerImageInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerImageInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Images
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerImageInspectSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerImageInspectSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerImageInspectSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerImageInspectSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerImageInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerImageInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageInspectSettings), Property = nameof(DockerImageInspectSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerImageInspectSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerImageSaveSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageSaveSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="DockerImageSaveSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerImageSaveSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerImageSaveSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Images
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerImageSaveSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerImageSaveSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerImageSaveSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerImageSaveSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerImageSaveSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerImageSaveSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageSaveSettings), Property = nameof(DockerImageSaveSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerImageSaveSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerTrustKeySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustKeySettingsExtensions
{
}
#endregion
#region DockerContainerAttachSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerAttachSettingsExtensions
{
    #region DetachKeys
    /// <inheritdoc cref="DockerContainerAttachSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerContainerAttachSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region NoStdin
    /// <inheritdoc cref="DockerContainerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.NoStdin))]
    public static T SetNoStdin<T>(this T o, bool? v) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, v));
    /// <inheritdoc cref="DockerContainerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.NoStdin))]
    public static T ResetNoStdin<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Remove(() => o.NoStdin));
    /// <inheritdoc cref="DockerContainerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.NoStdin))]
    public static T EnableNoStdin<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, true));
    /// <inheritdoc cref="DockerContainerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.NoStdin))]
    public static T DisableNoStdin<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, false));
    /// <inheritdoc cref="DockerContainerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.NoStdin))]
    public static T ToggleNoStdin<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, !o.NoStdin));
    #endregion
    #region SigProxy
    /// <inheritdoc cref="DockerContainerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.SigProxy))]
    public static T SetSigProxy<T>(this T o, bool? v) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, v));
    /// <inheritdoc cref="DockerContainerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.SigProxy))]
    public static T ResetSigProxy<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Remove(() => o.SigProxy));
    /// <inheritdoc cref="DockerContainerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.SigProxy))]
    public static T EnableSigProxy<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, true));
    /// <inheritdoc cref="DockerContainerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.SigProxy))]
    public static T DisableSigProxy<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, false));
    /// <inheritdoc cref="DockerContainerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.SigProxy))]
    public static T ToggleSigProxy<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, !o.SigProxy));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerContainerAttachSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerAttachSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerAttachSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerAttachSettings), Property = nameof(DockerContainerAttachSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerAttachSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerContextCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextCreateSettingsExtensions
{
    #region DefaultStackOrchestrator
    /// <inheritdoc cref="DockerContextCreateSettings.DefaultStackOrchestrator"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.DefaultStackOrchestrator))]
    public static T SetDefaultStackOrchestrator<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.DefaultStackOrchestrator, v));
    /// <inheritdoc cref="DockerContextCreateSettings.DefaultStackOrchestrator"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.DefaultStackOrchestrator))]
    public static T ResetDefaultStackOrchestrator<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.DefaultStackOrchestrator));
    #endregion
    #region Description
    /// <inheritdoc cref="DockerContextCreateSettings.Description"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Description))]
    public static T SetDescription<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.Description, v));
    /// <inheritdoc cref="DockerContextCreateSettings.Description"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Description))]
    public static T ResetDescription<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.Description));
    #endregion
    #region Docker
    /// <inheritdoc cref="DockerContextCreateSettings.Docker"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Docker))]
    public static T SetDocker<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.Docker, v));
    /// <inheritdoc cref="DockerContextCreateSettings.Docker"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Docker))]
    public static T ResetDocker<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.Docker));
    #endregion
    #region From
    /// <inheritdoc cref="DockerContextCreateSettings.From"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.From))]
    public static T SetFrom<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.From, v));
    /// <inheritdoc cref="DockerContextCreateSettings.From"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.From))]
    public static T ResetFrom<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.From));
    #endregion
    #region Kubernetes
    /// <inheritdoc cref="DockerContextCreateSettings.Kubernetes"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Kubernetes))]
    public static T SetKubernetes<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.Kubernetes, v));
    /// <inheritdoc cref="DockerContextCreateSettings.Kubernetes"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Kubernetes))]
    public static T ResetKubernetes<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.Kubernetes));
    #endregion
    #region Context
    /// <inheritdoc cref="DockerContextCreateSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextCreateSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextCreateSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextCreateSettings), Property = nameof(DockerContextCreateSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextCreateSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
}
#endregion
#region DockerConfigCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerConfigCreateSettingsExtensions
{
    #region Label
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerConfigCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerConfigCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerConfigCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerConfigCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerConfigCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerConfigCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerConfigCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region TemplateDriver
    /// <inheritdoc cref="DockerConfigCreateSettings.TemplateDriver"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.TemplateDriver))]
    public static T SetTemplateDriver<T>(this T o, string v) where T : DockerConfigCreateSettings => o.Modify(b => b.Set(() => o.TemplateDriver, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.TemplateDriver"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.TemplateDriver))]
    public static T ResetTemplateDriver<T>(this T o) where T : DockerConfigCreateSettings => o.Modify(b => b.Remove(() => o.TemplateDriver));
    #endregion
    #region Config
    /// <inheritdoc cref="DockerConfigCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Config))]
    public static T SetConfig<T>(this T o, string v) where T : DockerConfigCreateSettings => o.Modify(b => b.Set(() => o.Config, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.Config))]
    public static T ResetConfig<T>(this T o) where T : DockerConfigCreateSettings => o.Modify(b => b.Remove(() => o.Config));
    #endregion
    #region File
    /// <inheritdoc cref="DockerConfigCreateSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerConfigCreateSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerConfigCreateSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerConfigCreateSettings), Property = nameof(DockerConfigCreateSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerConfigCreateSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
}
#endregion
#region DockerVolumeInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumeInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerVolumeInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerVolumeInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerVolumeInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Volumes
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T SetVolumes<T>(this T o, params string[] v) where T : DockerVolumeInspectSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T SetVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeInspectSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T AddVolumes<T>(this T o, params string[] v) where T : DockerVolumeInspectSettings => o.Modify(b => b.AddCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T AddVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeInspectSettings => o.Modify(b => b.AddCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T RemoveVolumes<T>(this T o, params string[] v) where T : DockerVolumeInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T RemoveVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeInspectSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeInspectSettings), Property = nameof(DockerVolumeInspectSettings.Volumes))]
    public static T ClearVolumes<T>(this T o) where T : DockerVolumeInspectSettings => o.Modify(b => b.ClearCollection(() => o.Volumes));
    #endregion
}
#endregion
#region DockerContainerStopSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerStopSettingsExtensions
{
    #region Time
    /// <inheritdoc cref="DockerContainerStopSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Time))]
    public static T SetTime<T>(this T o, int? v) where T : DockerContainerStopSettings => o.Modify(b => b.Set(() => o.Time, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Time))]
    public static T ResetTime<T>(this T o) where T : DockerContainerStopSettings => o.Modify(b => b.Remove(() => o.Time));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerStopSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStopSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerStopSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStopSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerStopSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStopSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStopSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStopSettings), Property = nameof(DockerContainerStopSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerStopSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerNetworkPruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkPruneSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerNetworkPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerNetworkPruneSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerNetworkPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerNetworkPruneSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerNetworkPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerNetworkPruneSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerNetworkPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerNetworkPruneSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerNetworkPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerNetworkPruneSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerNetworkPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerNetworkPruneSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerNetworkPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkPruneSettings), Property = nameof(DockerNetworkPruneSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerNetworkPruneSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
}
#endregion
#region DockerManifestInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerManifestInspectSettingsExtensions
{
    #region Insecure
    /// <inheritdoc cref="DockerManifestInspectSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Insecure))]
    public static T SetInsecure<T>(this T o, bool? v) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Insecure, v));
    /// <inheritdoc cref="DockerManifestInspectSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Insecure))]
    public static T ResetInsecure<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Remove(() => o.Insecure));
    /// <inheritdoc cref="DockerManifestInspectSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Insecure))]
    public static T EnableInsecure<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Insecure, true));
    /// <inheritdoc cref="DockerManifestInspectSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Insecure))]
    public static T DisableInsecure<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Insecure, false));
    /// <inheritdoc cref="DockerManifestInspectSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Insecure))]
    public static T ToggleInsecure<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Insecure, !o.Insecure));
    #endregion
    #region Verbose
    /// <inheritdoc cref="DockerManifestInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="DockerManifestInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="DockerManifestInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="DockerManifestInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="DockerManifestInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
    #region ManifestList
    /// <inheritdoc cref="DockerManifestInspectSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.ManifestList))]
    public static T SetManifestList<T>(this T o, string v) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.ManifestList, v));
    /// <inheritdoc cref="DockerManifestInspectSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.ManifestList))]
    public static T ResetManifestList<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Remove(() => o.ManifestList));
    #endregion
    #region Manifest
    /// <inheritdoc cref="DockerManifestInspectSettings.Manifest"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Manifest))]
    public static T SetManifest<T>(this T o, string v) where T : DockerManifestInspectSettings => o.Modify(b => b.Set(() => o.Manifest, v));
    /// <inheritdoc cref="DockerManifestInspectSettings.Manifest"/>
    [Pure] [Builder(Type = typeof(DockerManifestInspectSettings), Property = nameof(DockerManifestInspectSettings.Manifest))]
    public static T ResetManifest<T>(this T o) where T : DockerManifestInspectSettings => o.Modify(b => b.Remove(() => o.Manifest));
    #endregion
}
#endregion
#region DockerInfoSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerInfoSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerInfoSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerInfoSettings), Property = nameof(DockerInfoSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerInfoSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerInfoSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerInfoSettings), Property = nameof(DockerInfoSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerInfoSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
}
#endregion
#region DockerCommitSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCommitSettingsExtensions
{
    #region Author
    /// <inheritdoc cref="DockerCommitSettings.Author"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Author))]
    public static T SetAuthor<T>(this T o, string v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Author, v));
    /// <inheritdoc cref="DockerCommitSettings.Author"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Author))]
    public static T ResetAuthor<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Remove(() => o.Author));
    #endregion
    #region Change
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T SetChange<T>(this T o, params string[] v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T SetChange<T>(this T o, IEnumerable<string> v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T AddChange<T>(this T o, params string[] v) where T : DockerCommitSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T AddChange<T>(this T o, IEnumerable<string> v) where T : DockerCommitSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T RemoveChange<T>(this T o, params string[] v) where T : DockerCommitSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T RemoveChange<T>(this T o, IEnumerable<string> v) where T : DockerCommitSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Change))]
    public static T ClearChange<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.ClearCollection(() => o.Change));
    #endregion
    #region Message
    /// <inheritdoc cref="DockerCommitSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Message))]
    public static T SetMessage<T>(this T o, string v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Message, v));
    /// <inheritdoc cref="DockerCommitSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Message))]
    public static T ResetMessage<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Remove(() => o.Message));
    #endregion
    #region Pause
    /// <inheritdoc cref="DockerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Pause))]
    public static T SetPause<T>(this T o, bool? v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Pause, v));
    /// <inheritdoc cref="DockerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Pause))]
    public static T ResetPause<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Remove(() => o.Pause));
    /// <inheritdoc cref="DockerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Pause))]
    public static T EnablePause<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Pause, true));
    /// <inheritdoc cref="DockerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Pause))]
    public static T DisablePause<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Pause, false));
    /// <inheritdoc cref="DockerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Pause))]
    public static T TogglePause<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Pause, !o.Pause));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerCommitSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerCommitSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerCommitSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerCommitSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerCommitSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerCommitSettings), Property = nameof(DockerCommitSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerCommitSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerStackDeploySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackDeploySettingsExtensions
{
    #region BundleFile
    /// <inheritdoc cref="DockerStackDeploySettings.BundleFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.BundleFile))]
    public static T SetBundleFile<T>(this T o, string v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.BundleFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.BundleFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.BundleFile))]
    public static T ResetBundleFile<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.BundleFile));
    #endregion
    #region ComposeFile
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T SetComposeFile<T>(this T o, params string[] v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T SetComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T AddComposeFile<T>(this T o, params string[] v) where T : DockerStackDeploySettings => o.Modify(b => b.AddCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T AddComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerStackDeploySettings => o.Modify(b => b.AddCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T RemoveComposeFile<T>(this T o, params string[] v) where T : DockerStackDeploySettings => o.Modify(b => b.RemoveCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T RemoveComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerStackDeploySettings => o.Modify(b => b.RemoveCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ComposeFile))]
    public static T ClearComposeFile<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.ClearCollection(() => o.ComposeFile));
    #endregion
    #region Namespace
    /// <inheritdoc cref="DockerStackDeploySettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackDeploySettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Prune
    /// <inheritdoc cref="DockerStackDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Prune))]
    public static T SetPrune<T>(this T o, bool? v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Prune, v));
    /// <inheritdoc cref="DockerStackDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Prune))]
    public static T ResetPrune<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.Prune));
    /// <inheritdoc cref="DockerStackDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Prune))]
    public static T EnablePrune<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Prune, true));
    /// <inheritdoc cref="DockerStackDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Prune))]
    public static T DisablePrune<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Prune, false));
    /// <inheritdoc cref="DockerStackDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Prune))]
    public static T TogglePrune<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Prune, !o.Prune));
    #endregion
    #region ResolveImage
    /// <inheritdoc cref="DockerStackDeploySettings.ResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ResolveImage))]
    public static T SetResolveImage<T>(this T o, DockerResolveImage v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.ResolveImage, v));
    /// <inheritdoc cref="DockerStackDeploySettings.ResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.ResolveImage))]
    public static T ResetResolveImage<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.ResolveImage));
    #endregion
    #region WithRegistryAuth
    /// <inheritdoc cref="DockerStackDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.WithRegistryAuth))]
    public static T SetWithRegistryAuth<T>(this T o, bool? v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, v));
    /// <inheritdoc cref="DockerStackDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.WithRegistryAuth))]
    public static T ResetWithRegistryAuth<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.WithRegistryAuth));
    /// <inheritdoc cref="DockerStackDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.WithRegistryAuth))]
    public static T EnableWithRegistryAuth<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, true));
    /// <inheritdoc cref="DockerStackDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.WithRegistryAuth))]
    public static T DisableWithRegistryAuth<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, false));
    /// <inheritdoc cref="DockerStackDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.WithRegistryAuth))]
    public static T ToggleWithRegistryAuth<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, !o.WithRegistryAuth));
    #endregion
    #region Stack
    /// <inheritdoc cref="DockerStackDeploySettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Stack))]
    public static T SetStack<T>(this T o, string v) where T : DockerStackDeploySettings => o.Modify(b => b.Set(() => o.Stack, v));
    /// <inheritdoc cref="DockerStackDeploySettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackDeploySettings), Property = nameof(DockerStackDeploySettings.Stack))]
    public static T ResetStack<T>(this T o) where T : DockerStackDeploySettings => o.Modify(b => b.Remove(() => o.Stack));
    #endregion
}
#endregion
#region DockerServiceScaleSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceScaleSettingsExtensions
{
    #region ServiceReplicas
    /// <inheritdoc cref="DockerServiceScaleSettings.ServiceReplicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceScaleSettings), Property = nameof(DockerServiceScaleSettings.ServiceReplicas))]
    public static T SetServiceReplicas<T>(this T o, IDictionary<string, string> v) where T : DockerServiceScaleSettings => o.Modify(b => b.Set(() => o.ServiceReplicas, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerServiceScaleSettings.ServiceReplicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceScaleSettings), Property = nameof(DockerServiceScaleSettings.ServiceReplicas))]
    public static T SetServiceReplica<T>(this T o, string k, string v) where T : DockerServiceScaleSettings => o.Modify(b => b.SetDictionary(() => o.ServiceReplicas, k, v));
    /// <inheritdoc cref="DockerServiceScaleSettings.ServiceReplicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceScaleSettings), Property = nameof(DockerServiceScaleSettings.ServiceReplicas))]
    public static T AddServiceReplica<T>(this T o, string k, string v) where T : DockerServiceScaleSettings => o.Modify(b => b.AddDictionary(() => o.ServiceReplicas, k, v));
    /// <inheritdoc cref="DockerServiceScaleSettings.ServiceReplicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceScaleSettings), Property = nameof(DockerServiceScaleSettings.ServiceReplicas))]
    public static T RemoveServiceReplica<T>(this T o, string k) where T : DockerServiceScaleSettings => o.Modify(b => b.RemoveDictionary(() => o.ServiceReplicas, k));
    /// <inheritdoc cref="DockerServiceScaleSettings.ServiceReplicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceScaleSettings), Property = nameof(DockerServiceScaleSettings.ServiceReplicas))]
    public static T ClearServiceReplicas<T>(this T o) where T : DockerServiceScaleSettings => o.Modify(b => b.ClearDictionary(() => o.ServiceReplicas));
    #endregion
}
#endregion
#region DockerRunSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRunSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region Attach
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T SetAttach<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T SetAttach<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T AddAttach<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T AddAttach<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T RemoveAttach<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T RemoveAttach<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Attach))]
    public static T ClearAttach<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Attach));
    #endregion
    #region BlkioWeight
    /// <inheritdoc cref="DockerRunSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region BlkioWeightDevice
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.BlkioWeightDevice))]
    public static T ClearBlkioWeightDevice<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.BlkioWeightDevice));
    #endregion
    #region CapAdd
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapAdd))]
    public static T ClearCapAdd<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.CapAdd));
    #endregion
    #region CapDrop
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CapDrop))]
    public static T ClearCapDrop<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.CapDrop));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerRunSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerRunSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Cidfile
    /// <inheritdoc cref="DockerRunSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Cidfile))]
    public static T SetCidfile<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Cidfile, v));
    /// <inheritdoc cref="DockerRunSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Cidfile))]
    public static T ResetCidfile<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Cidfile));
    #endregion
    #region CpuCount
    /// <inheritdoc cref="DockerRunSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuCount))]
    public static T SetCpuCount<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuCount, v));
    /// <inheritdoc cref="DockerRunSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuCount))]
    public static T ResetCpuCount<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuCount));
    #endregion
    #region CpuPercent
    /// <inheritdoc cref="DockerRunSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuPercent))]
    public static T SetCpuPercent<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuPercent, v));
    /// <inheritdoc cref="DockerRunSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuPercent))]
    public static T ResetCpuPercent<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuPercent));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerRunSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerRunSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerRunSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerRunSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerRunSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerRunSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerRunSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerRunSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerRunSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerRunSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerRunSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerRunSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerRunSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerRunSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerRunSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerRunSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region Detach
    /// <inheritdoc cref="DockerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerRunSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerRunSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Device
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T SetDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T SetDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T AddDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T AddDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T RemoveDevice<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T RemoveDevice<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Device))]
    public static T ClearDevice<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Device));
    #endregion
    #region DeviceCgroupRule
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceCgroupRule))]
    public static T ClearDeviceCgroupRule<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceCgroupRule));
    #endregion
    #region DeviceReadBps
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadBps))]
    public static T ClearDeviceReadBps<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadBps));
    #endregion
    #region DeviceReadIops
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceReadIops))]
    public static T ClearDeviceReadIops<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadIops));
    #endregion
    #region DeviceWriteBps
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteBps))]
    public static T ClearDeviceWriteBps<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteBps));
    #endregion
    #region DeviceWriteIops
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DeviceWriteIops))]
    public static T ClearDeviceWriteIops<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteIops));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Dns
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T SetDns<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T SetDns<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T AddDns<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T AddDns<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T RemoveDns<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T RemoveDns<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Dns))]
    public static T ClearDns<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Dns));
    #endregion
    #region DnsOpt
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOpt))]
    public static T ClearDnsOpt<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsOpt));
    #endregion
    #region DnsOption
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsOption))]
    public static T ClearDnsOption<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsOption));
    #endregion
    #region DnsSearch
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.DnsSearch))]
    public static T ClearDnsSearch<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearch));
    #endregion
    #region Domainname
    /// <inheritdoc cref="DockerRunSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Domainname))]
    public static T SetDomainname<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Domainname, v));
    /// <inheritdoc cref="DockerRunSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Domainname))]
    public static T ResetDomainname<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Domainname));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerRunSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerRunSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region EnvFile
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.EnvFile))]
    public static T ClearEnvFile<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.EnvFile));
    #endregion
    #region Expose
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T SetExpose<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T SetExpose<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T AddExpose<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T AddExpose<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T RemoveExpose<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T RemoveExpose<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Expose))]
    public static T ClearExpose<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Expose));
    #endregion
    #region Gpus
    /// <inheritdoc cref="DockerRunSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Gpus))]
    public static T SetGpus<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Gpus, v));
    /// <inheritdoc cref="DockerRunSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Gpus))]
    public static T ResetGpus<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Gpus));
    #endregion
    #region GroupAdd
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.GroupAdd))]
    public static T ClearGroupAdd<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.GroupAdd));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerRunSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerRunSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerRunSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerRunSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerRunSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerRunSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerRunSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerRunSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerRunSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerRunSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region Help
    /// <inheritdoc cref="DockerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Help))]
    public static T SetHelp<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Help, v));
    /// <inheritdoc cref="DockerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Help))]
    public static T ResetHelp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Help));
    /// <inheritdoc cref="DockerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Help))]
    public static T EnableHelp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Help, true));
    /// <inheritdoc cref="DockerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Help))]
    public static T DisableHelp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Help, false));
    /// <inheritdoc cref="DockerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Help))]
    public static T ToggleHelp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Help, !o.Help));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerRunSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerRunSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region IoMaxbandwidth
    /// <inheritdoc cref="DockerRunSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.IoMaxbandwidth))]
    public static T SetIoMaxbandwidth<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.IoMaxbandwidth, v));
    /// <inheritdoc cref="DockerRunSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.IoMaxbandwidth))]
    public static T ResetIoMaxbandwidth<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.IoMaxbandwidth));
    #endregion
    #region IoMaxiops
    /// <inheritdoc cref="DockerRunSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.IoMaxiops))]
    public static T SetIoMaxiops<T>(this T o, int? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.IoMaxiops, v));
    /// <inheritdoc cref="DockerRunSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.IoMaxiops))]
    public static T ResetIoMaxiops<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.IoMaxiops));
    #endregion
    #region Ip
    /// <inheritdoc cref="DockerRunSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ip))]
    public static T SetIp<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Ip, v));
    /// <inheritdoc cref="DockerRunSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ip))]
    public static T ResetIp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Ip));
    #endregion
    #region Ip6
    /// <inheritdoc cref="DockerRunSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ip6))]
    public static T SetIp6<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Ip6, v));
    /// <inheritdoc cref="DockerRunSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ip6))]
    public static T ResetIp6<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Ip6));
    #endregion
    #region Ipc
    /// <inheritdoc cref="DockerRunSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ipc))]
    public static T SetIpc<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Ipc, v));
    /// <inheritdoc cref="DockerRunSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ipc))]
    public static T ResetIpc<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Ipc));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerRunSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerRunSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerRunSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerRunSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region LabelFile
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LabelFile))]
    public static T ClearLabelFile<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.LabelFile));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T SetLink<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T SetLink<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T AddLink<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T AddLink<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T RemoveLink<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T RemoveLink<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Link))]
    public static T ClearLink<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Link));
    #endregion
    #region LinkLocalIp
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LinkLocalIp))]
    public static T ClearLinkLocalIp<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.LinkLocalIp));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerRunSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerRunSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region MacAddress
    /// <inheritdoc cref="DockerRunSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MacAddress))]
    public static T SetMacAddress<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.MacAddress, v));
    /// <inheritdoc cref="DockerRunSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MacAddress))]
    public static T ResetMacAddress<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.MacAddress));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerRunSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerRunSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerRunSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerRunSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerRunSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerRunSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region MemorySwappiness
    /// <inheritdoc cref="DockerRunSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemorySwappiness))]
    public static T SetMemorySwappiness<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.MemorySwappiness, v));
    /// <inheritdoc cref="DockerRunSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.MemorySwappiness))]
    public static T ResetMemorySwappiness<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.MemorySwappiness));
    #endregion
    #region Mount
    /// <inheritdoc cref="DockerRunSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Mount))]
    public static T SetMount<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Mount, v));
    /// <inheritdoc cref="DockerRunSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Mount))]
    public static T ResetMount<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Mount));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerRunSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerRunSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Net
    /// <inheritdoc cref="DockerRunSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Net))]
    public static T SetNet<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Net, v));
    /// <inheritdoc cref="DockerRunSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Net))]
    public static T ResetNet<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Net));
    #endregion
    #region NetAlias
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetAlias))]
    public static T ClearNetAlias<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.NetAlias));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerRunSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerRunSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NetworkAlias
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NetworkAlias))]
    public static T ClearNetworkAlias<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.NetworkAlias));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region OomKillDisable
    /// <inheritdoc cref="DockerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomKillDisable))]
    public static T SetOomKillDisable<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, v));
    /// <inheritdoc cref="DockerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomKillDisable))]
    public static T ResetOomKillDisable<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.OomKillDisable));
    /// <inheritdoc cref="DockerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomKillDisable))]
    public static T EnableOomKillDisable<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, true));
    /// <inheritdoc cref="DockerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomKillDisable))]
    public static T DisableOomKillDisable<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, false));
    /// <inheritdoc cref="DockerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomKillDisable))]
    public static T ToggleOomKillDisable<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, !o.OomKillDisable));
    #endregion
    #region OomScoreAdj
    /// <inheritdoc cref="DockerRunSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomScoreAdj))]
    public static T SetOomScoreAdj<T>(this T o, int? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.OomScoreAdj, v));
    /// <inheritdoc cref="DockerRunSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.OomScoreAdj))]
    public static T ResetOomScoreAdj<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.OomScoreAdj));
    #endregion
    #region Pid
    /// <inheritdoc cref="DockerRunSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Pid))]
    public static T SetPid<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Pid, v));
    /// <inheritdoc cref="DockerRunSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Pid))]
    public static T ResetPid<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Pid));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerRunSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerRunSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerRunSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerRunSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Publish
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T SetPublish<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T SetPublish<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T AddPublish<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T AddPublish<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T RemovePublish<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T RemovePublish<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Publish))]
    public static T ClearPublish<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Publish));
    #endregion
    #region PublishAll
    /// <inheritdoc cref="DockerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PublishAll))]
    public static T SetPublishAll<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, v));
    /// <inheritdoc cref="DockerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PublishAll))]
    public static T ResetPublishAll<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.PublishAll));
    /// <inheritdoc cref="DockerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PublishAll))]
    public static T EnablePublishAll<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, true));
    /// <inheritdoc cref="DockerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PublishAll))]
    public static T DisablePublishAll<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, false));
    /// <inheritdoc cref="DockerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.PublishAll))]
    public static T TogglePublishAll<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, !o.PublishAll));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerRunSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerRunSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Runtime
    /// <inheritdoc cref="DockerRunSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="DockerRunSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerRunSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerRunSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region SigProxy
    /// <inheritdoc cref="DockerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SigProxy))]
    public static T SetSigProxy<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, v));
    /// <inheritdoc cref="DockerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SigProxy))]
    public static T ResetSigProxy<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.SigProxy));
    /// <inheritdoc cref="DockerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SigProxy))]
    public static T EnableSigProxy<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, true));
    /// <inheritdoc cref="DockerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SigProxy))]
    public static T DisableSigProxy<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, false));
    /// <inheritdoc cref="DockerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.SigProxy))]
    public static T ToggleSigProxy<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, !o.SigProxy));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerRunSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerRunSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region StopTimeout
    /// <inheritdoc cref="DockerRunSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StopTimeout))]
    public static T SetStopTimeout<T>(this T o, int? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.StopTimeout, v));
    /// <inheritdoc cref="DockerRunSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StopTimeout))]
    public static T ResetStopTimeout<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.StopTimeout));
    #endregion
    #region StorageOpt
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.StorageOpt))]
    public static T ClearStorageOpt<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.StorageOpt));
    #endregion
    #region Sysctl
    /// <inheritdoc cref="DockerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, IDictionary<string, string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Sysctl, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, string k, string v) where T : DockerRunSettings => o.Modify(b => b.SetDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, string k, string v) where T : DockerRunSettings => o.Modify(b => b.AddDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, string k) where T : DockerRunSettings => o.Modify(b => b.RemoveDictionary(() => o.Sysctl, k));
    /// <inheritdoc cref="DockerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Sysctl))]
    public static T ClearSysctl<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearDictionary(() => o.Sysctl));
    #endregion
    #region Tmpfs
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tmpfs))]
    public static T ClearTmpfs<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Tmpfs));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerRunSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerRunSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region User
    /// <inheritdoc cref="DockerRunSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerRunSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Userns
    /// <inheritdoc cref="DockerRunSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Userns))]
    public static T SetUserns<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Userns, v));
    /// <inheritdoc cref="DockerRunSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Userns))]
    public static T ResetUserns<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Userns));
    #endregion
    #region Uts
    /// <inheritdoc cref="DockerRunSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Uts))]
    public static T SetUts<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Uts, v));
    /// <inheritdoc cref="DockerRunSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Uts))]
    public static T ResetUts<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Uts));
    #endregion
    #region Volume
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T SetVolume<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T SetVolume<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T AddVolume<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T AddVolume<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T RemoveVolume<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T RemoveVolume<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Volume))]
    public static T ClearVolume<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Volume));
    #endregion
    #region VolumeDriver
    /// <inheritdoc cref="DockerRunSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumeDriver))]
    public static T SetVolumeDriver<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.VolumeDriver, v));
    /// <inheritdoc cref="DockerRunSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumeDriver))]
    public static T ResetVolumeDriver<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.VolumeDriver));
    #endregion
    #region VolumesFrom
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.VolumesFrom))]
    public static T ClearVolumesFrom<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.VolumesFrom));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerRunSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerRunSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerRunSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerRunSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerRunSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerRunSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerRunSettings), Property = nameof(DockerRunSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerRunSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCreateSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region Attach
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T SetAttach<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T SetAttach<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T AddAttach<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T AddAttach<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T RemoveAttach<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T RemoveAttach<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Attach))]
    public static T ClearAttach<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Attach));
    #endregion
    #region BlkioWeight
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region BlkioWeightDevice
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.BlkioWeightDevice))]
    public static T ClearBlkioWeightDevice<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.BlkioWeightDevice));
    #endregion
    #region CapAdd
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapAdd))]
    public static T ClearCapAdd<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.CapAdd));
    #endregion
    #region CapDrop
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CapDrop))]
    public static T ClearCapDrop<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.CapDrop));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerCreateSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerCreateSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Cidfile
    /// <inheritdoc cref="DockerCreateSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Cidfile))]
    public static T SetCidfile<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Cidfile, v));
    /// <inheritdoc cref="DockerCreateSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Cidfile))]
    public static T ResetCidfile<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Cidfile));
    #endregion
    #region CpuCount
    /// <inheritdoc cref="DockerCreateSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuCount))]
    public static T SetCpuCount<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuCount, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuCount))]
    public static T ResetCpuCount<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuCount));
    #endregion
    #region CpuPercent
    /// <inheritdoc cref="DockerCreateSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuPercent))]
    public static T SetCpuPercent<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuPercent, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuPercent))]
    public static T ResetCpuPercent<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuPercent));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerCreateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerCreateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerCreateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerCreateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerCreateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerCreateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerCreateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerCreateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerCreateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerCreateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerCreateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerCreateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region Device
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T SetDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T SetDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T AddDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T AddDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T RemoveDevice<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T RemoveDevice<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Device))]
    public static T ClearDevice<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Device));
    #endregion
    #region DeviceCgroupRule
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceCgroupRule))]
    public static T ClearDeviceCgroupRule<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceCgroupRule));
    #endregion
    #region DeviceReadBps
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadBps))]
    public static T ClearDeviceReadBps<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadBps));
    #endregion
    #region DeviceReadIops
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceReadIops))]
    public static T ClearDeviceReadIops<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadIops));
    #endregion
    #region DeviceWriteBps
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteBps))]
    public static T ClearDeviceWriteBps<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteBps));
    #endregion
    #region DeviceWriteIops
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DeviceWriteIops))]
    public static T ClearDeviceWriteIops<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteIops));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Dns
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T SetDns<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T SetDns<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T AddDns<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T AddDns<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Dns))]
    public static T ClearDns<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Dns));
    #endregion
    #region DnsOpt
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOpt))]
    public static T ClearDnsOpt<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOpt));
    #endregion
    #region DnsOption
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsOption))]
    public static T ClearDnsOption<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOption));
    #endregion
    #region DnsSearch
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.DnsSearch))]
    public static T ClearDnsSearch<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearch));
    #endregion
    #region Domainname
    /// <inheritdoc cref="DockerCreateSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Domainname))]
    public static T SetDomainname<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Domainname, v));
    /// <inheritdoc cref="DockerCreateSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Domainname))]
    public static T ResetDomainname<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Domainname));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region EnvFile
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.EnvFile))]
    public static T ClearEnvFile<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.EnvFile));
    #endregion
    #region Expose
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T SetExpose<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T SetExpose<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T AddExpose<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T AddExpose<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T RemoveExpose<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T RemoveExpose<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Expose))]
    public static T ClearExpose<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Expose));
    #endregion
    #region Gpus
    /// <inheritdoc cref="DockerCreateSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Gpus))]
    public static T SetGpus<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Gpus, v));
    /// <inheritdoc cref="DockerCreateSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Gpus))]
    public static T ResetGpus<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Gpus));
    #endregion
    #region GroupAdd
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.GroupAdd))]
    public static T ClearGroupAdd<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.GroupAdd));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region Help
    /// <inheritdoc cref="DockerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Help))]
    public static T SetHelp<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Help, v));
    /// <inheritdoc cref="DockerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Help))]
    public static T ResetHelp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Help));
    /// <inheritdoc cref="DockerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Help))]
    public static T EnableHelp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Help, true));
    /// <inheritdoc cref="DockerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Help))]
    public static T DisableHelp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Help, false));
    /// <inheritdoc cref="DockerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Help))]
    public static T ToggleHelp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Help, !o.Help));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region IoMaxbandwidth
    /// <inheritdoc cref="DockerCreateSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.IoMaxbandwidth))]
    public static T SetIoMaxbandwidth<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.IoMaxbandwidth, v));
    /// <inheritdoc cref="DockerCreateSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.IoMaxbandwidth))]
    public static T ResetIoMaxbandwidth<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.IoMaxbandwidth));
    #endregion
    #region IoMaxiops
    /// <inheritdoc cref="DockerCreateSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.IoMaxiops))]
    public static T SetIoMaxiops<T>(this T o, int? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.IoMaxiops, v));
    /// <inheritdoc cref="DockerCreateSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.IoMaxiops))]
    public static T ResetIoMaxiops<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.IoMaxiops));
    #endregion
    #region Ip
    /// <inheritdoc cref="DockerCreateSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ip))]
    public static T SetIp<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Ip, v));
    /// <inheritdoc cref="DockerCreateSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ip))]
    public static T ResetIp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Ip));
    #endregion
    #region Ip6
    /// <inheritdoc cref="DockerCreateSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ip6))]
    public static T SetIp6<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Ip6, v));
    /// <inheritdoc cref="DockerCreateSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ip6))]
    public static T ResetIp6<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Ip6));
    #endregion
    #region Ipc
    /// <inheritdoc cref="DockerCreateSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ipc))]
    public static T SetIpc<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Ipc, v));
    /// <inheritdoc cref="DockerCreateSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ipc))]
    public static T ResetIpc<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Ipc));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerCreateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerCreateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region LabelFile
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LabelFile))]
    public static T ClearLabelFile<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LabelFile));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T SetLink<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T SetLink<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T AddLink<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T AddLink<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T RemoveLink<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T RemoveLink<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Link))]
    public static T ClearLink<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Link));
    #endregion
    #region LinkLocalIp
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LinkLocalIp))]
    public static T ClearLinkLocalIp<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LinkLocalIp));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region MacAddress
    /// <inheritdoc cref="DockerCreateSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MacAddress))]
    public static T SetMacAddress<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.MacAddress, v));
    /// <inheritdoc cref="DockerCreateSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MacAddress))]
    public static T ResetMacAddress<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.MacAddress));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerCreateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerCreateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerCreateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerCreateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerCreateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerCreateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region MemorySwappiness
    /// <inheritdoc cref="DockerCreateSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemorySwappiness))]
    public static T SetMemorySwappiness<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.MemorySwappiness, v));
    /// <inheritdoc cref="DockerCreateSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.MemorySwappiness))]
    public static T ResetMemorySwappiness<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.MemorySwappiness));
    #endregion
    #region Mount
    /// <inheritdoc cref="DockerCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Mount))]
    public static T SetMount<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Mount, v));
    /// <inheritdoc cref="DockerCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Mount))]
    public static T ResetMount<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Mount));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Net
    /// <inheritdoc cref="DockerCreateSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Net))]
    public static T SetNet<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Net, v));
    /// <inheritdoc cref="DockerCreateSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Net))]
    public static T ResetNet<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Net));
    #endregion
    #region NetAlias
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetAlias))]
    public static T ClearNetAlias<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.NetAlias));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NetworkAlias
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NetworkAlias))]
    public static T ClearNetworkAlias<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.NetworkAlias));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region OomKillDisable
    /// <inheritdoc cref="DockerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomKillDisable))]
    public static T SetOomKillDisable<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, v));
    /// <inheritdoc cref="DockerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomKillDisable))]
    public static T ResetOomKillDisable<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.OomKillDisable));
    /// <inheritdoc cref="DockerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomKillDisable))]
    public static T EnableOomKillDisable<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, true));
    /// <inheritdoc cref="DockerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomKillDisable))]
    public static T DisableOomKillDisable<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, false));
    /// <inheritdoc cref="DockerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomKillDisable))]
    public static T ToggleOomKillDisable<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, !o.OomKillDisable));
    #endregion
    #region OomScoreAdj
    /// <inheritdoc cref="DockerCreateSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomScoreAdj))]
    public static T SetOomScoreAdj<T>(this T o, int? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.OomScoreAdj, v));
    /// <inheritdoc cref="DockerCreateSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.OomScoreAdj))]
    public static T ResetOomScoreAdj<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.OomScoreAdj));
    #endregion
    #region Pid
    /// <inheritdoc cref="DockerCreateSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Pid))]
    public static T SetPid<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Pid, v));
    /// <inheritdoc cref="DockerCreateSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Pid))]
    public static T ResetPid<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Pid));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerCreateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerCreateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Publish
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T SetPublish<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T SetPublish<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T AddPublish<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T AddPublish<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T RemovePublish<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T RemovePublish<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Publish))]
    public static T ClearPublish<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Publish));
    #endregion
    #region PublishAll
    /// <inheritdoc cref="DockerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PublishAll))]
    public static T SetPublishAll<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, v));
    /// <inheritdoc cref="DockerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PublishAll))]
    public static T ResetPublishAll<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.PublishAll));
    /// <inheritdoc cref="DockerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PublishAll))]
    public static T EnablePublishAll<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, true));
    /// <inheritdoc cref="DockerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PublishAll))]
    public static T DisablePublishAll<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, false));
    /// <inheritdoc cref="DockerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.PublishAll))]
    public static T TogglePublishAll<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, !o.PublishAll));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerCreateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerCreateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Runtime
    /// <inheritdoc cref="DockerCreateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="DockerCreateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerCreateSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerCreateSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region StopTimeout
    /// <inheritdoc cref="DockerCreateSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StopTimeout))]
    public static T SetStopTimeout<T>(this T o, int? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.StopTimeout, v));
    /// <inheritdoc cref="DockerCreateSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StopTimeout))]
    public static T ResetStopTimeout<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.StopTimeout));
    #endregion
    #region StorageOpt
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.StorageOpt))]
    public static T ClearStorageOpt<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.StorageOpt));
    #endregion
    #region Sysctl
    /// <inheritdoc cref="DockerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, IDictionary<string, string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Sysctl, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, string k, string v) where T : DockerCreateSettings => o.Modify(b => b.SetDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, string k, string v) where T : DockerCreateSettings => o.Modify(b => b.AddDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, string k) where T : DockerCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.Sysctl, k));
    /// <inheritdoc cref="DockerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Sysctl))]
    public static T ClearSysctl<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearDictionary(() => o.Sysctl));
    #endregion
    #region Tmpfs
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tmpfs))]
    public static T ClearTmpfs<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Tmpfs));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerCreateSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerCreateSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region User
    /// <inheritdoc cref="DockerCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Userns
    /// <inheritdoc cref="DockerCreateSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Userns))]
    public static T SetUserns<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Userns, v));
    /// <inheritdoc cref="DockerCreateSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Userns))]
    public static T ResetUserns<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Userns));
    #endregion
    #region Uts
    /// <inheritdoc cref="DockerCreateSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Uts))]
    public static T SetUts<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Uts, v));
    /// <inheritdoc cref="DockerCreateSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Uts))]
    public static T ResetUts<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Uts));
    #endregion
    #region Volume
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T SetVolume<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T SetVolume<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T AddVolume<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T AddVolume<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T RemoveVolume<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T RemoveVolume<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Volume))]
    public static T ClearVolume<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Volume));
    #endregion
    #region VolumeDriver
    /// <inheritdoc cref="DockerCreateSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumeDriver))]
    public static T SetVolumeDriver<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.VolumeDriver, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumeDriver))]
    public static T ResetVolumeDriver<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.VolumeDriver));
    #endregion
    #region VolumesFrom
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.VolumesFrom))]
    public static T ClearVolumesFrom<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.VolumesFrom));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerCreateSettings), Property = nameof(DockerCreateSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerServiceUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceUpdateSettingsExtensions
{
    #region Args
    /// <inheritdoc cref="DockerServiceUpdateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Args))]
    public static T SetArgs<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Args))]
    public static T ResetArgs<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Args));
    #endregion
    #region ConfigAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigAdd))]
    public static T SetConfigAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConfigAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigAdd))]
    public static T ResetConfigAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.ConfigAdd));
    #endregion
    #region ConfigRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T SetConfigRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T SetConfigRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T AddConfigRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T AddConfigRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T RemoveConfigRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T RemoveConfigRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConfigRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConfigRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConfigRm))]
    public static T ClearConfigRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.ConfigRm));
    #endregion
    #region ConstraintAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T SetConstraintAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T SetConstraintAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T AddConstraintAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T AddConstraintAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T RemoveConstraintAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T RemoveConstraintAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConstraintAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintAdd))]
    public static T ClearConstraintAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.ConstraintAdd));
    #endregion
    #region ConstraintRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T SetConstraintRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T SetConstraintRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T AddConstraintRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T AddConstraintRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T RemoveConstraintRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T RemoveConstraintRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ConstraintRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ConstraintRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ConstraintRm))]
    public static T ClearConstraintRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.ConstraintRm));
    #endregion
    #region ContainerLabelAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T SetContainerLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T SetContainerLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T AddContainerLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T AddContainerLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T RemoveContainerLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T RemoveContainerLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelAdd))]
    public static T ClearContainerLabelAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.ContainerLabelAdd));
    #endregion
    #region ContainerLabelRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T SetContainerLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T SetContainerLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T AddContainerLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T AddContainerLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T RemoveContainerLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T RemoveContainerLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.ContainerLabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ContainerLabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ContainerLabelRm))]
    public static T ClearContainerLabelRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.ContainerLabelRm));
    #endregion
    #region CredentialSpec
    /// <inheritdoc cref="DockerServiceUpdateSettings.CredentialSpec"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.CredentialSpec))]
    public static T SetCredentialSpec<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.CredentialSpec, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.CredentialSpec"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.CredentialSpec))]
    public static T ResetCredentialSpec<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.CredentialSpec));
    #endregion
    #region Detach
    /// <inheritdoc cref="DockerServiceUpdateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region DnsAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T SetDnsAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T SetDnsAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T AddDnsAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T AddDnsAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T RemoveDnsAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T RemoveDnsAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsAdd))]
    public static T ClearDnsAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsAdd));
    #endregion
    #region DnsOptionAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T SetDnsOptionAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T SetDnsOptionAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T AddDnsOptionAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T AddDnsOptionAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T RemoveDnsOptionAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T RemoveDnsOptionAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOptionAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionAdd))]
    public static T ClearDnsOptionAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOptionAdd));
    #endregion
    #region DnsOptionRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T SetDnsOptionRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T SetDnsOptionRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T AddDnsOptionRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T AddDnsOptionRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T RemoveDnsOptionRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T RemoveDnsOptionRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOptionRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsOptionRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsOptionRm))]
    public static T ClearDnsOptionRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOptionRm));
    #endregion
    #region DnsRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T SetDnsRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T SetDnsRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T AddDnsRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T AddDnsRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T RemoveDnsRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T RemoveDnsRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsRm))]
    public static T ClearDnsRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsRm));
    #endregion
    #region DnsSearchAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T SetDnsSearchAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T SetDnsSearchAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T AddDnsSearchAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T AddDnsSearchAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T RemoveDnsSearchAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T RemoveDnsSearchAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearchAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchAdd))]
    public static T ClearDnsSearchAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearchAdd));
    #endregion
    #region DnsSearchRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T SetDnsSearchRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T SetDnsSearchRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T AddDnsSearchRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T AddDnsSearchRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T RemoveDnsSearchRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T RemoveDnsSearchRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearchRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.DnsSearchRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.DnsSearchRm))]
    public static T ClearDnsSearchRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearchRm));
    #endregion
    #region EndpointMode
    /// <inheritdoc cref="DockerServiceUpdateSettings.EndpointMode"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EndpointMode))]
    public static T SetEndpointMode<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.EndpointMode, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EndpointMode"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EndpointMode))]
    public static T ResetEndpointMode<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.EndpointMode));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerServiceUpdateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region EnvAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T SetEnvAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T SetEnvAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T AddEnvAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T AddEnvAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T RemoveEnvAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T RemoveEnvAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvAdd))]
    public static T ClearEnvAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.EnvAdd));
    #endregion
    #region EnvRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T SetEnvRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T SetEnvRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T AddEnvRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T AddEnvRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T RemoveEnvRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T RemoveEnvRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.EnvRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.EnvRm))]
    public static T ClearEnvRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.EnvRm));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerServiceUpdateSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region GenericResourceAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T SetGenericResourceAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T SetGenericResourceAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T AddGenericResourceAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T AddGenericResourceAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T RemoveGenericResourceAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T RemoveGenericResourceAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResourceAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceAdd))]
    public static T ClearGenericResourceAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.GenericResourceAdd));
    #endregion
    #region GenericResourceRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T SetGenericResourceRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T SetGenericResourceRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T AddGenericResourceRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T AddGenericResourceRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T RemoveGenericResourceRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T RemoveGenericResourceRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GenericResourceRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GenericResourceRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GenericResourceRm))]
    public static T ClearGenericResourceRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.GenericResourceRm));
    #endregion
    #region GroupAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupAdd))]
    public static T ClearGroupAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.GroupAdd));
    #endregion
    #region GroupRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T SetGroupRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T SetGroupRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T AddGroupRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T AddGroupRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T RemoveGroupRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T RemoveGroupRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.GroupRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.GroupRm))]
    public static T ClearGroupRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.GroupRm));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region HostAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T SetHostAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T SetHostAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T AddHostAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T AddHostAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T RemoveHostAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T RemoveHostAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.HostAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostAdd))]
    public static T ClearHostAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.HostAdd));
    #endregion
    #region HostRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T SetHostRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T SetHostRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T AddHostRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T AddHostRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T RemoveHostRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T RemoveHostRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.HostRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.HostRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.HostRm))]
    public static T ClearHostRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.HostRm));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerServiceUpdateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerServiceUpdateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerServiceUpdateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerServiceUpdateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region LabelAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T SetLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T SetLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T AddLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T AddLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T RemoveLabelAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T RemoveLabelAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelAdd))]
    public static T ClearLabelAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.LabelAdd));
    #endregion
    #region LabelRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T SetLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T SetLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T AddLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T AddLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T RemoveLabelRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T RemoveLabelRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LabelRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LabelRm))]
    public static T ClearLabelRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.LabelRm));
    #endregion
    #region LimitCpu
    /// <inheritdoc cref="DockerServiceUpdateSettings.LimitCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LimitCpu))]
    public static T SetLimitCpu<T>(this T o, decimal? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LimitCpu, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LimitCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LimitCpu))]
    public static T ResetLimitCpu<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.LimitCpu));
    #endregion
    #region LimitMemory
    /// <inheritdoc cref="DockerServiceUpdateSettings.LimitMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LimitMemory))]
    public static T SetLimitMemory<T>(this T o, long? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LimitMemory, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LimitMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LimitMemory))]
    public static T ResetLimitMemory<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.LimitMemory));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region MountAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountAdd))]
    public static T SetMountAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.MountAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountAdd))]
    public static T ResetMountAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.MountAdd));
    #endregion
    #region MountRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T SetMountRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T SetMountRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T AddMountRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T AddMountRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T RemoveMountRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T RemoveMountRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.MountRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.MountRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.MountRm))]
    public static T ClearMountRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.MountRm));
    #endregion
    #region NetworkAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkAdd))]
    public static T SetNetworkAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NetworkAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkAdd))]
    public static T ResetNetworkAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.NetworkAdd));
    #endregion
    #region NetworkRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T SetNetworkRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T SetNetworkRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T AddNetworkRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T AddNetworkRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T RemoveNetworkRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T RemoveNetworkRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NetworkRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NetworkRm))]
    public static T ClearNetworkRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.NetworkRm));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region NoResolveImage
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoResolveImage))]
    public static T SetNoResolveImage<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoResolveImage))]
    public static T ResetNoResolveImage<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.NoResolveImage));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoResolveImage))]
    public static T EnableNoResolveImage<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoResolveImage))]
    public static T DisableNoResolveImage<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.NoResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.NoResolveImage))]
    public static T ToggleNoResolveImage<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.NoResolveImage, !o.NoResolveImage));
    #endregion
    #region PlacementPrefAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.PlacementPrefAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PlacementPrefAdd))]
    public static T SetPlacementPrefAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.PlacementPrefAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.PlacementPrefAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PlacementPrefAdd))]
    public static T ResetPlacementPrefAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.PlacementPrefAdd));
    #endregion
    #region PlacementPrefRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.PlacementPrefRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PlacementPrefRm))]
    public static T SetPlacementPrefRm<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.PlacementPrefRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.PlacementPrefRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PlacementPrefRm))]
    public static T ResetPlacementPrefRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.PlacementPrefRm));
    #endregion
    #region PublishAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.PublishAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PublishAdd))]
    public static T SetPublishAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.PublishAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.PublishAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PublishAdd))]
    public static T ResetPublishAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.PublishAdd));
    #endregion
    #region PublishRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.PublishRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PublishRm))]
    public static T SetPublishRm<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.PublishRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.PublishRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.PublishRm))]
    public static T ResetPublishRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.PublishRm));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerServiceUpdateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Replicas
    /// <inheritdoc cref="DockerServiceUpdateSettings.Replicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Replicas))]
    public static T SetReplicas<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Replicas, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Replicas"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Replicas))]
    public static T ResetReplicas<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Replicas));
    #endregion
    #region ReplicasMaxPerNode
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReplicasMaxPerNode))]
    public static T SetReplicasMaxPerNode<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReplicasMaxPerNode, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReplicasMaxPerNode))]
    public static T ResetReplicasMaxPerNode<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.ReplicasMaxPerNode));
    #endregion
    #region ReserveCpu
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReserveCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReserveCpu))]
    public static T SetReserveCpu<T>(this T o, decimal? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReserveCpu, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReserveCpu"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReserveCpu))]
    public static T ResetReserveCpu<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.ReserveCpu));
    #endregion
    #region ReserveMemory
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReserveMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReserveMemory))]
    public static T SetReserveMemory<T>(this T o, long? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.ReserveMemory, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.ReserveMemory"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.ReserveMemory))]
    public static T ResetReserveMemory<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.ReserveMemory));
    #endregion
    #region RestartCondition
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartCondition"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartCondition))]
    public static T SetRestartCondition<T>(this T o, DockerRestartCondition v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RestartCondition, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartCondition"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartCondition))]
    public static T ResetRestartCondition<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RestartCondition));
    #endregion
    #region RestartDelay
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartDelay))]
    public static T SetRestartDelay<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RestartDelay, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartDelay))]
    public static T ResetRestartDelay<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RestartDelay));
    #endregion
    #region RestartMaxAttempts
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartMaxAttempts"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartMaxAttempts))]
    public static T SetRestartMaxAttempts<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RestartMaxAttempts, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartMaxAttempts"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartMaxAttempts))]
    public static T ResetRestartMaxAttempts<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RestartMaxAttempts));
    #endregion
    #region RestartWindow
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartWindow"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartWindow))]
    public static T SetRestartWindow<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RestartWindow, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RestartWindow"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RestartWindow))]
    public static T ResetRestartWindow<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RestartWindow));
    #endregion
    #region Rollback
    /// <inheritdoc cref="DockerServiceUpdateSettings.Rollback"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Rollback))]
    public static T SetRollback<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Rollback, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Rollback"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Rollback))]
    public static T ResetRollback<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Rollback));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Rollback"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Rollback))]
    public static T EnableRollback<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Rollback, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Rollback"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Rollback))]
    public static T DisableRollback<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Rollback, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Rollback"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Rollback))]
    public static T ToggleRollback<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Rollback, !o.Rollback));
    #endregion
    #region RollbackDelay
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackDelay))]
    public static T SetRollbackDelay<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackDelay, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackDelay))]
    public static T ResetRollbackDelay<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackDelay));
    #endregion
    #region RollbackFailureAction
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackFailureAction))]
    public static T SetRollbackFailureAction<T>(this T o, DockerRollbackFailureAction v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackFailureAction, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackFailureAction))]
    public static T ResetRollbackFailureAction<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackFailureAction));
    #endregion
    #region RollbackMaxFailureRatio
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackMaxFailureRatio))]
    public static T SetRollbackMaxFailureRatio<T>(this T o, float? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackMaxFailureRatio, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackMaxFailureRatio))]
    public static T ResetRollbackMaxFailureRatio<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackMaxFailureRatio));
    #endregion
    #region RollbackMonitor
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackMonitor))]
    public static T SetRollbackMonitor<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackMonitor, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackMonitor))]
    public static T ResetRollbackMonitor<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackMonitor));
    #endregion
    #region RollbackOrder
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackOrder))]
    public static T SetRollbackOrder<T>(this T o, DockerRollbackOrder v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackOrder, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackOrder))]
    public static T ResetRollbackOrder<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackOrder));
    #endregion
    #region RollbackParallelism
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackParallelism))]
    public static T SetRollbackParallelism<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.RollbackParallelism, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.RollbackParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.RollbackParallelism))]
    public static T ResetRollbackParallelism<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.RollbackParallelism));
    #endregion
    #region SecretAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretAdd))]
    public static T SetSecretAdd<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SecretAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretAdd))]
    public static T ResetSecretAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.SecretAdd));
    #endregion
    #region SecretRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T SetSecretRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T SetSecretRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T AddSecretRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T AddSecretRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T RemoveSecretRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T RemoveSecretRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SecretRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SecretRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SecretRm))]
    public static T ClearSecretRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.SecretRm));
    #endregion
    #region StopGracePeriod
    /// <inheritdoc cref="DockerServiceUpdateSettings.StopGracePeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.StopGracePeriod))]
    public static T SetStopGracePeriod<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.StopGracePeriod, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.StopGracePeriod"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.StopGracePeriod))]
    public static T ResetStopGracePeriod<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.StopGracePeriod));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerServiceUpdateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region SysctlAdd
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T SetSysctlAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T SetSysctlAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T AddSysctlAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T AddSysctlAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T RemoveSysctlAdd<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T RemoveSysctlAdd<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SysctlAdd, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlAdd"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlAdd))]
    public static T ClearSysctlAdd<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.SysctlAdd));
    #endregion
    #region SysctlRm
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T SetSysctlRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T SetSysctlRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T AddSysctlRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T AddSysctlRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.AddCollection(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T RemoveSysctlRm<T>(this T o, params string[] v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T RemoveSysctlRm<T>(this T o, IEnumerable<string> v) where T : DockerServiceUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.SysctlRm, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.SysctlRm"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.SysctlRm))]
    public static T ClearSysctlRm<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.ClearCollection(() => o.SysctlRm));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerServiceUpdateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region UpdateDelay
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateDelay))]
    public static T SetUpdateDelay<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateDelay, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateDelay"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateDelay))]
    public static T ResetUpdateDelay<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateDelay));
    #endregion
    #region UpdateFailureAction
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateFailureAction))]
    public static T SetUpdateFailureAction<T>(this T o, DockerUpdateFailureAction v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateFailureAction, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateFailureAction"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateFailureAction))]
    public static T ResetUpdateFailureAction<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateFailureAction));
    #endregion
    #region UpdateMaxFailureRatio
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateMaxFailureRatio))]
    public static T SetUpdateMaxFailureRatio<T>(this T o, float? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateMaxFailureRatio, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateMaxFailureRatio))]
    public static T ResetUpdateMaxFailureRatio<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateMaxFailureRatio));
    #endregion
    #region UpdateMonitor
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateMonitor))]
    public static T SetUpdateMonitor<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateMonitor, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateMonitor"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateMonitor))]
    public static T ResetUpdateMonitor<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateMonitor));
    #endregion
    #region UpdateOrder
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateOrder))]
    public static T SetUpdateOrder<T>(this T o, DockerUpdateOrder v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateOrder, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateOrder"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateOrder))]
    public static T ResetUpdateOrder<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateOrder));
    #endregion
    #region UpdateParallelism
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateParallelism))]
    public static T SetUpdateParallelism<T>(this T o, int? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.UpdateParallelism, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.UpdateParallelism"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.UpdateParallelism))]
    public static T ResetUpdateParallelism<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.UpdateParallelism));
    #endregion
    #region User
    /// <inheritdoc cref="DockerServiceUpdateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region WithRegistryAuth
    /// <inheritdoc cref="DockerServiceUpdateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.WithRegistryAuth))]
    public static T SetWithRegistryAuth<T>(this T o, bool? v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.WithRegistryAuth))]
    public static T ResetWithRegistryAuth<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.WithRegistryAuth));
    /// <inheritdoc cref="DockerServiceUpdateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.WithRegistryAuth))]
    public static T EnableWithRegistryAuth<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, true));
    /// <inheritdoc cref="DockerServiceUpdateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.WithRegistryAuth))]
    public static T DisableWithRegistryAuth<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, false));
    /// <inheritdoc cref="DockerServiceUpdateSettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.WithRegistryAuth))]
    public static T ToggleWithRegistryAuth<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, !o.WithRegistryAuth));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerServiceUpdateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Service
    /// <inheritdoc cref="DockerServiceUpdateSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Service))]
    public static T SetService<T>(this T o, string v) where T : DockerServiceUpdateSettings => o.Modify(b => b.Set(() => o.Service, v));
    /// <inheritdoc cref="DockerServiceUpdateSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceUpdateSettings), Property = nameof(DockerServiceUpdateSettings.Service))]
    public static T ResetService<T>(this T o) where T : DockerServiceUpdateSettings => o.Modify(b => b.Remove(() => o.Service));
    #endregion
}
#endregion
#region DockerPortSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPortSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerPortSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerPortSettings), Property = nameof(DockerPortSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerPortSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerPortSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerPortSettings), Property = nameof(DockerPortSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerPortSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region PrivatePort
    /// <inheritdoc cref="DockerPortSettings.PrivatePort"/>
    [Pure] [Builder(Type = typeof(DockerPortSettings), Property = nameof(DockerPortSettings.PrivatePort))]
    public static T SetPrivatePort<T>(this T o, string v) where T : DockerPortSettings => o.Modify(b => b.Set(() => o.PrivatePort, v));
    /// <inheritdoc cref="DockerPortSettings.PrivatePort"/>
    [Pure] [Builder(Type = typeof(DockerPortSettings), Property = nameof(DockerPortSettings.PrivatePort))]
    public static T ResetPrivatePort<T>(this T o) where T : DockerPortSettings => o.Modify(b => b.Remove(() => o.PrivatePort));
    #endregion
}
#endregion
#region DockerContainerSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerSettingsExtensions
{
}
#endregion
#region DockerImagePushSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImagePushSettingsExtensions
{
    #region AllTags
    /// <inheritdoc cref="DockerImagePushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.AllTags))]
    public static T SetAllTags<T>(this T o, bool? v) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.AllTags, v));
    /// <inheritdoc cref="DockerImagePushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.AllTags))]
    public static T ResetAllTags<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Remove(() => o.AllTags));
    /// <inheritdoc cref="DockerImagePushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.AllTags))]
    public static T EnableAllTags<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.AllTags, true));
    /// <inheritdoc cref="DockerImagePushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.AllTags))]
    public static T DisableAllTags<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.AllTags, false));
    /// <inheritdoc cref="DockerImagePushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.AllTags))]
    public static T ToggleAllTags<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.AllTags, !o.AllTags));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerImagePushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerImagePushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerImagePushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerImagePushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerImagePushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerImagePushSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerImagePushSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerImagePushSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerImagePushSettings), Property = nameof(DockerImagePushSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerImagePushSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
}
#endregion
#region DockerServiceInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerServiceInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Pretty
    /// <inheritdoc cref="DockerServiceInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Pretty))]
    public static T SetPretty<T>(this T o, bool? v) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Pretty, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Pretty))]
    public static T ResetPretty<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.Remove(() => o.Pretty));
    /// <inheritdoc cref="DockerServiceInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Pretty))]
    public static T EnablePretty<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Pretty, true));
    /// <inheritdoc cref="DockerServiceInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Pretty))]
    public static T DisablePretty<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Pretty, false));
    /// <inheritdoc cref="DockerServiceInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Pretty))]
    public static T TogglePretty<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Pretty, !o.Pretty));
    #endregion
    #region Services
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T SetServices<T>(this T o, params string[] v) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T SetServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceInspectSettings => o.Modify(b => b.Set(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T AddServices<T>(this T o, params string[] v) where T : DockerServiceInspectSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T AddServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceInspectSettings => o.Modify(b => b.AddCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T RemoveServices<T>(this T o, params string[] v) where T : DockerServiceInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T RemoveServices<T>(this T o, IEnumerable<string> v) where T : DockerServiceInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Services, v));
    /// <inheritdoc cref="DockerServiceInspectSettings.Services"/>
    [Pure] [Builder(Type = typeof(DockerServiceInspectSettings), Property = nameof(DockerServiceInspectSettings.Services))]
    public static T ClearServices<T>(this T o) where T : DockerServiceInspectSettings => o.Modify(b => b.ClearCollection(() => o.Services));
    #endregion
}
#endregion
#region DockerNetworkConnectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkConnectSettingsExtensions
{
    #region Alias
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T SetAlias<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T SetAlias<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T AddAlias<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T AddAlias<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T RemoveAlias<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T RemoveAlias<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.Alias, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Alias))]
    public static T ClearAlias<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.ClearCollection(() => o.Alias));
    #endregion
    #region DriverOpt
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T SetDriverOpt<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T SetDriverOpt<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T AddDriverOpt<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T AddDriverOpt<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T RemoveDriverOpt<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T RemoveDriverOpt<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.DriverOpt))]
    public static T ClearDriverOpt<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.ClearCollection(() => o.DriverOpt));
    #endregion
    #region Ip
    /// <inheritdoc cref="DockerNetworkConnectSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Ip))]
    public static T SetIp<T>(this T o, string v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Ip, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Ip))]
    public static T ResetIp<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.Remove(() => o.Ip));
    #endregion
    #region Ip6
    /// <inheritdoc cref="DockerNetworkConnectSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Ip6))]
    public static T SetIp6<T>(this T o, string v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Ip6, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Ip6))]
    public static T ResetIp6<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.Remove(() => o.Ip6));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T SetLink<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T SetLink<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T AddLink<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T AddLink<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T RemoveLink<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T RemoveLink<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Link))]
    public static T ClearLink<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.ClearCollection(() => o.Link));
    #endregion
    #region LinkLocalIp
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, params string[] v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerNetworkConnectSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.LinkLocalIp))]
    public static T ClearLinkLocalIp<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.ClearCollection(() => o.LinkLocalIp));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerNetworkConnectSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerNetworkConnectSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerNetworkConnectSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerNetworkConnectSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerNetworkConnectSettings), Property = nameof(DockerNetworkConnectSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerNetworkConnectSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerSecretLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSecretLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerSecretLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerSecretLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerSecretLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSecretLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerSecretLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerSecretLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerSecretLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerSecretLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerSecretLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSecretLsSettings), Property = nameof(DockerSecretLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerSecretLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerSwarmLeaveSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmLeaveSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerSwarmLeaveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSwarmLeaveSettings), Property = nameof(DockerSwarmLeaveSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerSwarmLeaveSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerSwarmLeaveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSwarmLeaveSettings), Property = nameof(DockerSwarmLeaveSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerSwarmLeaveSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerSwarmLeaveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSwarmLeaveSettings), Property = nameof(DockerSwarmLeaveSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerSwarmLeaveSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerSwarmLeaveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSwarmLeaveSettings), Property = nameof(DockerSwarmLeaveSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerSwarmLeaveSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerSwarmLeaveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSwarmLeaveSettings), Property = nameof(DockerSwarmLeaveSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerSwarmLeaveSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
}
#endregion
#region DockerImagesSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImagesSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerImagesSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerImagesSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerImagesSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerImagesSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerImagesSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Digests
    /// <inheritdoc cref="DockerImagesSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Digests))]
    public static T SetDigests<T>(this T o, bool? v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Digests, v));
    /// <inheritdoc cref="DockerImagesSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Digests))]
    public static T ResetDigests<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.Digests));
    /// <inheritdoc cref="DockerImagesSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Digests))]
    public static T EnableDigests<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Digests, true));
    /// <inheritdoc cref="DockerImagesSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Digests))]
    public static T DisableDigests<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Digests, false));
    /// <inheritdoc cref="DockerImagesSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Digests))]
    public static T ToggleDigests<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Digests, !o.Digests));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerImagesSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerImagesSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerImagesSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerImagesSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerImagesSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerImagesSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerImagesSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerImagesSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerImagesSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImagesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImagesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImagesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImagesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImagesSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerImagesSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerImagesSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerImagesSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImagesSettings), Property = nameof(DockerImagesSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerImagesSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerEngineUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerEngineUpdateSettingsExtensions
{
    #region Containerd
    /// <inheritdoc cref="DockerEngineUpdateSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.Containerd))]
    public static T SetContainerd<T>(this T o, string v) where T : DockerEngineUpdateSettings => o.Modify(b => b.Set(() => o.Containerd, v));
    /// <inheritdoc cref="DockerEngineUpdateSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.Containerd))]
    public static T ResetContainerd<T>(this T o) where T : DockerEngineUpdateSettings => o.Modify(b => b.Remove(() => o.Containerd));
    #endregion
    #region EngineImage
    /// <inheritdoc cref="DockerEngineUpdateSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.EngineImage))]
    public static T SetEngineImage<T>(this T o, string v) where T : DockerEngineUpdateSettings => o.Modify(b => b.Set(() => o.EngineImage, v));
    /// <inheritdoc cref="DockerEngineUpdateSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.EngineImage))]
    public static T ResetEngineImage<T>(this T o) where T : DockerEngineUpdateSettings => o.Modify(b => b.Remove(() => o.EngineImage));
    #endregion
    #region RegistryPrefix
    /// <inheritdoc cref="DockerEngineUpdateSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.RegistryPrefix))]
    public static T SetRegistryPrefix<T>(this T o, string v) where T : DockerEngineUpdateSettings => o.Modify(b => b.Set(() => o.RegistryPrefix, v));
    /// <inheritdoc cref="DockerEngineUpdateSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.RegistryPrefix))]
    public static T ResetRegistryPrefix<T>(this T o) where T : DockerEngineUpdateSettings => o.Modify(b => b.Remove(() => o.RegistryPrefix));
    #endregion
    #region Version
    /// <inheritdoc cref="DockerEngineUpdateSettings.Version"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.Version))]
    public static T SetVersion<T>(this T o, string v) where T : DockerEngineUpdateSettings => o.Modify(b => b.Set(() => o.Version, v));
    /// <inheritdoc cref="DockerEngineUpdateSettings.Version"/>
    [Pure] [Builder(Type = typeof(DockerEngineUpdateSettings), Property = nameof(DockerEngineUpdateSettings.Version))]
    public static T ResetVersion<T>(this T o) where T : DockerEngineUpdateSettings => o.Modify(b => b.Remove(() => o.Version));
    #endregion
}
#endregion
#region DockerSystemEventsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSystemEventsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerSystemEventsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerSystemEventsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerSystemEventsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerSystemEventsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerSystemEventsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSystemEventsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSystemEventsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSystemEventsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Since
    /// <inheritdoc cref="DockerSystemEventsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Since))]
    public static T SetSince<T>(this T o, string v) where T : DockerSystemEventsSettings => o.Modify(b => b.Set(() => o.Since, v));
    /// <inheritdoc cref="DockerSystemEventsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Since))]
    public static T ResetSince<T>(this T o) where T : DockerSystemEventsSettings => o.Modify(b => b.Remove(() => o.Since));
    #endregion
    #region Until
    /// <inheritdoc cref="DockerSystemEventsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Until))]
    public static T SetUntil<T>(this T o, string v) where T : DockerSystemEventsSettings => o.Modify(b => b.Set(() => o.Until, v));
    /// <inheritdoc cref="DockerSystemEventsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerSystemEventsSettings), Property = nameof(DockerSystemEventsSettings.Until))]
    public static T ResetUntil<T>(this T o) where T : DockerSystemEventsSettings => o.Modify(b => b.Remove(() => o.Until));
    #endregion
}
#endregion
#region DockerInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Size
    /// <inheritdoc cref="DockerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Size))]
    public static T SetSize<T>(this T o, bool? v) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Size, v));
    /// <inheritdoc cref="DockerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Size))]
    public static T ResetSize<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Remove(() => o.Size));
    /// <inheritdoc cref="DockerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Size))]
    public static T EnableSize<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Size, true));
    /// <inheritdoc cref="DockerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Size))]
    public static T DisableSize<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Size, false));
    /// <inheritdoc cref="DockerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Size))]
    public static T ToggleSize<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Size, !o.Size));
    #endregion
    #region Type
    /// <inheritdoc cref="DockerInspectSettings.Type"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Type, v));
    /// <inheritdoc cref="DockerInspectSettings.Type"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Type))]
    public static T ResetType<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.Remove(() => o.Type));
    #endregion
    #region Names
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T SetNames<T>(this T o, params string[] v) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T SetNames<T>(this T o, IEnumerable<string> v) where T : DockerInspectSettings => o.Modify(b => b.Set(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T AddNames<T>(this T o, params string[] v) where T : DockerInspectSettings => o.Modify(b => b.AddCollection(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T AddNames<T>(this T o, IEnumerable<string> v) where T : DockerInspectSettings => o.Modify(b => b.AddCollection(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T RemoveNames<T>(this T o, params string[] v) where T : DockerInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T RemoveNames<T>(this T o, IEnumerable<string> v) where T : DockerInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Names, v));
    /// <inheritdoc cref="DockerInspectSettings.Names"/>
    [Pure] [Builder(Type = typeof(DockerInspectSettings), Property = nameof(DockerInspectSettings.Names))]
    public static T ClearNames<T>(this T o) where T : DockerInspectSettings => o.Modify(b => b.ClearCollection(() => o.Names));
    #endregion
}
#endregion
#region DockerEngineCheckSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerEngineCheckSettingsExtensions
{
    #region Containerd
    /// <inheritdoc cref="DockerEngineCheckSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Containerd))]
    public static T SetContainerd<T>(this T o, string v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Containerd, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Containerd))]
    public static T ResetContainerd<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.Containerd));
    #endregion
    #region Downgrades
    /// <inheritdoc cref="DockerEngineCheckSettings.Downgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Downgrades))]
    public static T SetDowngrades<T>(this T o, bool? v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Downgrades, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.Downgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Downgrades))]
    public static T ResetDowngrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.Downgrades));
    /// <inheritdoc cref="DockerEngineCheckSettings.Downgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Downgrades))]
    public static T EnableDowngrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Downgrades, true));
    /// <inheritdoc cref="DockerEngineCheckSettings.Downgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Downgrades))]
    public static T DisableDowngrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Downgrades, false));
    /// <inheritdoc cref="DockerEngineCheckSettings.Downgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Downgrades))]
    public static T ToggleDowngrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Downgrades, !o.Downgrades));
    #endregion
    #region EngineImage
    /// <inheritdoc cref="DockerEngineCheckSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.EngineImage))]
    public static T SetEngineImage<T>(this T o, string v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.EngineImage, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.EngineImage))]
    public static T ResetEngineImage<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.EngineImage));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerEngineCheckSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region PreReleases
    /// <inheritdoc cref="DockerEngineCheckSettings.PreReleases"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.PreReleases))]
    public static T SetPreReleases<T>(this T o, bool? v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.PreReleases, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.PreReleases"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.PreReleases))]
    public static T ResetPreReleases<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.PreReleases));
    /// <inheritdoc cref="DockerEngineCheckSettings.PreReleases"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.PreReleases))]
    public static T EnablePreReleases<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.PreReleases, true));
    /// <inheritdoc cref="DockerEngineCheckSettings.PreReleases"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.PreReleases))]
    public static T DisablePreReleases<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.PreReleases, false));
    /// <inheritdoc cref="DockerEngineCheckSettings.PreReleases"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.PreReleases))]
    public static T TogglePreReleases<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.PreReleases, !o.PreReleases));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerEngineCheckSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerEngineCheckSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerEngineCheckSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerEngineCheckSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region RegistryPrefix
    /// <inheritdoc cref="DockerEngineCheckSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.RegistryPrefix))]
    public static T SetRegistryPrefix<T>(this T o, string v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.RegistryPrefix, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.RegistryPrefix))]
    public static T ResetRegistryPrefix<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.RegistryPrefix));
    #endregion
    #region Upgrades
    /// <inheritdoc cref="DockerEngineCheckSettings.Upgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Upgrades))]
    public static T SetUpgrades<T>(this T o, bool? v) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Upgrades, v));
    /// <inheritdoc cref="DockerEngineCheckSettings.Upgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Upgrades))]
    public static T ResetUpgrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Remove(() => o.Upgrades));
    /// <inheritdoc cref="DockerEngineCheckSettings.Upgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Upgrades))]
    public static T EnableUpgrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Upgrades, true));
    /// <inheritdoc cref="DockerEngineCheckSettings.Upgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Upgrades))]
    public static T DisableUpgrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Upgrades, false));
    /// <inheritdoc cref="DockerEngineCheckSettings.Upgrades"/>
    [Pure] [Builder(Type = typeof(DockerEngineCheckSettings), Property = nameof(DockerEngineCheckSettings.Upgrades))]
    public static T ToggleUpgrades<T>(this T o) where T : DockerEngineCheckSettings => o.Modify(b => b.Set(() => o.Upgrades, !o.Upgrades));
    #endregion
}
#endregion
#region DockerAttachSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerAttachSettingsExtensions
{
    #region DetachKeys
    /// <inheritdoc cref="DockerAttachSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerAttachSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region NoStdin
    /// <inheritdoc cref="DockerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.NoStdin))]
    public static T SetNoStdin<T>(this T o, bool? v) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, v));
    /// <inheritdoc cref="DockerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.NoStdin))]
    public static T ResetNoStdin<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Remove(() => o.NoStdin));
    /// <inheritdoc cref="DockerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.NoStdin))]
    public static T EnableNoStdin<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, true));
    /// <inheritdoc cref="DockerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.NoStdin))]
    public static T DisableNoStdin<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, false));
    /// <inheritdoc cref="DockerAttachSettings.NoStdin"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.NoStdin))]
    public static T ToggleNoStdin<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.NoStdin, !o.NoStdin));
    #endregion
    #region SigProxy
    /// <inheritdoc cref="DockerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.SigProxy))]
    public static T SetSigProxy<T>(this T o, bool? v) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, v));
    /// <inheritdoc cref="DockerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.SigProxy))]
    public static T ResetSigProxy<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Remove(() => o.SigProxy));
    /// <inheritdoc cref="DockerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.SigProxy))]
    public static T EnableSigProxy<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, true));
    /// <inheritdoc cref="DockerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.SigProxy))]
    public static T DisableSigProxy<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, false));
    /// <inheritdoc cref="DockerAttachSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.SigProxy))]
    public static T ToggleSigProxy<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.SigProxy, !o.SigProxy));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerAttachSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerAttachSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerAttachSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerAttachSettings), Property = nameof(DockerAttachSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerAttachSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerContainerWaitSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerWaitSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerWaitSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerWaitSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerWaitSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerWaitSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerWaitSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerWaitSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerWaitSettings), Property = nameof(DockerContainerWaitSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerWaitSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerSwarmCaSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmCaSettingsExtensions
{
    #region CaCert
    /// <inheritdoc cref="DockerSwarmCaSettings.CaCert"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CaCert))]
    public static T SetCaCert<T>(this T o, string v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.CaCert, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.CaCert"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CaCert))]
    public static T ResetCaCert<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.CaCert));
    #endregion
    #region CaKey
    /// <inheritdoc cref="DockerSwarmCaSettings.CaKey"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CaKey))]
    public static T SetCaKey<T>(this T o, string v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.CaKey, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.CaKey"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CaKey))]
    public static T ResetCaKey<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.CaKey));
    #endregion
    #region CertExpiry
    /// <inheritdoc cref="DockerSwarmCaSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CertExpiry))]
    public static T SetCertExpiry<T>(this T o, string v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.CertExpiry, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.CertExpiry))]
    public static T ResetCertExpiry<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.CertExpiry));
    #endregion
    #region Detach
    /// <inheritdoc cref="DockerSwarmCaSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerSwarmCaSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerSwarmCaSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerSwarmCaSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region ExternalCa
    /// <inheritdoc cref="DockerSwarmCaSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.ExternalCa))]
    public static T SetExternalCa<T>(this T o, string v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.ExternalCa, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.ExternalCa))]
    public static T ResetExternalCa<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.ExternalCa));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerSwarmCaSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerSwarmCaSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerSwarmCaSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerSwarmCaSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rotate
    /// <inheritdoc cref="DockerSwarmCaSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Rotate))]
    public static T SetRotate<T>(this T o, bool? v) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Rotate, v));
    /// <inheritdoc cref="DockerSwarmCaSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Rotate))]
    public static T ResetRotate<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Remove(() => o.Rotate));
    /// <inheritdoc cref="DockerSwarmCaSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Rotate))]
    public static T EnableRotate<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Rotate, true));
    /// <inheritdoc cref="DockerSwarmCaSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Rotate))]
    public static T DisableRotate<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Rotate, false));
    /// <inheritdoc cref="DockerSwarmCaSettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmCaSettings), Property = nameof(DockerSwarmCaSettings.Rotate))]
    public static T ToggleRotate<T>(this T o) where T : DockerSwarmCaSettings => o.Modify(b => b.Set(() => o.Rotate, !o.Rotate));
    #endregion
}
#endregion
#region DockerEngineSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerEngineSettingsExtensions
{
    #region Command
    /// <inheritdoc cref="DockerEngineSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerEngineSettings), Property = nameof(DockerEngineSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerEngineSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerEngineSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerEngineSettings), Property = nameof(DockerEngineSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerEngineSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
}
#endregion
#region DockerSystemPruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSystemPruneSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerSystemPruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerSystemPruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerSystemPruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerSystemPruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerSystemPruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerSystemPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerSystemPruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerSystemPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerSystemPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerSystemPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerSystemPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerSystemPruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Volumes
    /// <inheritdoc cref="DockerSystemPruneSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Volumes))]
    public static T SetVolumes<T>(this T o, bool? v) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerSystemPruneSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Volumes))]
    public static T ResetVolumes<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Remove(() => o.Volumes));
    /// <inheritdoc cref="DockerSystemPruneSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Volumes))]
    public static T EnableVolumes<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Volumes, true));
    /// <inheritdoc cref="DockerSystemPruneSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Volumes))]
    public static T DisableVolumes<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Volumes, false));
    /// <inheritdoc cref="DockerSystemPruneSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerSystemPruneSettings), Property = nameof(DockerSystemPruneSettings.Volumes))]
    public static T ToggleVolumes<T>(this T o) where T : DockerSystemPruneSettings => o.Modify(b => b.Set(() => o.Volumes, !o.Volumes));
    #endregion
}
#endregion
#region DockerBuilderSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuilderSettingsExtensions
{
}
#endregion
#region DockerContainerPauseSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerPauseSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerPauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerPauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerPauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerPauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerPauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerPauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerPauseSettings), Property = nameof(DockerContainerPauseSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerPauseSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContainerCommitSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerCommitSettingsExtensions
{
    #region Author
    /// <inheritdoc cref="DockerContainerCommitSettings.Author"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Author))]
    public static T SetAuthor<T>(this T o, string v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Author, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Author"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Author))]
    public static T ResetAuthor<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Remove(() => o.Author));
    #endregion
    #region Change
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T SetChange<T>(this T o, params string[] v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T SetChange<T>(this T o, IEnumerable<string> v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T AddChange<T>(this T o, params string[] v) where T : DockerContainerCommitSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T AddChange<T>(this T o, IEnumerable<string> v) where T : DockerContainerCommitSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T RemoveChange<T>(this T o, params string[] v) where T : DockerContainerCommitSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T RemoveChange<T>(this T o, IEnumerable<string> v) where T : DockerContainerCommitSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Change))]
    public static T ClearChange<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.ClearCollection(() => o.Change));
    #endregion
    #region Message
    /// <inheritdoc cref="DockerContainerCommitSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Message))]
    public static T SetMessage<T>(this T o, string v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Message, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Message))]
    public static T ResetMessage<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Remove(() => o.Message));
    #endregion
    #region Pause
    /// <inheritdoc cref="DockerContainerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Pause))]
    public static T SetPause<T>(this T o, bool? v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Pause, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Pause))]
    public static T ResetPause<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Remove(() => o.Pause));
    /// <inheritdoc cref="DockerContainerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Pause))]
    public static T EnablePause<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Pause, true));
    /// <inheritdoc cref="DockerContainerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Pause))]
    public static T DisablePause<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Pause, false));
    /// <inheritdoc cref="DockerContainerCommitSettings.Pause"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Pause))]
    public static T TogglePause<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Pause, !o.Pause));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerContainerCommitSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerContainerCommitSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerContainerCommitSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerContainerCommitSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerContainerCommitSettings), Property = nameof(DockerContainerCommitSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerContainerCommitSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerContextLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextLsSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerContextLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerContextLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerContextLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerContextLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerContextLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerContextLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerContextLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerContextLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerContextLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerContextLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerContextLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerContextLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerContextLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContextLsSettings), Property = nameof(DockerContextLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerContextLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerContextRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextRmSettingsExtensions
{
    #region Contexts
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T SetContexts<T>(this T o, params string[] v) where T : DockerContextRmSettings => o.Modify(b => b.Set(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T SetContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextRmSettings => o.Modify(b => b.Set(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T AddContexts<T>(this T o, params string[] v) where T : DockerContextRmSettings => o.Modify(b => b.AddCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T AddContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextRmSettings => o.Modify(b => b.AddCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T RemoveContexts<T>(this T o, params string[] v) where T : DockerContextRmSettings => o.Modify(b => b.RemoveCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T RemoveContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextRmSettings => o.Modify(b => b.RemoveCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextRmSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextRmSettings), Property = nameof(DockerContextRmSettings.Contexts))]
    public static T ClearContexts<T>(this T o) where T : DockerContextRmSettings => o.Modify(b => b.ClearCollection(() => o.Contexts));
    #endregion
}
#endregion
#region DockerStackPsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackPsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerStackPsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerStackPsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerStackPsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerStackPsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Namespace
    /// <inheritdoc cref="DockerStackPsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackPsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region NoResolve
    /// <inheritdoc cref="DockerStackPsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoResolve))]
    public static T SetNoResolve<T>(this T o, bool? v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoResolve, v));
    /// <inheritdoc cref="DockerStackPsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoResolve))]
    public static T ResetNoResolve<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.NoResolve));
    /// <inheritdoc cref="DockerStackPsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoResolve))]
    public static T EnableNoResolve<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoResolve, true));
    /// <inheritdoc cref="DockerStackPsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoResolve))]
    public static T DisableNoResolve<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoResolve, false));
    /// <inheritdoc cref="DockerStackPsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoResolve))]
    public static T ToggleNoResolve<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoResolve, !o.NoResolve));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerStackPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerStackPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerStackPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerStackPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerStackPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerStackPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerStackPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerStackPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerStackPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerStackPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Stack
    /// <inheritdoc cref="DockerStackPsSettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Stack))]
    public static T SetStack<T>(this T o, string v) where T : DockerStackPsSettings => o.Modify(b => b.Set(() => o.Stack, v));
    /// <inheritdoc cref="DockerStackPsSettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerStackPsSettings), Property = nameof(DockerStackPsSettings.Stack))]
    public static T ResetStack<T>(this T o) where T : DockerStackPsSettings => o.Modify(b => b.Remove(() => o.Stack));
    #endregion
}
#endregion
#region DockerContainerCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerCreateSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region Attach
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T SetAttach<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T SetAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T AddAttach<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T AddAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T RemoveAttach<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T RemoveAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Attach))]
    public static T ClearAttach<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Attach));
    #endregion
    #region BlkioWeight
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region BlkioWeightDevice
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.BlkioWeightDevice))]
    public static T ClearBlkioWeightDevice<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.BlkioWeightDevice));
    #endregion
    #region CapAdd
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapAdd))]
    public static T ClearCapAdd<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.CapAdd));
    #endregion
    #region CapDrop
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CapDrop))]
    public static T ClearCapDrop<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.CapDrop));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerContainerCreateSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Cidfile
    /// <inheritdoc cref="DockerContainerCreateSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Cidfile))]
    public static T SetCidfile<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Cidfile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Cidfile))]
    public static T ResetCidfile<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Cidfile));
    #endregion
    #region CpuCount
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuCount))]
    public static T SetCpuCount<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuCount, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuCount))]
    public static T ResetCpuCount<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuCount));
    #endregion
    #region CpuPercent
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuPercent))]
    public static T SetCpuPercent<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuPercent, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuPercent))]
    public static T ResetCpuPercent<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuPercent));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerContainerCreateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerContainerCreateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerContainerCreateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region Device
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T SetDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T SetDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T AddDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T AddDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T RemoveDevice<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T RemoveDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Device))]
    public static T ClearDevice<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Device));
    #endregion
    #region DeviceCgroupRule
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceCgroupRule))]
    public static T ClearDeviceCgroupRule<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceCgroupRule));
    #endregion
    #region DeviceReadBps
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadBps))]
    public static T ClearDeviceReadBps<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadBps));
    #endregion
    #region DeviceReadIops
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceReadIops))]
    public static T ClearDeviceReadIops<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadIops));
    #endregion
    #region DeviceWriteBps
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteBps))]
    public static T ClearDeviceWriteBps<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteBps));
    #endregion
    #region DeviceWriteIops
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DeviceWriteIops))]
    public static T ClearDeviceWriteIops<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteIops));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerContainerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerContainerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Dns
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T SetDns<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T SetDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T AddDns<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T AddDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T RemoveDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Dns))]
    public static T ClearDns<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Dns));
    #endregion
    #region DnsOpt
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOpt))]
    public static T ClearDnsOpt<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOpt));
    #endregion
    #region DnsOption
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsOption))]
    public static T ClearDnsOption<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsOption));
    #endregion
    #region DnsSearch
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.DnsSearch))]
    public static T ClearDnsSearch<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearch));
    #endregion
    #region Domainname
    /// <inheritdoc cref="DockerContainerCreateSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Domainname))]
    public static T SetDomainname<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Domainname, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Domainname))]
    public static T ResetDomainname<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Domainname));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerContainerCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region EnvFile
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.EnvFile))]
    public static T ClearEnvFile<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.EnvFile));
    #endregion
    #region Expose
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T SetExpose<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T SetExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T AddExpose<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T AddExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T RemoveExpose<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T RemoveExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Expose))]
    public static T ClearExpose<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Expose));
    #endregion
    #region Gpus
    /// <inheritdoc cref="DockerContainerCreateSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Gpus))]
    public static T SetGpus<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Gpus, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Gpus))]
    public static T ResetGpus<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Gpus));
    #endregion
    #region GroupAdd
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.GroupAdd))]
    public static T ClearGroupAdd<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.GroupAdd));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region Help
    /// <inheritdoc cref="DockerContainerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Help))]
    public static T SetHelp<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Help, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Help))]
    public static T ResetHelp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Help));
    /// <inheritdoc cref="DockerContainerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Help))]
    public static T EnableHelp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Help, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Help))]
    public static T DisableHelp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Help, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Help))]
    public static T ToggleHelp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Help, !o.Help));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerContainerCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerContainerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerContainerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerContainerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerContainerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region IoMaxbandwidth
    /// <inheritdoc cref="DockerContainerCreateSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.IoMaxbandwidth))]
    public static T SetIoMaxbandwidth<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.IoMaxbandwidth, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.IoMaxbandwidth))]
    public static T ResetIoMaxbandwidth<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.IoMaxbandwidth));
    #endregion
    #region IoMaxiops
    /// <inheritdoc cref="DockerContainerCreateSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.IoMaxiops))]
    public static T SetIoMaxiops<T>(this T o, int? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.IoMaxiops, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.IoMaxiops))]
    public static T ResetIoMaxiops<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.IoMaxiops));
    #endregion
    #region Ip
    /// <inheritdoc cref="DockerContainerCreateSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ip))]
    public static T SetIp<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Ip, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ip))]
    public static T ResetIp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Ip));
    #endregion
    #region Ip6
    /// <inheritdoc cref="DockerContainerCreateSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ip6))]
    public static T SetIp6<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Ip6, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ip6))]
    public static T ResetIp6<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Ip6));
    #endregion
    #region Ipc
    /// <inheritdoc cref="DockerContainerCreateSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ipc))]
    public static T SetIpc<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Ipc, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ipc))]
    public static T ResetIpc<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Ipc));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerContainerCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerContainerCreateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region LabelFile
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LabelFile))]
    public static T ClearLabelFile<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LabelFile));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T SetLink<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T SetLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T AddLink<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T AddLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T RemoveLink<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T RemoveLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Link))]
    public static T ClearLink<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Link));
    #endregion
    #region LinkLocalIp
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LinkLocalIp))]
    public static T ClearLinkLocalIp<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LinkLocalIp));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerContainerCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region MacAddress
    /// <inheritdoc cref="DockerContainerCreateSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MacAddress))]
    public static T SetMacAddress<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.MacAddress, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MacAddress))]
    public static T ResetMacAddress<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.MacAddress));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerContainerCreateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerContainerCreateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerContainerCreateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region MemorySwappiness
    /// <inheritdoc cref="DockerContainerCreateSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemorySwappiness))]
    public static T SetMemorySwappiness<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.MemorySwappiness, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.MemorySwappiness))]
    public static T ResetMemorySwappiness<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.MemorySwappiness));
    #endregion
    #region Mount
    /// <inheritdoc cref="DockerContainerCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Mount))]
    public static T SetMount<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Mount, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Mount))]
    public static T ResetMount<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Mount));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerContainerCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Net
    /// <inheritdoc cref="DockerContainerCreateSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Net))]
    public static T SetNet<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Net, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Net))]
    public static T ResetNet<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Net));
    #endregion
    #region NetAlias
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetAlias))]
    public static T ClearNetAlias<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.NetAlias));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerContainerCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NetworkAlias
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NetworkAlias))]
    public static T ClearNetworkAlias<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.NetworkAlias));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerContainerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerContainerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region OomKillDisable
    /// <inheritdoc cref="DockerContainerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomKillDisable))]
    public static T SetOomKillDisable<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomKillDisable))]
    public static T ResetOomKillDisable<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.OomKillDisable));
    /// <inheritdoc cref="DockerContainerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomKillDisable))]
    public static T EnableOomKillDisable<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomKillDisable))]
    public static T DisableOomKillDisable<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomKillDisable))]
    public static T ToggleOomKillDisable<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.OomKillDisable, !o.OomKillDisable));
    #endregion
    #region OomScoreAdj
    /// <inheritdoc cref="DockerContainerCreateSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomScoreAdj))]
    public static T SetOomScoreAdj<T>(this T o, int? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.OomScoreAdj, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.OomScoreAdj))]
    public static T ResetOomScoreAdj<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.OomScoreAdj));
    #endregion
    #region Pid
    /// <inheritdoc cref="DockerContainerCreateSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Pid))]
    public static T SetPid<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Pid, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Pid))]
    public static T ResetPid<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Pid));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerContainerCreateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerContainerCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerContainerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerContainerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Publish
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T SetPublish<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T SetPublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T AddPublish<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T AddPublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T RemovePublish<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T RemovePublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Publish))]
    public static T ClearPublish<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Publish));
    #endregion
    #region PublishAll
    /// <inheritdoc cref="DockerContainerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PublishAll))]
    public static T SetPublishAll<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PublishAll))]
    public static T ResetPublishAll<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.PublishAll));
    /// <inheritdoc cref="DockerContainerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PublishAll))]
    public static T EnablePublishAll<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PublishAll))]
    public static T DisablePublishAll<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.PublishAll))]
    public static T TogglePublishAll<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.PublishAll, !o.PublishAll));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerContainerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerContainerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerContainerCreateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerContainerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerContainerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Runtime
    /// <inheritdoc cref="DockerContainerCreateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerContainerCreateSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerContainerCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region StopTimeout
    /// <inheritdoc cref="DockerContainerCreateSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StopTimeout))]
    public static T SetStopTimeout<T>(this T o, int? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.StopTimeout, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StopTimeout))]
    public static T ResetStopTimeout<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.StopTimeout));
    #endregion
    #region StorageOpt
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.StorageOpt))]
    public static T ClearStorageOpt<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.StorageOpt));
    #endregion
    #region Sysctl
    /// <inheritdoc cref="DockerContainerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, IDictionary<string, string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Sysctl, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerContainerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, string k, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.SetDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, string k, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, string k) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.Sysctl, k));
    /// <inheritdoc cref="DockerContainerCreateSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Sysctl))]
    public static T ClearSysctl<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearDictionary(() => o.Sysctl));
    #endregion
    #region Tmpfs
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tmpfs))]
    public static T ClearTmpfs<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Tmpfs));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerContainerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerContainerCreateSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerContainerCreateSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region User
    /// <inheritdoc cref="DockerContainerCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Userns
    /// <inheritdoc cref="DockerContainerCreateSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Userns))]
    public static T SetUserns<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Userns, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Userns))]
    public static T ResetUserns<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Userns));
    #endregion
    #region Uts
    /// <inheritdoc cref="DockerContainerCreateSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Uts))]
    public static T SetUts<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Uts, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Uts))]
    public static T ResetUts<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Uts));
    #endregion
    #region Volume
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T SetVolume<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T SetVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T AddVolume<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T AddVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T RemoveVolume<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T RemoveVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Volume))]
    public static T ClearVolume<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Volume));
    #endregion
    #region VolumeDriver
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumeDriver))]
    public static T SetVolumeDriver<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.VolumeDriver, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumeDriver))]
    public static T ResetVolumeDriver<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.VolumeDriver));
    #endregion
    #region VolumesFrom
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.VolumesFrom))]
    public static T ClearVolumesFrom<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.VolumesFrom));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerContainerCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerContainerCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerContainerCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerCreateSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerCreateSettings), Property = nameof(DockerContainerCreateSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerContainerCreateSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerVolumeCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumeCreateSettingsExtensions
{
    #region Driver
    /// <inheritdoc cref="DockerVolumeCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Driver))]
    public static T SetDriver<T>(this T o, string v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Driver, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Driver))]
    public static T ResetDriver<T>(this T o) where T : DockerVolumeCreateSettings => o.Modify(b => b.Remove(() => o.Driver));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerVolumeCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerVolumeCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerVolumeCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerVolumeCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerVolumeCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerVolumeCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerVolumeCreateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Opt
    /// <inheritdoc cref="DockerVolumeCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Opt))]
    public static T SetOpt<T>(this T o, IDictionary<string, string> v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Opt, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Opt))]
    public static T SetOpt<T>(this T o, string k, string v) where T : DockerVolumeCreateSettings => o.Modify(b => b.SetDictionary(() => o.Opt, k, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Opt))]
    public static T AddOpt<T>(this T o, string k, string v) where T : DockerVolumeCreateSettings => o.Modify(b => b.AddDictionary(() => o.Opt, k, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Opt))]
    public static T RemoveOpt<T>(this T o, string k) where T : DockerVolumeCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.Opt, k));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Opt))]
    public static T ClearOpt<T>(this T o) where T : DockerVolumeCreateSettings => o.Modify(b => b.ClearDictionary(() => o.Opt));
    #endregion
    #region Volume
    /// <inheritdoc cref="DockerVolumeCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Volume))]
    public static T SetVolume<T>(this T o, string v) where T : DockerVolumeCreateSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerVolumeCreateSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerVolumeCreateSettings), Property = nameof(DockerVolumeCreateSettings.Volume))]
    public static T ResetVolume<T>(this T o) where T : DockerVolumeCreateSettings => o.Modify(b => b.Remove(() => o.Volume));
    #endregion
}
#endregion
#region DockerPluginSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginSettingsExtensions
{
}
#endregion
#region DockerLoginSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerLoginSettingsExtensions
{
    #region Password
    /// <inheritdoc cref="DockerLoginSettings.Password"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Password))]
    public static T SetPassword<T>(this T o, [Secret] string v) where T : DockerLoginSettings => o.Modify(b => b.Set(() => o.Password, v));
    /// <inheritdoc cref="DockerLoginSettings.Password"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Password))]
    public static T ResetPassword<T>(this T o) where T : DockerLoginSettings => o.Modify(b => b.Remove(() => o.Password));
    #endregion
    #region Username
    /// <inheritdoc cref="DockerLoginSettings.Username"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Username))]
    public static T SetUsername<T>(this T o, string v) where T : DockerLoginSettings => o.Modify(b => b.Set(() => o.Username, v));
    /// <inheritdoc cref="DockerLoginSettings.Username"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Username))]
    public static T ResetUsername<T>(this T o) where T : DockerLoginSettings => o.Modify(b => b.Remove(() => o.Username));
    #endregion
    #region Server
    /// <inheritdoc cref="DockerLoginSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Server))]
    public static T SetServer<T>(this T o, string v) where T : DockerLoginSettings => o.Modify(b => b.Set(() => o.Server, v));
    /// <inheritdoc cref="DockerLoginSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerLoginSettings), Property = nameof(DockerLoginSettings.Server))]
    public static T ResetServer<T>(this T o) where T : DockerLoginSettings => o.Modify(b => b.Remove(() => o.Server));
    #endregion
}
#endregion
#region DockerSwarmUnlockKeySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmUnlockKeySettingsExtensions
{
    #region Quiet
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rotate
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Rotate))]
    public static T SetRotate<T>(this T o, bool? v) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Rotate, v));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Rotate))]
    public static T ResetRotate<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Remove(() => o.Rotate));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Rotate))]
    public static T EnableRotate<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Rotate, true));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Rotate))]
    public static T DisableRotate<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Rotate, false));
    /// <inheritdoc cref="DockerSwarmUnlockKeySettings.Rotate"/>
    [Pure] [Builder(Type = typeof(DockerSwarmUnlockKeySettings), Property = nameof(DockerSwarmUnlockKeySettings.Rotate))]
    public static T ToggleRotate<T>(this T o) where T : DockerSwarmUnlockKeySettings => o.Modify(b => b.Set(() => o.Rotate, !o.Rotate));
    #endregion
}
#endregion
#region DockerStartSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStartSettingsExtensions
{
    #region Attach
    /// <inheritdoc cref="DockerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Attach))]
    public static T SetAttach<T>(this T o, bool? v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Attach))]
    public static T ResetAttach<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Remove(() => o.Attach));
    /// <inheritdoc cref="DockerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Attach))]
    public static T EnableAttach<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Attach, true));
    /// <inheritdoc cref="DockerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Attach))]
    public static T DisableAttach<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Attach, false));
    /// <inheritdoc cref="DockerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Attach))]
    public static T ToggleAttach<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Attach, !o.Attach));
    #endregion
    #region Checkpoint
    /// <inheritdoc cref="DockerStartSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Checkpoint))]
    public static T SetCheckpoint<T>(this T o, string v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Checkpoint, v));
    /// <inheritdoc cref="DockerStartSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Checkpoint))]
    public static T ResetCheckpoint<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Remove(() => o.Checkpoint));
    #endregion
    #region CheckpointDir
    /// <inheritdoc cref="DockerStartSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.CheckpointDir))]
    public static T SetCheckpointDir<T>(this T o, string v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.CheckpointDir, v));
    /// <inheritdoc cref="DockerStartSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.CheckpointDir))]
    public static T ResetCheckpointDir<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Remove(() => o.CheckpointDir));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerStartSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerStartSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerStartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerStartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerStartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerStartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerStartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStartSettings), Property = nameof(DockerStartSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerStartSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerSwarmInitSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmInitSettingsExtensions
{
    #region AdvertiseAddr
    /// <inheritdoc cref="DockerSwarmInitSettings.AdvertiseAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.AdvertiseAddr))]
    public static T SetAdvertiseAddr<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.AdvertiseAddr, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.AdvertiseAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.AdvertiseAddr))]
    public static T ResetAdvertiseAddr<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.AdvertiseAddr));
    #endregion
    #region Autolock
    /// <inheritdoc cref="DockerSwarmInitSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Autolock))]
    public static T SetAutolock<T>(this T o, bool? v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.Autolock, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Autolock))]
    public static T ResetAutolock<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.Autolock));
    /// <inheritdoc cref="DockerSwarmInitSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Autolock))]
    public static T EnableAutolock<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.Autolock, true));
    /// <inheritdoc cref="DockerSwarmInitSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Autolock))]
    public static T DisableAutolock<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.Autolock, false));
    /// <inheritdoc cref="DockerSwarmInitSettings.Autolock"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Autolock))]
    public static T ToggleAutolock<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.Autolock, !o.Autolock));
    #endregion
    #region Availability
    /// <inheritdoc cref="DockerSwarmInitSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Availability))]
    public static T SetAvailability<T>(this T o, DockerAvailability v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.Availability, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.Availability))]
    public static T ResetAvailability<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.Availability));
    #endregion
    #region CertExpiry
    /// <inheritdoc cref="DockerSwarmInitSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.CertExpiry))]
    public static T SetCertExpiry<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.CertExpiry, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.CertExpiry"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.CertExpiry))]
    public static T ResetCertExpiry<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.CertExpiry));
    #endregion
    #region DataPathAddr
    /// <inheritdoc cref="DockerSwarmInitSettings.DataPathAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DataPathAddr))]
    public static T SetDataPathAddr<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.DataPathAddr, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.DataPathAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DataPathAddr))]
    public static T ResetDataPathAddr<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.DataPathAddr));
    #endregion
    #region DataPathPort
    /// <inheritdoc cref="DockerSwarmInitSettings.DataPathPort"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DataPathPort))]
    public static T SetDataPathPort<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.DataPathPort, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.DataPathPort"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DataPathPort))]
    public static T ResetDataPathPort<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.DataPathPort));
    #endregion
    #region DefaultAddrPool
    /// <inheritdoc cref="DockerSwarmInitSettings.DefaultAddrPool"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DefaultAddrPool))]
    public static T SetDefaultAddrPool<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.DefaultAddrPool, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.DefaultAddrPool"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DefaultAddrPool))]
    public static T ResetDefaultAddrPool<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.DefaultAddrPool));
    #endregion
    #region DefaultAddrPoolMaskLength
    /// <inheritdoc cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DefaultAddrPoolMaskLength))]
    public static T SetDefaultAddrPoolMaskLength<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.DefaultAddrPoolMaskLength, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DefaultAddrPoolMaskLength))]
    public static T ResetDefaultAddrPoolMaskLength<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.DefaultAddrPoolMaskLength));
    #endregion
    #region DispatcherHeartbeat
    /// <inheritdoc cref="DockerSwarmInitSettings.DispatcherHeartbeat"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DispatcherHeartbeat))]
    public static T SetDispatcherHeartbeat<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.DispatcherHeartbeat, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.DispatcherHeartbeat"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.DispatcherHeartbeat))]
    public static T ResetDispatcherHeartbeat<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.DispatcherHeartbeat));
    #endregion
    #region ExternalCa
    /// <inheritdoc cref="DockerSwarmInitSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ExternalCa))]
    public static T SetExternalCa<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ExternalCa, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.ExternalCa"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ExternalCa))]
    public static T ResetExternalCa<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.ExternalCa));
    #endregion
    #region ForceNewCluster
    /// <inheritdoc cref="DockerSwarmInitSettings.ForceNewCluster"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ForceNewCluster))]
    public static T SetForceNewCluster<T>(this T o, bool? v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ForceNewCluster, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.ForceNewCluster"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ForceNewCluster))]
    public static T ResetForceNewCluster<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.ForceNewCluster));
    /// <inheritdoc cref="DockerSwarmInitSettings.ForceNewCluster"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ForceNewCluster))]
    public static T EnableForceNewCluster<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ForceNewCluster, true));
    /// <inheritdoc cref="DockerSwarmInitSettings.ForceNewCluster"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ForceNewCluster))]
    public static T DisableForceNewCluster<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ForceNewCluster, false));
    /// <inheritdoc cref="DockerSwarmInitSettings.ForceNewCluster"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ForceNewCluster))]
    public static T ToggleForceNewCluster<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ForceNewCluster, !o.ForceNewCluster));
    #endregion
    #region ListenAddr
    /// <inheritdoc cref="DockerSwarmInitSettings.ListenAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ListenAddr))]
    public static T SetListenAddr<T>(this T o, string v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.ListenAddr, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.ListenAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.ListenAddr))]
    public static T ResetListenAddr<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.ListenAddr));
    #endregion
    #region MaxSnapshots
    /// <inheritdoc cref="DockerSwarmInitSettings.MaxSnapshots"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.MaxSnapshots))]
    public static T SetMaxSnapshots<T>(this T o, int? v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.MaxSnapshots, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.MaxSnapshots"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.MaxSnapshots))]
    public static T ResetMaxSnapshots<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.MaxSnapshots));
    #endregion
    #region SnapshotInterval
    /// <inheritdoc cref="DockerSwarmInitSettings.SnapshotInterval"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.SnapshotInterval))]
    public static T SetSnapshotInterval<T>(this T o, int? v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.SnapshotInterval, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.SnapshotInterval"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.SnapshotInterval))]
    public static T ResetSnapshotInterval<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.SnapshotInterval));
    #endregion
    #region TaskHistoryLimit
    /// <inheritdoc cref="DockerSwarmInitSettings.TaskHistoryLimit"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.TaskHistoryLimit))]
    public static T SetTaskHistoryLimit<T>(this T o, long? v) where T : DockerSwarmInitSettings => o.Modify(b => b.Set(() => o.TaskHistoryLimit, v));
    /// <inheritdoc cref="DockerSwarmInitSettings.TaskHistoryLimit"/>
    [Pure] [Builder(Type = typeof(DockerSwarmInitSettings), Property = nameof(DockerSwarmInitSettings.TaskHistoryLimit))]
    public static T ResetTaskHistoryLimit<T>(this T o) where T : DockerSwarmInitSettings => o.Modify(b => b.Remove(() => o.TaskHistoryLimit));
    #endregion
}
#endregion
#region DockerContainerDiffSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerDiffSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerContainerDiffSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerDiffSettings), Property = nameof(DockerContainerDiffSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerDiffSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerDiffSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerDiffSettings), Property = nameof(DockerContainerDiffSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerDiffSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerContainerRestartSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerRestartSettingsExtensions
{
    #region Time
    /// <inheritdoc cref="DockerContainerRestartSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Time))]
    public static T SetTime<T>(this T o, int? v) where T : DockerContainerRestartSettings => o.Modify(b => b.Set(() => o.Time, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Time))]
    public static T ResetTime<T>(this T o) where T : DockerContainerRestartSettings => o.Modify(b => b.Remove(() => o.Time));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerRestartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRestartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerRestartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRestartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerRestartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRestartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRestartSettings), Property = nameof(DockerContainerRestartSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerRestartSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerConfigSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerConfigSettingsExtensions
{
}
#endregion
#region DockerPluginDisableSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginDisableSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerPluginDisableSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerPluginDisableSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerPluginDisableSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerPluginDisableSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerPluginDisableSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerPluginDisableSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerPluginDisableSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerPluginDisableSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerPluginDisableSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerPluginDisableSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginDisableSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginDisableSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginDisableSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginDisableSettings), Property = nameof(DockerPluginDisableSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginDisableSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
}
#endregion
#region DockerContainerUnpauseSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerUnpauseSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUnpauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUnpauseSettings), Property = nameof(DockerContainerUnpauseSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerUnpauseSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContextImportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextImportSettingsExtensions
{
    #region Context
    /// <inheritdoc cref="DockerContextImportSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextImportSettings), Property = nameof(DockerContextImportSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextImportSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextImportSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextImportSettings), Property = nameof(DockerContextImportSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextImportSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region File
    /// <inheritdoc cref="DockerContextImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerContextImportSettings), Property = nameof(DockerContextImportSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerContextImportSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerContextImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerContextImportSettings), Property = nameof(DockerContextImportSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerContextImportSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
}
#endregion
#region DockerRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Link))]
    public static T SetLink<T>(this T o, bool? v) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Link))]
    public static T ResetLink<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Remove(() => o.Link));
    /// <inheritdoc cref="DockerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Link))]
    public static T EnableLink<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Link, true));
    /// <inheritdoc cref="DockerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Link))]
    public static T DisableLink<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Link, false));
    /// <inheritdoc cref="DockerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Link))]
    public static T ToggleLink<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Link, !o.Link));
    #endregion
    #region Volumes
    /// <inheritdoc cref="DockerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Volumes))]
    public static T SetVolumes<T>(this T o, bool? v) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Volumes))]
    public static T ResetVolumes<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Remove(() => o.Volumes));
    /// <inheritdoc cref="DockerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Volumes))]
    public static T EnableVolumes<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Volumes, true));
    /// <inheritdoc cref="DockerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Volumes))]
    public static T DisableVolumes<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Volumes, false));
    /// <inheritdoc cref="DockerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Volumes))]
    public static T ToggleVolumes<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Volumes, !o.Volumes));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerRmSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerRmSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerRmSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerRmSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerRmSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRmSettings), Property = nameof(DockerRmSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerRmSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerDeploySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerDeploySettingsExtensions
{
    #region BundleFile
    /// <inheritdoc cref="DockerDeploySettings.BundleFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.BundleFile))]
    public static T SetBundleFile<T>(this T o, string v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.BundleFile, v));
    /// <inheritdoc cref="DockerDeploySettings.BundleFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.BundleFile))]
    public static T ResetBundleFile<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.BundleFile));
    #endregion
    #region ComposeFile
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T SetComposeFile<T>(this T o, params string[] v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T SetComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T AddComposeFile<T>(this T o, params string[] v) where T : DockerDeploySettings => o.Modify(b => b.AddCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T AddComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerDeploySettings => o.Modify(b => b.AddCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T RemoveComposeFile<T>(this T o, params string[] v) where T : DockerDeploySettings => o.Modify(b => b.RemoveCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T RemoveComposeFile<T>(this T o, IEnumerable<string> v) where T : DockerDeploySettings => o.Modify(b => b.RemoveCollection(() => o.ComposeFile, v));
    /// <inheritdoc cref="DockerDeploySettings.ComposeFile"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ComposeFile))]
    public static T ClearComposeFile<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.ClearCollection(() => o.ComposeFile));
    #endregion
    #region Namespace
    /// <inheritdoc cref="DockerDeploySettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerDeploySettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Prune
    /// <inheritdoc cref="DockerDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Prune))]
    public static T SetPrune<T>(this T o, bool? v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Prune, v));
    /// <inheritdoc cref="DockerDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Prune))]
    public static T ResetPrune<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.Prune));
    /// <inheritdoc cref="DockerDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Prune))]
    public static T EnablePrune<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Prune, true));
    /// <inheritdoc cref="DockerDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Prune))]
    public static T DisablePrune<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Prune, false));
    /// <inheritdoc cref="DockerDeploySettings.Prune"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Prune))]
    public static T TogglePrune<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Prune, !o.Prune));
    #endregion
    #region ResolveImage
    /// <inheritdoc cref="DockerDeploySettings.ResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ResolveImage))]
    public static T SetResolveImage<T>(this T o, DockerResolveImage v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.ResolveImage, v));
    /// <inheritdoc cref="DockerDeploySettings.ResolveImage"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.ResolveImage))]
    public static T ResetResolveImage<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.ResolveImage));
    #endregion
    #region WithRegistryAuth
    /// <inheritdoc cref="DockerDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.WithRegistryAuth))]
    public static T SetWithRegistryAuth<T>(this T o, bool? v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, v));
    /// <inheritdoc cref="DockerDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.WithRegistryAuth))]
    public static T ResetWithRegistryAuth<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.WithRegistryAuth));
    /// <inheritdoc cref="DockerDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.WithRegistryAuth))]
    public static T EnableWithRegistryAuth<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, true));
    /// <inheritdoc cref="DockerDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.WithRegistryAuth))]
    public static T DisableWithRegistryAuth<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, false));
    /// <inheritdoc cref="DockerDeploySettings.WithRegistryAuth"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.WithRegistryAuth))]
    public static T ToggleWithRegistryAuth<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.WithRegistryAuth, !o.WithRegistryAuth));
    #endregion
    #region Stack
    /// <inheritdoc cref="DockerDeploySettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Stack))]
    public static T SetStack<T>(this T o, string v) where T : DockerDeploySettings => o.Modify(b => b.Set(() => o.Stack, v));
    /// <inheritdoc cref="DockerDeploySettings.Stack"/>
    [Pure] [Builder(Type = typeof(DockerDeploySettings), Property = nameof(DockerDeploySettings.Stack))]
    public static T ResetStack<T>(this T o) where T : DockerDeploySettings => o.Modify(b => b.Remove(() => o.Stack));
    #endregion
}
#endregion
#region DockerNodeRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerNodeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerNodeRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerNodeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerNodeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerNodeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Nodes
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T SetNodes<T>(this T o, params string[] v) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T SetNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeRmSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T AddNodes<T>(this T o, params string[] v) where T : DockerNodeRmSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T AddNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeRmSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, params string[] v) where T : DockerNodeRmSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeRmSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeRmSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeRmSettings), Property = nameof(DockerNodeRmSettings.Nodes))]
    public static T ClearNodes<T>(this T o) where T : DockerNodeRmSettings => o.Modify(b => b.ClearCollection(() => o.Nodes));
    #endregion
}
#endregion
#region DockerCheckpointRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCheckpointRmSettingsExtensions
{
    #region CheckpointDir
    /// <inheritdoc cref="DockerCheckpointRmSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.CheckpointDir))]
    public static T SetCheckpointDir<T>(this T o, string v) where T : DockerCheckpointRmSettings => o.Modify(b => b.Set(() => o.CheckpointDir, v));
    /// <inheritdoc cref="DockerCheckpointRmSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.CheckpointDir))]
    public static T ResetCheckpointDir<T>(this T o) where T : DockerCheckpointRmSettings => o.Modify(b => b.Remove(() => o.CheckpointDir));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerCheckpointRmSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerCheckpointRmSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerCheckpointRmSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerCheckpointRmSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Checkpoint
    /// <inheritdoc cref="DockerCheckpointRmSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.Checkpoint))]
    public static T SetCheckpoint<T>(this T o, string v) where T : DockerCheckpointRmSettings => o.Modify(b => b.Set(() => o.Checkpoint, v));
    /// <inheritdoc cref="DockerCheckpointRmSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointRmSettings), Property = nameof(DockerCheckpointRmSettings.Checkpoint))]
    public static T ResetCheckpoint<T>(this T o) where T : DockerCheckpointRmSettings => o.Modify(b => b.Remove(() => o.Checkpoint));
    #endregion
}
#endregion
#region DockerPushSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPushSettingsExtensions
{
    #region AllTags
    /// <inheritdoc cref="DockerPushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.AllTags))]
    public static T SetAllTags<T>(this T o, bool? v) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.AllTags, v));
    /// <inheritdoc cref="DockerPushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.AllTags))]
    public static T ResetAllTags<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Remove(() => o.AllTags));
    /// <inheritdoc cref="DockerPushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.AllTags))]
    public static T EnableAllTags<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.AllTags, true));
    /// <inheritdoc cref="DockerPushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.AllTags))]
    public static T DisableAllTags<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.AllTags, false));
    /// <inheritdoc cref="DockerPushSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.AllTags))]
    public static T ToggleAllTags<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.AllTags, !o.AllTags));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerPushSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerPushSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerPushSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerPushSettings), Property = nameof(DockerPushSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerPushSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
}
#endregion
#region DockerNetworkCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkCreateSettingsExtensions
{
    #region Attachable
    /// <inheritdoc cref="DockerNetworkCreateSettings.Attachable"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Attachable))]
    public static T SetAttachable<T>(this T o, bool? v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Attachable, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Attachable"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Attachable))]
    public static T ResetAttachable<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Attachable));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Attachable"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Attachable))]
    public static T EnableAttachable<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Attachable, true));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Attachable"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Attachable))]
    public static T DisableAttachable<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Attachable, false));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Attachable"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Attachable))]
    public static T ToggleAttachable<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Attachable, !o.Attachable));
    #endregion
    #region AuxAddress
    /// <inheritdoc cref="DockerNetworkCreateSettings.AuxAddress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.AuxAddress))]
    public static T SetAuxAddress<T>(this T o, IDictionary<string, string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.AuxAddress, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerNetworkCreateSettings.AuxAddress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.AuxAddress))]
    public static T SetAuxAddress<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.SetDictionary(() => o.AuxAddress, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.AuxAddress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.AuxAddress))]
    public static T AddAuxAddress<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddDictionary(() => o.AuxAddress, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.AuxAddress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.AuxAddress))]
    public static T RemoveAuxAddress<T>(this T o, string k) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.AuxAddress, k));
    /// <inheritdoc cref="DockerNetworkCreateSettings.AuxAddress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.AuxAddress))]
    public static T ClearAuxAddress<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearDictionary(() => o.AuxAddress));
    #endregion
    #region ConfigFrom
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigFrom"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigFrom))]
    public static T SetConfigFrom<T>(this T o, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.ConfigFrom, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigFrom"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigFrom))]
    public static T ResetConfigFrom<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.ConfigFrom));
    #endregion
    #region ConfigOnly
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigOnly"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigOnly))]
    public static T SetConfigOnly<T>(this T o, bool? v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.ConfigOnly, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigOnly"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigOnly))]
    public static T ResetConfigOnly<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.ConfigOnly));
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigOnly"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigOnly))]
    public static T EnableConfigOnly<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.ConfigOnly, true));
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigOnly"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigOnly))]
    public static T DisableConfigOnly<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.ConfigOnly, false));
    /// <inheritdoc cref="DockerNetworkCreateSettings.ConfigOnly"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.ConfigOnly))]
    public static T ToggleConfigOnly<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.ConfigOnly, !o.ConfigOnly));
    #endregion
    #region Driver
    /// <inheritdoc cref="DockerNetworkCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Driver))]
    public static T SetDriver<T>(this T o, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Driver, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Driver))]
    public static T ResetDriver<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Driver));
    #endregion
    #region Gateway
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T SetGateway<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T SetGateway<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T AddGateway<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T AddGateway<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T RemoveGateway<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T RemoveGateway<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Gateway, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Gateway"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Gateway))]
    public static T ClearGateway<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearCollection(() => o.Gateway));
    #endregion
    #region Ingress
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ingress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ingress))]
    public static T SetIngress<T>(this T o, bool? v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ingress, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ingress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ingress))]
    public static T ResetIngress<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Ingress));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ingress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ingress))]
    public static T EnableIngress<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ingress, true));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ingress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ingress))]
    public static T DisableIngress<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ingress, false));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ingress"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ingress))]
    public static T ToggleIngress<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ingress, !o.Ingress));
    #endregion
    #region Internal
    /// <inheritdoc cref="DockerNetworkCreateSettings.Internal"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Internal))]
    public static T SetInternal<T>(this T o, bool? v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Internal, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Internal"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Internal))]
    public static T ResetInternal<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Internal));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Internal"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Internal))]
    public static T EnableInternal<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Internal, true));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Internal"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Internal))]
    public static T DisableInternal<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Internal, false));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Internal"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Internal))]
    public static T ToggleInternal<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Internal, !o.Internal));
    #endregion
    #region IpRange
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T SetIpRange<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T SetIpRange<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T AddIpRange<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T AddIpRange<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T RemoveIpRange<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T RemoveIpRange<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.IpRange, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpRange"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpRange))]
    public static T ClearIpRange<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearCollection(() => o.IpRange));
    #endregion
    #region IpamDriver
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamDriver"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamDriver))]
    public static T SetIpamDriver<T>(this T o, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.IpamDriver, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamDriver"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamDriver))]
    public static T ResetIpamDriver<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.IpamDriver));
    #endregion
    #region IpamOpt
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamOpt))]
    public static T SetIpamOpt<T>(this T o, IDictionary<string, string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.IpamOpt, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamOpt))]
    public static T SetIpamOpt<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.SetDictionary(() => o.IpamOpt, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamOpt))]
    public static T AddIpamOpt<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddDictionary(() => o.IpamOpt, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamOpt))]
    public static T RemoveIpamOpt<T>(this T o, string k) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.IpamOpt, k));
    /// <inheritdoc cref="DockerNetworkCreateSettings.IpamOpt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.IpamOpt))]
    public static T ClearIpamOpt<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearDictionary(() => o.IpamOpt));
    #endregion
    #region Ipv6
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ipv6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ipv6))]
    public static T SetIpv6<T>(this T o, bool? v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ipv6, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ipv6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ipv6))]
    public static T ResetIpv6<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Ipv6));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ipv6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ipv6))]
    public static T EnableIpv6<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ipv6, true));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ipv6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ipv6))]
    public static T DisableIpv6<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ipv6, false));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Ipv6"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Ipv6))]
    public static T ToggleIpv6<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Ipv6, !o.Ipv6));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Opt
    /// <inheritdoc cref="DockerNetworkCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Opt))]
    public static T SetOpt<T>(this T o, IDictionary<string, string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Opt, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Opt))]
    public static T SetOpt<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.SetDictionary(() => o.Opt, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Opt))]
    public static T AddOpt<T>(this T o, string k, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddDictionary(() => o.Opt, k, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Opt))]
    public static T RemoveOpt<T>(this T o, string k) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveDictionary(() => o.Opt, k));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Opt"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Opt))]
    public static T ClearOpt<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearDictionary(() => o.Opt));
    #endregion
    #region Scope
    /// <inheritdoc cref="DockerNetworkCreateSettings.Scope"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Scope))]
    public static T SetScope<T>(this T o, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Scope, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Scope"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Scope))]
    public static T ResetScope<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Scope));
    #endregion
    #region Subnet
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T SetSubnet<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T SetSubnet<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T AddSubnet<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T AddSubnet<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.AddCollection(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T RemoveSubnet<T>(this T o, params string[] v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T RemoveSubnet<T>(this T o, IEnumerable<string> v) where T : DockerNetworkCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Subnet, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Subnet"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Subnet))]
    public static T ClearSubnet<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.ClearCollection(() => o.Subnet));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerNetworkCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerNetworkCreateSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerNetworkCreateSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkCreateSettings), Property = nameof(DockerNetworkCreateSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerNetworkCreateSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
}
#endregion
#region DockerVolumeLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumeLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerVolumeLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerVolumeLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerVolumeLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerVolumeLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerVolumeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerVolumeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerVolumeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerVolumeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerVolumeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerVolumeLsSettings), Property = nameof(DockerVolumeLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerVolumeLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerTrustInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustInspectSettingsExtensions
{
    #region Images
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerTrustInspectSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerTrustInspectSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerTrustInspectSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerTrustInspectSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerTrustInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerTrustInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerTrustInspectSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerTrustInspectSettings), Property = nameof(DockerTrustInspectSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerTrustInspectSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerNetworkInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerNetworkInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Verbose
    /// <inheritdoc cref="DockerNetworkInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
    #region Networks
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T SetNetworks<T>(this T o, params string[] v) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T SetNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkInspectSettings => o.Modify(b => b.Set(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T AddNetworks<T>(this T o, params string[] v) where T : DockerNetworkInspectSettings => o.Modify(b => b.AddCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T AddNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkInspectSettings => o.Modify(b => b.AddCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T RemoveNetworks<T>(this T o, params string[] v) where T : DockerNetworkInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T RemoveNetworks<T>(this T o, IEnumerable<string> v) where T : DockerNetworkInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Networks, v));
    /// <inheritdoc cref="DockerNetworkInspectSettings.Networks"/>
    [Pure] [Builder(Type = typeof(DockerNetworkInspectSettings), Property = nameof(DockerNetworkInspectSettings.Networks))]
    public static T ClearNetworks<T>(this T o) where T : DockerNetworkInspectSettings => o.Modify(b => b.ClearCollection(() => o.Networks));
    #endregion
}
#endregion
#region DockerEngineActivateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerEngineActivateSettingsExtensions
{
    #region Containerd
    /// <inheritdoc cref="DockerEngineActivateSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Containerd))]
    public static T SetContainerd<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Containerd, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.Containerd"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Containerd))]
    public static T ResetContainerd<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.Containerd));
    #endregion
    #region DisplayOnly
    /// <inheritdoc cref="DockerEngineActivateSettings.DisplayOnly"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.DisplayOnly))]
    public static T SetDisplayOnly<T>(this T o, bool? v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.DisplayOnly, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.DisplayOnly"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.DisplayOnly))]
    public static T ResetDisplayOnly<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.DisplayOnly));
    /// <inheritdoc cref="DockerEngineActivateSettings.DisplayOnly"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.DisplayOnly))]
    public static T EnableDisplayOnly<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.DisplayOnly, true));
    /// <inheritdoc cref="DockerEngineActivateSettings.DisplayOnly"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.DisplayOnly))]
    public static T DisableDisplayOnly<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.DisplayOnly, false));
    /// <inheritdoc cref="DockerEngineActivateSettings.DisplayOnly"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.DisplayOnly))]
    public static T ToggleDisplayOnly<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.DisplayOnly, !o.DisplayOnly));
    #endregion
    #region EngineImage
    /// <inheritdoc cref="DockerEngineActivateSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.EngineImage))]
    public static T SetEngineImage<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.EngineImage, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.EngineImage"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.EngineImage))]
    public static T ResetEngineImage<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.EngineImage));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerEngineActivateSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region License
    /// <inheritdoc cref="DockerEngineActivateSettings.License"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.License))]
    public static T SetLicense<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.License, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.License"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.License))]
    public static T ResetLicense<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.License));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerEngineActivateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerEngineActivateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerEngineActivateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerEngineActivateSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region RegistryPrefix
    /// <inheritdoc cref="DockerEngineActivateSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.RegistryPrefix))]
    public static T SetRegistryPrefix<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.RegistryPrefix, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.RegistryPrefix"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.RegistryPrefix))]
    public static T ResetRegistryPrefix<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.RegistryPrefix));
    #endregion
    #region Version
    /// <inheritdoc cref="DockerEngineActivateSettings.Version"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Version))]
    public static T SetVersion<T>(this T o, string v) where T : DockerEngineActivateSettings => o.Modify(b => b.Set(() => o.Version, v));
    /// <inheritdoc cref="DockerEngineActivateSettings.Version"/>
    [Pure] [Builder(Type = typeof(DockerEngineActivateSettings), Property = nameof(DockerEngineActivateSettings.Version))]
    public static T ResetVersion<T>(this T o) where T : DockerEngineActivateSettings => o.Modify(b => b.Remove(() => o.Version));
    #endregion
}
#endregion
#region DockerContextUseSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextUseSettingsExtensions
{
    #region Context
    /// <inheritdoc cref="DockerContextUseSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextUseSettings), Property = nameof(DockerContextUseSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextUseSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextUseSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextUseSettings), Property = nameof(DockerContextUseSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextUseSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
}
#endregion
#region DockerVolumeRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumeRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerVolumeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerVolumeRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerVolumeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerVolumeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerVolumeRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Volumes
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T SetVolumes<T>(this T o, params string[] v) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T SetVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeRmSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T AddVolumes<T>(this T o, params string[] v) where T : DockerVolumeRmSettings => o.Modify(b => b.AddCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T AddVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeRmSettings => o.Modify(b => b.AddCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T RemoveVolumes<T>(this T o, params string[] v) where T : DockerVolumeRmSettings => o.Modify(b => b.RemoveCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T RemoveVolumes<T>(this T o, IEnumerable<string> v) where T : DockerVolumeRmSettings => o.Modify(b => b.RemoveCollection(() => o.Volumes, v));
    /// <inheritdoc cref="DockerVolumeRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerVolumeRmSettings), Property = nameof(DockerVolumeRmSettings.Volumes))]
    public static T ClearVolumes<T>(this T o) where T : DockerVolumeRmSettings => o.Modify(b => b.ClearCollection(() => o.Volumes));
    #endregion
}
#endregion
#region DockerManifestCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerManifestCreateSettingsExtensions
{
    #region ManifestList
    /// <inheritdoc cref="DockerManifestCreateSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.ManifestList))]
    public static T SetManifestList<T>(this T o, string v) where T : DockerManifestCreateSettings => o.Modify(b => b.Set(() => o.ManifestList, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.ManifestList))]
    public static T ResetManifestList<T>(this T o) where T : DockerManifestCreateSettings => o.Modify(b => b.Remove(() => o.ManifestList));
    #endregion
    #region Manifests
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T SetManifests<T>(this T o, params string[] v) where T : DockerManifestCreateSettings => o.Modify(b => b.Set(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T SetManifests<T>(this T o, IEnumerable<string> v) where T : DockerManifestCreateSettings => o.Modify(b => b.Set(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T AddManifests<T>(this T o, params string[] v) where T : DockerManifestCreateSettings => o.Modify(b => b.AddCollection(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T AddManifests<T>(this T o, IEnumerable<string> v) where T : DockerManifestCreateSettings => o.Modify(b => b.AddCollection(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T RemoveManifests<T>(this T o, params string[] v) where T : DockerManifestCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T RemoveManifests<T>(this T o, IEnumerable<string> v) where T : DockerManifestCreateSettings => o.Modify(b => b.RemoveCollection(() => o.Manifests, v));
    /// <inheritdoc cref="DockerManifestCreateSettings.Manifests"/>
    [Pure] [Builder(Type = typeof(DockerManifestCreateSettings), Property = nameof(DockerManifestCreateSettings.Manifests))]
    public static T ClearManifests<T>(this T o) where T : DockerManifestCreateSettings => o.Modify(b => b.ClearCollection(() => o.Manifests));
    #endregion
}
#endregion
#region DockerManifestPushSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerManifestPushSettingsExtensions
{
    #region Insecure
    /// <inheritdoc cref="DockerManifestPushSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Insecure))]
    public static T SetInsecure<T>(this T o, bool? v) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Insecure, v));
    /// <inheritdoc cref="DockerManifestPushSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Insecure))]
    public static T ResetInsecure<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Remove(() => o.Insecure));
    /// <inheritdoc cref="DockerManifestPushSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Insecure))]
    public static T EnableInsecure<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Insecure, true));
    /// <inheritdoc cref="DockerManifestPushSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Insecure))]
    public static T DisableInsecure<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Insecure, false));
    /// <inheritdoc cref="DockerManifestPushSettings.Insecure"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Insecure))]
    public static T ToggleInsecure<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Insecure, !o.Insecure));
    #endregion
    #region Purge
    /// <inheritdoc cref="DockerManifestPushSettings.Purge"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Purge))]
    public static T SetPurge<T>(this T o, bool? v) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Purge, v));
    /// <inheritdoc cref="DockerManifestPushSettings.Purge"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Purge))]
    public static T ResetPurge<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Remove(() => o.Purge));
    /// <inheritdoc cref="DockerManifestPushSettings.Purge"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Purge))]
    public static T EnablePurge<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Purge, true));
    /// <inheritdoc cref="DockerManifestPushSettings.Purge"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Purge))]
    public static T DisablePurge<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Purge, false));
    /// <inheritdoc cref="DockerManifestPushSettings.Purge"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.Purge))]
    public static T TogglePurge<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.Purge, !o.Purge));
    #endregion
    #region ManifestList
    /// <inheritdoc cref="DockerManifestPushSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.ManifestList))]
    public static T SetManifestList<T>(this T o, string v) where T : DockerManifestPushSettings => o.Modify(b => b.Set(() => o.ManifestList, v));
    /// <inheritdoc cref="DockerManifestPushSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestPushSettings), Property = nameof(DockerManifestPushSettings.ManifestList))]
    public static T ResetManifestList<T>(this T o) where T : DockerManifestPushSettings => o.Modify(b => b.Remove(() => o.ManifestList));
    #endregion
}
#endregion
#region DockerPluginEnableSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginEnableSettingsExtensions
{
    #region Timeout
    /// <inheritdoc cref="DockerPluginEnableSettings.Timeout"/>
    [Pure] [Builder(Type = typeof(DockerPluginEnableSettings), Property = nameof(DockerPluginEnableSettings.Timeout))]
    public static T SetTimeout<T>(this T o, int? v) where T : DockerPluginEnableSettings => o.Modify(b => b.Set(() => o.Timeout, v));
    /// <inheritdoc cref="DockerPluginEnableSettings.Timeout"/>
    [Pure] [Builder(Type = typeof(DockerPluginEnableSettings), Property = nameof(DockerPluginEnableSettings.Timeout))]
    public static T ResetTimeout<T>(this T o) where T : DockerPluginEnableSettings => o.Modify(b => b.Remove(() => o.Timeout));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginEnableSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginEnableSettings), Property = nameof(DockerPluginEnableSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginEnableSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginEnableSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginEnableSettings), Property = nameof(DockerPluginEnableSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginEnableSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
}
#endregion
#region DockerImportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImportSettingsExtensions
{
    #region Change
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T SetChange<T>(this T o, params string[] v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T SetChange<T>(this T o, IEnumerable<string> v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T AddChange<T>(this T o, params string[] v) where T : DockerImportSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T AddChange<T>(this T o, IEnumerable<string> v) where T : DockerImportSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T RemoveChange<T>(this T o, params string[] v) where T : DockerImportSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T RemoveChange<T>(this T o, IEnumerable<string> v) where T : DockerImportSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Change))]
    public static T ClearChange<T>(this T o) where T : DockerImportSettings => o.Modify(b => b.ClearCollection(() => o.Change));
    #endregion
    #region Message
    /// <inheritdoc cref="DockerImportSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Message))]
    public static T SetMessage<T>(this T o, string v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.Message, v));
    /// <inheritdoc cref="DockerImportSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Message))]
    public static T ResetMessage<T>(this T o) where T : DockerImportSettings => o.Modify(b => b.Remove(() => o.Message));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerImportSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerImportSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerImportSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region File
    /// <inheritdoc cref="DockerImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerImportSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerImportSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerImportSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerImportSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImportSettings), Property = nameof(DockerImportSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerImportSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerContainerRunSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerRunSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerContainerRunSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region Attach
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T SetAttach<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T SetAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T AddAttach<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T AddAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T RemoveAttach<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T RemoveAttach<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Attach))]
    public static T ClearAttach<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Attach));
    #endregion
    #region BlkioWeight
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region BlkioWeightDevice
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T SetBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T AddBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T RemoveBlkioWeightDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.BlkioWeightDevice, v));
    /// <inheritdoc cref="DockerContainerRunSettings.BlkioWeightDevice"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.BlkioWeightDevice))]
    public static T ClearBlkioWeightDevice<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.BlkioWeightDevice));
    #endregion
    #region CapAdd
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T SetCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T AddCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T RemoveCapAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapAdd))]
    public static T ClearCapAdd<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.CapAdd));
    #endregion
    #region CapDrop
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T SetCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T AddCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T RemoveCapDrop<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.CapDrop, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CapDrop"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CapDrop))]
    public static T ClearCapDrop<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.CapDrop));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerContainerRunSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Cidfile
    /// <inheritdoc cref="DockerContainerRunSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Cidfile))]
    public static T SetCidfile<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Cidfile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Cidfile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Cidfile))]
    public static T ResetCidfile<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Cidfile));
    #endregion
    #region CpuCount
    /// <inheritdoc cref="DockerContainerRunSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuCount))]
    public static T SetCpuCount<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuCount, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuCount"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuCount))]
    public static T ResetCpuCount<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuCount));
    #endregion
    #region CpuPercent
    /// <inheritdoc cref="DockerContainerRunSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuPercent))]
    public static T SetCpuPercent<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuPercent, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuPercent"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuPercent))]
    public static T ResetCpuPercent<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuPercent));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerContainerRunSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerContainerRunSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerContainerRunSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerContainerRunSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerContainerRunSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerContainerRunSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerContainerRunSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerContainerRunSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerContainerRunSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region Detach
    /// <inheritdoc cref="DockerContainerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerContainerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerContainerRunSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Device
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T SetDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T SetDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T AddDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T AddDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T RemoveDevice<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T RemoveDevice<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Device, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Device"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Device))]
    public static T ClearDevice<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Device));
    #endregion
    #region DeviceCgroupRule
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T SetDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T AddDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T RemoveDeviceCgroupRule<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceCgroupRule, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceCgroupRule"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceCgroupRule))]
    public static T ClearDeviceCgroupRule<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceCgroupRule));
    #endregion
    #region DeviceReadBps
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T SetDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T AddDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T RemoveDeviceReadBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadBps))]
    public static T ClearDeviceReadBps<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadBps));
    #endregion
    #region DeviceReadIops
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T SetDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T AddDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T RemoveDeviceReadIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceReadIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceReadIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceReadIops))]
    public static T ClearDeviceReadIops<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceReadIops));
    #endregion
    #region DeviceWriteBps
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T SetDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T AddDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T RemoveDeviceWriteBps<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteBps, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteBps"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteBps))]
    public static T ClearDeviceWriteBps<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteBps));
    #endregion
    #region DeviceWriteIops
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T SetDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T AddDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T RemoveDeviceWriteIops<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DeviceWriteIops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DeviceWriteIops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DeviceWriteIops))]
    public static T ClearDeviceWriteIops<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DeviceWriteIops));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerContainerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerContainerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerContainerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerContainerRunSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Dns
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T SetDns<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T SetDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T AddDns<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T AddDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T RemoveDns<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T RemoveDns<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Dns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Dns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Dns))]
    public static T ClearDns<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Dns));
    #endregion
    #region DnsOpt
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T SetDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T AddDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T RemoveDnsOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOpt))]
    public static T ClearDnsOpt<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsOpt));
    #endregion
    #region DnsOption
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T SetDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T AddDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T RemoveDnsOption<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsOption, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsOption"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsOption))]
    public static T ClearDnsOption<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsOption));
    #endregion
    #region DnsSearch
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T SetDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T AddDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T RemoveDnsSearch<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.DnsSearch, v));
    /// <inheritdoc cref="DockerContainerRunSettings.DnsSearch"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.DnsSearch))]
    public static T ClearDnsSearch<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.DnsSearch));
    #endregion
    #region Domainname
    /// <inheritdoc cref="DockerContainerRunSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Domainname))]
    public static T SetDomainname<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Domainname, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Domainname"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Domainname))]
    public static T ResetDomainname<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Domainname));
    #endregion
    #region Entrypoint
    /// <inheritdoc cref="DockerContainerRunSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Entrypoint))]
    public static T SetEntrypoint<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Entrypoint, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Entrypoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Entrypoint))]
    public static T ResetEntrypoint<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Entrypoint));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region EnvFile
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T SetEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T AddEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T RemoveEnvFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.EnvFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.EnvFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.EnvFile))]
    public static T ClearEnvFile<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.EnvFile));
    #endregion
    #region Expose
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T SetExpose<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T SetExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T AddExpose<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T AddExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T RemoveExpose<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T RemoveExpose<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Expose, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Expose"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Expose))]
    public static T ClearExpose<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Expose));
    #endregion
    #region Gpus
    /// <inheritdoc cref="DockerContainerRunSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Gpus))]
    public static T SetGpus<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Gpus, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Gpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Gpus))]
    public static T ResetGpus<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Gpus));
    #endregion
    #region GroupAdd
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T SetGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T AddGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T RemoveGroupAdd<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.GroupAdd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.GroupAdd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.GroupAdd))]
    public static T ClearGroupAdd<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.GroupAdd));
    #endregion
    #region HealthCmd
    /// <inheritdoc cref="DockerContainerRunSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthCmd))]
    public static T SetHealthCmd<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.HealthCmd, v));
    /// <inheritdoc cref="DockerContainerRunSettings.HealthCmd"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthCmd))]
    public static T ResetHealthCmd<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.HealthCmd));
    #endregion
    #region HealthInterval
    /// <inheritdoc cref="DockerContainerRunSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthInterval))]
    public static T SetHealthInterval<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.HealthInterval, v));
    /// <inheritdoc cref="DockerContainerRunSettings.HealthInterval"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthInterval))]
    public static T ResetHealthInterval<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.HealthInterval));
    #endregion
    #region HealthRetries
    /// <inheritdoc cref="DockerContainerRunSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthRetries))]
    public static T SetHealthRetries<T>(this T o, int? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.HealthRetries, v));
    /// <inheritdoc cref="DockerContainerRunSettings.HealthRetries"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthRetries))]
    public static T ResetHealthRetries<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.HealthRetries));
    #endregion
    #region HealthStartPeriod
    /// <inheritdoc cref="DockerContainerRunSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthStartPeriod))]
    public static T SetHealthStartPeriod<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.HealthStartPeriod, v));
    /// <inheritdoc cref="DockerContainerRunSettings.HealthStartPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthStartPeriod))]
    public static T ResetHealthStartPeriod<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.HealthStartPeriod));
    #endregion
    #region HealthTimeout
    /// <inheritdoc cref="DockerContainerRunSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthTimeout))]
    public static T SetHealthTimeout<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.HealthTimeout, v));
    /// <inheritdoc cref="DockerContainerRunSettings.HealthTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.HealthTimeout))]
    public static T ResetHealthTimeout<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.HealthTimeout));
    #endregion
    #region Help
    /// <inheritdoc cref="DockerContainerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Help))]
    public static T SetHelp<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Help, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Help))]
    public static T ResetHelp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Help));
    /// <inheritdoc cref="DockerContainerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Help))]
    public static T EnableHelp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Help, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Help))]
    public static T DisableHelp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Help, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Help"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Help))]
    public static T ToggleHelp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Help, !o.Help));
    #endregion
    #region Hostname
    /// <inheritdoc cref="DockerContainerRunSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Hostname))]
    public static T SetHostname<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Hostname, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Hostname"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Hostname))]
    public static T ResetHostname<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Hostname));
    #endregion
    #region Init
    /// <inheritdoc cref="DockerContainerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Init))]
    public static T SetInit<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Init, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Init))]
    public static T ResetInit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Init));
    /// <inheritdoc cref="DockerContainerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Init))]
    public static T EnableInit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Init, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Init))]
    public static T DisableInit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Init, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Init"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Init))]
    public static T ToggleInit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Init, !o.Init));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerContainerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerContainerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region IoMaxbandwidth
    /// <inheritdoc cref="DockerContainerRunSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.IoMaxbandwidth))]
    public static T SetIoMaxbandwidth<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.IoMaxbandwidth, v));
    /// <inheritdoc cref="DockerContainerRunSettings.IoMaxbandwidth"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.IoMaxbandwidth))]
    public static T ResetIoMaxbandwidth<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.IoMaxbandwidth));
    #endregion
    #region IoMaxiops
    /// <inheritdoc cref="DockerContainerRunSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.IoMaxiops))]
    public static T SetIoMaxiops<T>(this T o, int? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.IoMaxiops, v));
    /// <inheritdoc cref="DockerContainerRunSettings.IoMaxiops"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.IoMaxiops))]
    public static T ResetIoMaxiops<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.IoMaxiops));
    #endregion
    #region Ip
    /// <inheritdoc cref="DockerContainerRunSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ip))]
    public static T SetIp<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Ip, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Ip"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ip))]
    public static T ResetIp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Ip));
    #endregion
    #region Ip6
    /// <inheritdoc cref="DockerContainerRunSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ip6))]
    public static T SetIp6<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Ip6, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Ip6"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ip6))]
    public static T ResetIp6<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Ip6));
    #endregion
    #region Ipc
    /// <inheritdoc cref="DockerContainerRunSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ipc))]
    public static T SetIpc<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Ipc, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Ipc"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ipc))]
    public static T ResetIpc<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Ipc));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerContainerRunSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerContainerRunSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerContainerRunSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region LabelFile
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T SetLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T AddLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T RemoveLabelFile<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LabelFile, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LabelFile"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LabelFile))]
    public static T ClearLabelFile<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.LabelFile));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T SetLink<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T SetLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T AddLink<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T AddLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T RemoveLink<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T RemoveLink<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Link))]
    public static T ClearLink<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Link));
    #endregion
    #region LinkLocalIp
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T SetLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T AddLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T RemoveLinkLocalIp<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LinkLocalIp, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LinkLocalIp"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LinkLocalIp))]
    public static T ClearLinkLocalIp<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.LinkLocalIp));
    #endregion
    #region LogDriver
    /// <inheritdoc cref="DockerContainerRunSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogDriver))]
    public static T SetLogDriver<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LogDriver, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogDriver))]
    public static T ResetLogDriver<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.LogDriver));
    #endregion
    #region LogOpt
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T SetLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T AddLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T RemoveLogOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.LogOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.LogOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.LogOpt))]
    public static T ClearLogOpt<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.LogOpt));
    #endregion
    #region MacAddress
    /// <inheritdoc cref="DockerContainerRunSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MacAddress))]
    public static T SetMacAddress<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.MacAddress, v));
    /// <inheritdoc cref="DockerContainerRunSettings.MacAddress"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MacAddress))]
    public static T ResetMacAddress<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.MacAddress));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerContainerRunSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerContainerRunSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerContainerRunSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerContainerRunSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerContainerRunSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region MemorySwappiness
    /// <inheritdoc cref="DockerContainerRunSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemorySwappiness))]
    public static T SetMemorySwappiness<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.MemorySwappiness, v));
    /// <inheritdoc cref="DockerContainerRunSettings.MemorySwappiness"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.MemorySwappiness))]
    public static T ResetMemorySwappiness<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.MemorySwappiness));
    #endregion
    #region Mount
    /// <inheritdoc cref="DockerContainerRunSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Mount))]
    public static T SetMount<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Mount, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Mount"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Mount))]
    public static T ResetMount<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Mount));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerContainerRunSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Net
    /// <inheritdoc cref="DockerContainerRunSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Net))]
    public static T SetNet<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Net, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Net"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Net))]
    public static T ResetNet<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Net));
    #endregion
    #region NetAlias
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T SetNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T AddNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T RemoveNetAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetAlias))]
    public static T ClearNetAlias<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.NetAlias));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerContainerRunSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NetworkAlias
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T SetNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T AddNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T RemoveNetworkAlias<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.NetworkAlias, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NetworkAlias"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NetworkAlias))]
    public static T ClearNetworkAlias<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.NetworkAlias));
    #endregion
    #region NoHealthcheck
    /// <inheritdoc cref="DockerContainerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NoHealthcheck))]
    public static T SetNoHealthcheck<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, v));
    /// <inheritdoc cref="DockerContainerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NoHealthcheck))]
    public static T ResetNoHealthcheck<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.NoHealthcheck));
    /// <inheritdoc cref="DockerContainerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NoHealthcheck))]
    public static T EnableNoHealthcheck<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, true));
    /// <inheritdoc cref="DockerContainerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NoHealthcheck))]
    public static T DisableNoHealthcheck<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, false));
    /// <inheritdoc cref="DockerContainerRunSettings.NoHealthcheck"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.NoHealthcheck))]
    public static T ToggleNoHealthcheck<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.NoHealthcheck, !o.NoHealthcheck));
    #endregion
    #region OomKillDisable
    /// <inheritdoc cref="DockerContainerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomKillDisable))]
    public static T SetOomKillDisable<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, v));
    /// <inheritdoc cref="DockerContainerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomKillDisable))]
    public static T ResetOomKillDisable<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.OomKillDisable));
    /// <inheritdoc cref="DockerContainerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomKillDisable))]
    public static T EnableOomKillDisable<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, true));
    /// <inheritdoc cref="DockerContainerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomKillDisable))]
    public static T DisableOomKillDisable<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, false));
    /// <inheritdoc cref="DockerContainerRunSettings.OomKillDisable"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomKillDisable))]
    public static T ToggleOomKillDisable<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.OomKillDisable, !o.OomKillDisable));
    #endregion
    #region OomScoreAdj
    /// <inheritdoc cref="DockerContainerRunSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomScoreAdj))]
    public static T SetOomScoreAdj<T>(this T o, int? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.OomScoreAdj, v));
    /// <inheritdoc cref="DockerContainerRunSettings.OomScoreAdj"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.OomScoreAdj))]
    public static T ResetOomScoreAdj<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.OomScoreAdj));
    #endregion
    #region Pid
    /// <inheritdoc cref="DockerContainerRunSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Pid))]
    public static T SetPid<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Pid, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Pid"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Pid))]
    public static T ResetPid<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Pid));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerContainerRunSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerContainerRunSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerContainerRunSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerContainerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerContainerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Publish
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T SetPublish<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T SetPublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T AddPublish<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T AddPublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T RemovePublish<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T RemovePublish<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Publish, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Publish"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Publish))]
    public static T ClearPublish<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Publish));
    #endregion
    #region PublishAll
    /// <inheritdoc cref="DockerContainerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PublishAll))]
    public static T SetPublishAll<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, v));
    /// <inheritdoc cref="DockerContainerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PublishAll))]
    public static T ResetPublishAll<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.PublishAll));
    /// <inheritdoc cref="DockerContainerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PublishAll))]
    public static T EnablePublishAll<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, true));
    /// <inheritdoc cref="DockerContainerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PublishAll))]
    public static T DisablePublishAll<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, false));
    /// <inheritdoc cref="DockerContainerRunSettings.PublishAll"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.PublishAll))]
    public static T TogglePublishAll<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.PublishAll, !o.PublishAll));
    #endregion
    #region ReadOnly
    /// <inheritdoc cref="DockerContainerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ReadOnly))]
    public static T SetReadOnly<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, v));
    /// <inheritdoc cref="DockerContainerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ReadOnly))]
    public static T ResetReadOnly<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.ReadOnly));
    /// <inheritdoc cref="DockerContainerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ReadOnly))]
    public static T EnableReadOnly<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, true));
    /// <inheritdoc cref="DockerContainerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ReadOnly))]
    public static T DisableReadOnly<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, false));
    /// <inheritdoc cref="DockerContainerRunSettings.ReadOnly"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ReadOnly))]
    public static T ToggleReadOnly<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.ReadOnly, !o.ReadOnly));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerContainerRunSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerContainerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerContainerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Runtime
    /// <inheritdoc cref="DockerContainerRunSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerContainerRunSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerContainerRunSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region SigProxy
    /// <inheritdoc cref="DockerContainerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SigProxy))]
    public static T SetSigProxy<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, v));
    /// <inheritdoc cref="DockerContainerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SigProxy))]
    public static T ResetSigProxy<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.SigProxy));
    /// <inheritdoc cref="DockerContainerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SigProxy))]
    public static T EnableSigProxy<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, true));
    /// <inheritdoc cref="DockerContainerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SigProxy))]
    public static T DisableSigProxy<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, false));
    /// <inheritdoc cref="DockerContainerRunSettings.SigProxy"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.SigProxy))]
    public static T ToggleSigProxy<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.SigProxy, !o.SigProxy));
    #endregion
    #region StopSignal
    /// <inheritdoc cref="DockerContainerRunSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StopSignal))]
    public static T SetStopSignal<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.StopSignal, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StopSignal"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StopSignal))]
    public static T ResetStopSignal<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.StopSignal));
    #endregion
    #region StopTimeout
    /// <inheritdoc cref="DockerContainerRunSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StopTimeout))]
    public static T SetStopTimeout<T>(this T o, int? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.StopTimeout, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StopTimeout"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StopTimeout))]
    public static T ResetStopTimeout<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.StopTimeout));
    #endregion
    #region StorageOpt
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T SetStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T AddStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T RemoveStorageOpt<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.StorageOpt, v));
    /// <inheritdoc cref="DockerContainerRunSettings.StorageOpt"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.StorageOpt))]
    public static T ClearStorageOpt<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.StorageOpt));
    #endregion
    #region Sysctl
    /// <inheritdoc cref="DockerContainerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, IDictionary<string, string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Sysctl, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerContainerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Sysctl))]
    public static T SetSysctl<T>(this T o, string k, string v) where T : DockerContainerRunSettings => o.Modify(b => b.SetDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Sysctl))]
    public static T AddSysctl<T>(this T o, string k, string v) where T : DockerContainerRunSettings => o.Modify(b => b.AddDictionary(() => o.Sysctl, k, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Sysctl))]
    public static T RemoveSysctl<T>(this T o, string k) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveDictionary(() => o.Sysctl, k));
    /// <inheritdoc cref="DockerContainerRunSettings.Sysctl"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Sysctl))]
    public static T ClearSysctl<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearDictionary(() => o.Sysctl));
    #endregion
    #region Tmpfs
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T SetTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T AddTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T RemoveTmpfs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Tmpfs, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tmpfs"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tmpfs))]
    public static T ClearTmpfs<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Tmpfs));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerContainerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerContainerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerContainerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerContainerRunSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerContainerRunSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region User
    /// <inheritdoc cref="DockerContainerRunSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerContainerRunSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Userns
    /// <inheritdoc cref="DockerContainerRunSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Userns))]
    public static T SetUserns<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Userns, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Userns"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Userns))]
    public static T ResetUserns<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Userns));
    #endregion
    #region Uts
    /// <inheritdoc cref="DockerContainerRunSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Uts))]
    public static T SetUts<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Uts, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Uts"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Uts))]
    public static T ResetUts<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Uts));
    #endregion
    #region Volume
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T SetVolume<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T SetVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T AddVolume<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T AddVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T RemoveVolume<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T RemoveVolume<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Volume, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Volume"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Volume))]
    public static T ClearVolume<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Volume));
    #endregion
    #region VolumeDriver
    /// <inheritdoc cref="DockerContainerRunSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumeDriver))]
    public static T SetVolumeDriver<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.VolumeDriver, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumeDriver"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumeDriver))]
    public static T ResetVolumeDriver<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.VolumeDriver));
    #endregion
    #region VolumesFrom
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T SetVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T AddVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T RemoveVolumesFrom<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.VolumesFrom, v));
    /// <inheritdoc cref="DockerContainerRunSettings.VolumesFrom"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.VolumesFrom))]
    public static T ClearVolumesFrom<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.VolumesFrom));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerContainerRunSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerContainerRunSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerContainerRunSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerRunSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerRunSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerRunSettings), Property = nameof(DockerContainerRunSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerContainerRunSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerNodeInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerNodeInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Pretty
    /// <inheritdoc cref="DockerNodeInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Pretty))]
    public static T SetPretty<T>(this T o, bool? v) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Pretty, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Pretty))]
    public static T ResetPretty<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.Remove(() => o.Pretty));
    /// <inheritdoc cref="DockerNodeInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Pretty))]
    public static T EnablePretty<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Pretty, true));
    /// <inheritdoc cref="DockerNodeInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Pretty))]
    public static T DisablePretty<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Pretty, false));
    /// <inheritdoc cref="DockerNodeInspectSettings.Pretty"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Pretty))]
    public static T TogglePretty<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Pretty, !o.Pretty));
    #endregion
    #region Selves
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T SetSelves<T>(this T o, params string[] v) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T SetSelves<T>(this T o, IEnumerable<string> v) where T : DockerNodeInspectSettings => o.Modify(b => b.Set(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T AddSelves<T>(this T o, params string[] v) where T : DockerNodeInspectSettings => o.Modify(b => b.AddCollection(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T AddSelves<T>(this T o, IEnumerable<string> v) where T : DockerNodeInspectSettings => o.Modify(b => b.AddCollection(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T RemoveSelves<T>(this T o, params string[] v) where T : DockerNodeInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T RemoveSelves<T>(this T o, IEnumerable<string> v) where T : DockerNodeInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Selves, v));
    /// <inheritdoc cref="DockerNodeInspectSettings.Selves"/>
    [Pure] [Builder(Type = typeof(DockerNodeInspectSettings), Property = nameof(DockerNodeInspectSettings.Selves))]
    public static T ClearSelves<T>(this T o) where T : DockerNodeInspectSettings => o.Modify(b => b.ClearCollection(() => o.Selves));
    #endregion
}
#endregion
#region DockerSaveSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSaveSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="DockerSaveSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerSaveSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerSaveSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerSaveSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Images
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerSaveSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerSaveSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerSaveSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerSaveSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerSaveSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerSaveSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerSaveSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerSaveSettings), Property = nameof(DockerSaveSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerSaveSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerContainerStatsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerStatsSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerContainerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerContainerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerContainerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerContainerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerContainerStatsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoStream
    /// <inheritdoc cref="DockerContainerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoStream))]
    public static T SetNoStream<T>(this T o, bool? v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoStream))]
    public static T ResetNoStream<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Remove(() => o.NoStream));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoStream))]
    public static T EnableNoStream<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, true));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoStream))]
    public static T DisableNoStream<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, false));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoStream))]
    public static T ToggleNoStream<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, !o.NoStream));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerContainerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerContainerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStatsSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerStatsSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStatsSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerStatsSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStatsSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStatsSettings), Property = nameof(DockerContainerStatsSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerStatsSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContainerExecSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerExecSettingsExtensions
{
    #region Detach
    /// <inheritdoc cref="DockerContainerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerContainerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerContainerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerContainerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerContainerExecSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerContainerExecSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerContainerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerContainerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerContainerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerContainerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerContainerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerContainerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerContainerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerContainerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerContainerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerContainerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerContainerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerContainerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region User
    /// <inheritdoc cref="DockerContainerExecSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerContainerExecSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerContainerExecSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerContainerExecSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerContainerExecSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerContainerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerContainerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerContainerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerContainerExecSettings), Property = nameof(DockerContainerExecSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerContainerExecSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerNodeLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeLsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerNodeLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerNodeLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerNodeLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerNodeLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerNodeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerNodeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerNodeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerNodeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerNodeLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodeLsSettings), Property = nameof(DockerNodeLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerNodeLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerSwarmJoinSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmJoinSettingsExtensions
{
    #region AdvertiseAddr
    /// <inheritdoc cref="DockerSwarmJoinSettings.AdvertiseAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.AdvertiseAddr))]
    public static T SetAdvertiseAddr<T>(this T o, string v) where T : DockerSwarmJoinSettings => o.Modify(b => b.Set(() => o.AdvertiseAddr, v));
    /// <inheritdoc cref="DockerSwarmJoinSettings.AdvertiseAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.AdvertiseAddr))]
    public static T ResetAdvertiseAddr<T>(this T o) where T : DockerSwarmJoinSettings => o.Modify(b => b.Remove(() => o.AdvertiseAddr));
    #endregion
    #region Availability
    /// <inheritdoc cref="DockerSwarmJoinSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.Availability))]
    public static T SetAvailability<T>(this T o, DockerAvailability v) where T : DockerSwarmJoinSettings => o.Modify(b => b.Set(() => o.Availability, v));
    /// <inheritdoc cref="DockerSwarmJoinSettings.Availability"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.Availability))]
    public static T ResetAvailability<T>(this T o) where T : DockerSwarmJoinSettings => o.Modify(b => b.Remove(() => o.Availability));
    #endregion
    #region DataPathAddr
    /// <inheritdoc cref="DockerSwarmJoinSettings.DataPathAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.DataPathAddr))]
    public static T SetDataPathAddr<T>(this T o, string v) where T : DockerSwarmJoinSettings => o.Modify(b => b.Set(() => o.DataPathAddr, v));
    /// <inheritdoc cref="DockerSwarmJoinSettings.DataPathAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.DataPathAddr))]
    public static T ResetDataPathAddr<T>(this T o) where T : DockerSwarmJoinSettings => o.Modify(b => b.Remove(() => o.DataPathAddr));
    #endregion
    #region ListenAddr
    /// <inheritdoc cref="DockerSwarmJoinSettings.ListenAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.ListenAddr))]
    public static T SetListenAddr<T>(this T o, string v) where T : DockerSwarmJoinSettings => o.Modify(b => b.Set(() => o.ListenAddr, v));
    /// <inheritdoc cref="DockerSwarmJoinSettings.ListenAddr"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.ListenAddr))]
    public static T ResetListenAddr<T>(this T o) where T : DockerSwarmJoinSettings => o.Modify(b => b.Remove(() => o.ListenAddr));
    #endregion
    #region Token
    /// <inheritdoc cref="DockerSwarmJoinSettings.Token"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.Token))]
    public static T SetToken<T>(this T o, string v) where T : DockerSwarmJoinSettings => o.Modify(b => b.Set(() => o.Token, v));
    /// <inheritdoc cref="DockerSwarmJoinSettings.Token"/>
    [Pure] [Builder(Type = typeof(DockerSwarmJoinSettings), Property = nameof(DockerSwarmJoinSettings.Token))]
    public static T ResetToken<T>(this T o) where T : DockerSwarmJoinSettings => o.Modify(b => b.Remove(() => o.Token));
    #endregion
}
#endregion
#region DockerContainerLogsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerLogsSettingsExtensions
{
    #region Details
    /// <inheritdoc cref="DockerContainerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Details))]
    public static T SetDetails<T>(this T o, bool? v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Details, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Details))]
    public static T ResetDetails<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Details));
    /// <inheritdoc cref="DockerContainerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Details))]
    public static T EnableDetails<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Details, true));
    /// <inheritdoc cref="DockerContainerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Details))]
    public static T DisableDetails<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Details, false));
    /// <inheritdoc cref="DockerContainerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Details))]
    public static T ToggleDetails<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Details, !o.Details));
    #endregion
    #region Follow
    /// <inheritdoc cref="DockerContainerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Follow))]
    public static T SetFollow<T>(this T o, bool? v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Follow, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Follow))]
    public static T ResetFollow<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Follow));
    /// <inheritdoc cref="DockerContainerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Follow))]
    public static T EnableFollow<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Follow, true));
    /// <inheritdoc cref="DockerContainerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Follow))]
    public static T DisableFollow<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Follow, false));
    /// <inheritdoc cref="DockerContainerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Follow))]
    public static T ToggleFollow<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Follow, !o.Follow));
    #endregion
    #region Since
    /// <inheritdoc cref="DockerContainerLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Since))]
    public static T SetSince<T>(this T o, string v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Since, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Since))]
    public static T ResetSince<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Since));
    #endregion
    #region Tail
    /// <inheritdoc cref="DockerContainerLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Tail))]
    public static T SetTail<T>(this T o, string v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Tail, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Tail))]
    public static T ResetTail<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Tail));
    #endregion
    #region Timestamps
    /// <inheritdoc cref="DockerContainerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Timestamps))]
    public static T SetTimestamps<T>(this T o, bool? v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Timestamps))]
    public static T ResetTimestamps<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Timestamps));
    /// <inheritdoc cref="DockerContainerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Timestamps))]
    public static T EnableTimestamps<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, true));
    /// <inheritdoc cref="DockerContainerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Timestamps))]
    public static T DisableTimestamps<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, false));
    /// <inheritdoc cref="DockerContainerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Timestamps))]
    public static T ToggleTimestamps<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, !o.Timestamps));
    #endregion
    #region Until
    /// <inheritdoc cref="DockerContainerLogsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Until))]
    public static T SetUntil<T>(this T o, string v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Until, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Until))]
    public static T ResetUntil<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Until));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerContainerLogsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerLogsSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerLogsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerLogsSettings), Property = nameof(DockerContainerLogsSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerLogsSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerCheckpointLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCheckpointLsSettingsExtensions
{
    #region CheckpointDir
    /// <inheritdoc cref="DockerCheckpointLsSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointLsSettings), Property = nameof(DockerCheckpointLsSettings.CheckpointDir))]
    public static T SetCheckpointDir<T>(this T o, string v) where T : DockerCheckpointLsSettings => o.Modify(b => b.Set(() => o.CheckpointDir, v));
    /// <inheritdoc cref="DockerCheckpointLsSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointLsSettings), Property = nameof(DockerCheckpointLsSettings.CheckpointDir))]
    public static T ResetCheckpointDir<T>(this T o) where T : DockerCheckpointLsSettings => o.Modify(b => b.Remove(() => o.CheckpointDir));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerCheckpointLsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointLsSettings), Property = nameof(DockerCheckpointLsSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerCheckpointLsSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerCheckpointLsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointLsSettings), Property = nameof(DockerCheckpointLsSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerCheckpointLsSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerContainerKillSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerKillSettingsExtensions
{
    #region Signal
    /// <inheritdoc cref="DockerContainerKillSettings.Signal"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Signal))]
    public static T SetSignal<T>(this T o, string v) where T : DockerContainerKillSettings => o.Modify(b => b.Set(() => o.Signal, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Signal"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Signal))]
    public static T ResetSignal<T>(this T o) where T : DockerContainerKillSettings => o.Modify(b => b.Remove(() => o.Signal));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerKillSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerKillSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerKillSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerKillSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerKillSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerKillSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerKillSettings), Property = nameof(DockerContainerKillSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerKillSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerPluginInstallSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginInstallSettingsExtensions
{
    #region Alias
    /// <inheritdoc cref="DockerPluginInstallSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Alias))]
    public static T SetAlias<T>(this T o, string v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Alias, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.Alias"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Alias))]
    public static T ResetAlias<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Remove(() => o.Alias));
    #endregion
    #region Disable
    /// <inheritdoc cref="DockerPluginInstallSettings.Disable"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Disable))]
    public static T SetDisable<T>(this T o, bool? v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Disable, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.Disable"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Disable))]
    public static T ResetDisable<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Remove(() => o.Disable));
    /// <inheritdoc cref="DockerPluginInstallSettings.Disable"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Disable))]
    public static T EnableDisable<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Disable, true));
    /// <inheritdoc cref="DockerPluginInstallSettings.Disable"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Disable))]
    public static T DisableDisable<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Disable, false));
    /// <inheritdoc cref="DockerPluginInstallSettings.Disable"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Disable))]
    public static T ToggleDisable<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Disable, !o.Disable));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerPluginInstallSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerPluginInstallSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerPluginInstallSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerPluginInstallSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region GrantAllPermissions
    /// <inheritdoc cref="DockerPluginInstallSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.GrantAllPermissions))]
    public static T SetGrantAllPermissions<T>(this T o, bool? v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.GrantAllPermissions))]
    public static T ResetGrantAllPermissions<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Remove(() => o.GrantAllPermissions));
    /// <inheritdoc cref="DockerPluginInstallSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.GrantAllPermissions))]
    public static T EnableGrantAllPermissions<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, true));
    /// <inheritdoc cref="DockerPluginInstallSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.GrantAllPermissions))]
    public static T DisableGrantAllPermissions<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, false));
    /// <inheritdoc cref="DockerPluginInstallSettings.GrantAllPermissions"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.GrantAllPermissions))]
    public static T ToggleGrantAllPermissions<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.GrantAllPermissions, !o.GrantAllPermissions));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginInstallSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
    #region KeyValues
    /// <inheritdoc cref="DockerPluginInstallSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.KeyValues))]
    public static T SetKeyValues<T>(this T o, IDictionary<string, string> v) where T : DockerPluginInstallSettings => o.Modify(b => b.Set(() => o.KeyValues, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerPluginInstallSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.KeyValues))]
    public static T SetKeyValue<T>(this T o, string k, string v) where T : DockerPluginInstallSettings => o.Modify(b => b.SetDictionary(() => o.KeyValues, k, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.KeyValues))]
    public static T AddKeyValue<T>(this T o, string k, string v) where T : DockerPluginInstallSettings => o.Modify(b => b.AddDictionary(() => o.KeyValues, k, v));
    /// <inheritdoc cref="DockerPluginInstallSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.KeyValues))]
    public static T RemoveKeyValue<T>(this T o, string k) where T : DockerPluginInstallSettings => o.Modify(b => b.RemoveDictionary(() => o.KeyValues, k));
    /// <inheritdoc cref="DockerPluginInstallSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginInstallSettings), Property = nameof(DockerPluginInstallSettings.KeyValues))]
    public static T ClearKeyValues<T>(this T o) where T : DockerPluginInstallSettings => o.Modify(b => b.ClearDictionary(() => o.KeyValues));
    #endregion
}
#endregion
#region DockerImagePruneSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImagePruneSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerImagePruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerImagePruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerImagePruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerImagePruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerImagePruneSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerImagePruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerImagePruneSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Force
    /// <inheritdoc cref="DockerImagePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerImagePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerImagePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerImagePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerImagePruneSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImagePruneSettings), Property = nameof(DockerImagePruneSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerImagePruneSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
}
#endregion
#region DockerImageImportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageImportSettingsExtensions
{
    #region Change
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T SetChange<T>(this T o, params string[] v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T SetChange<T>(this T o, IEnumerable<string> v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T AddChange<T>(this T o, params string[] v) where T : DockerImageImportSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T AddChange<T>(this T o, IEnumerable<string> v) where T : DockerImageImportSettings => o.Modify(b => b.AddCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T RemoveChange<T>(this T o, params string[] v) where T : DockerImageImportSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T RemoveChange<T>(this T o, IEnumerable<string> v) where T : DockerImageImportSettings => o.Modify(b => b.RemoveCollection(() => o.Change, v));
    /// <inheritdoc cref="DockerImageImportSettings.Change"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Change))]
    public static T ClearChange<T>(this T o) where T : DockerImageImportSettings => o.Modify(b => b.ClearCollection(() => o.Change));
    #endregion
    #region Message
    /// <inheritdoc cref="DockerImageImportSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Message))]
    public static T SetMessage<T>(this T o, string v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.Message, v));
    /// <inheritdoc cref="DockerImageImportSettings.Message"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Message))]
    public static T ResetMessage<T>(this T o) where T : DockerImageImportSettings => o.Modify(b => b.Remove(() => o.Message));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerImageImportSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerImageImportSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerImageImportSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region File
    /// <inheritdoc cref="DockerImageImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerImageImportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerImageImportSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerImageImportSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerImageImportSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerImageImportSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImageImportSettings), Property = nameof(DockerImageImportSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerImageImportSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerDiffSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerDiffSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerDiffSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerDiffSettings), Property = nameof(DockerDiffSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerDiffSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerDiffSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerDiffSettings), Property = nameof(DockerDiffSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerDiffSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerUnpauseSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerUnpauseSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerUnpauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerUnpauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerUnpauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerUnpauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerUnpauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerUnpauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerUnpauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerUnpauseSettings), Property = nameof(DockerUnpauseSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerUnpauseSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContainerLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerLsSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerContainerLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerContainerLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerContainerLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerContainerLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerContainerLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerContainerLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerContainerLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Last
    /// <inheritdoc cref="DockerContainerLsSettings.Last"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Last))]
    public static T SetLast<T>(this T o, int? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Last, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Last"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Last))]
    public static T ResetLast<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Last));
    #endregion
    #region Latest
    /// <inheritdoc cref="DockerContainerLsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Latest))]
    public static T SetLatest<T>(this T o, bool? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Latest, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Latest))]
    public static T ResetLatest<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Latest));
    /// <inheritdoc cref="DockerContainerLsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Latest))]
    public static T EnableLatest<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Latest, true));
    /// <inheritdoc cref="DockerContainerLsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Latest))]
    public static T DisableLatest<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Latest, false));
    /// <inheritdoc cref="DockerContainerLsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Latest))]
    public static T ToggleLatest<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Latest, !o.Latest));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerContainerLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerContainerLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerContainerLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerContainerLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerContainerLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerContainerLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerContainerLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerContainerLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerContainerLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Size
    /// <inheritdoc cref="DockerContainerLsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Size))]
    public static T SetSize<T>(this T o, bool? v) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Size, v));
    /// <inheritdoc cref="DockerContainerLsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Size))]
    public static T ResetSize<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Remove(() => o.Size));
    /// <inheritdoc cref="DockerContainerLsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Size))]
    public static T EnableSize<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Size, true));
    /// <inheritdoc cref="DockerContainerLsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Size))]
    public static T DisableSize<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Size, false));
    /// <inheritdoc cref="DockerContainerLsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerLsSettings), Property = nameof(DockerContainerLsSettings.Size))]
    public static T ToggleSize<T>(this T o) where T : DockerContainerLsSettings => o.Modify(b => b.Set(() => o.Size, !o.Size));
    #endregion
}
#endregion
#region DockerNodePsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodePsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerNodePsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerNodePsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerNodePsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerNodePsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoResolve
    /// <inheritdoc cref="DockerNodePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoResolve))]
    public static T SetNoResolve<T>(this T o, bool? v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoResolve, v));
    /// <inheritdoc cref="DockerNodePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoResolve))]
    public static T ResetNoResolve<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Remove(() => o.NoResolve));
    /// <inheritdoc cref="DockerNodePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoResolve))]
    public static T EnableNoResolve<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoResolve, true));
    /// <inheritdoc cref="DockerNodePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoResolve))]
    public static T DisableNoResolve<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoResolve, false));
    /// <inheritdoc cref="DockerNodePsSettings.NoResolve"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoResolve))]
    public static T ToggleNoResolve<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoResolve, !o.NoResolve));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerNodePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerNodePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerNodePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerNodePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerNodePsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerNodePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerNodePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerNodePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerNodePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerNodePsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Nodes
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T SetNodes<T>(this T o, params string[] v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T SetNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePsSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T AddNodes<T>(this T o, params string[] v) where T : DockerNodePsSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T AddNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePsSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, params string[] v) where T : DockerNodePsSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePsSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePsSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePsSettings), Property = nameof(DockerNodePsSettings.Nodes))]
    public static T ClearNodes<T>(this T o) where T : DockerNodePsSettings => o.Modify(b => b.ClearCollection(() => o.Nodes));
    #endregion
}
#endregion
#region DockerContainerTopSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerTopSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerContainerTopSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerTopSettings), Property = nameof(DockerContainerTopSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerTopSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerTopSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerTopSettings), Property = nameof(DockerContainerTopSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerTopSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Options
    /// <inheritdoc cref="DockerContainerTopSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerContainerTopSettings), Property = nameof(DockerContainerTopSettings.Options))]
    public static T SetOptions<T>(this T o, string v) where T : DockerContainerTopSettings => o.Modify(b => b.Set(() => o.Options, v));
    /// <inheritdoc cref="DockerContainerTopSettings.Options"/>
    [Pure] [Builder(Type = typeof(DockerContainerTopSettings), Property = nameof(DockerContainerTopSettings.Options))]
    public static T ResetOptions<T>(this T o) where T : DockerContainerTopSettings => o.Modify(b => b.Remove(() => o.Options));
    #endregion
}
#endregion
#region DockerContainerRenameSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerRenameSettingsExtensions
{
    #region Container
    /// <inheritdoc cref="DockerContainerRenameSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerRenameSettings), Property = nameof(DockerContainerRenameSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerContainerRenameSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerContainerRenameSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerContainerRenameSettings), Property = nameof(DockerContainerRenameSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerContainerRenameSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region NewName
    /// <inheritdoc cref="DockerContainerRenameSettings.NewName"/>
    [Pure] [Builder(Type = typeof(DockerContainerRenameSettings), Property = nameof(DockerContainerRenameSettings.NewName))]
    public static T SetNewName<T>(this T o, string v) where T : DockerContainerRenameSettings => o.Modify(b => b.Set(() => o.NewName, v));
    /// <inheritdoc cref="DockerContainerRenameSettings.NewName"/>
    [Pure] [Builder(Type = typeof(DockerContainerRenameSettings), Property = nameof(DockerContainerRenameSettings.NewName))]
    public static T ResetNewName<T>(this T o) where T : DockerContainerRenameSettings => o.Modify(b => b.Remove(() => o.NewName));
    #endregion
}
#endregion
#region DockerImageHistorySettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageHistorySettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerImageHistorySettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerImageHistorySettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Human
    /// <inheritdoc cref="DockerImageHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Human))]
    public static T SetHuman<T>(this T o, bool? v) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Human, v));
    /// <inheritdoc cref="DockerImageHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Human))]
    public static T ResetHuman<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Remove(() => o.Human));
    /// <inheritdoc cref="DockerImageHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Human))]
    public static T EnableHuman<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Human, true));
    /// <inheritdoc cref="DockerImageHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Human))]
    public static T DisableHuman<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Human, false));
    /// <inheritdoc cref="DockerImageHistorySettings.Human"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Human))]
    public static T ToggleHuman<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Human, !o.Human));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerImageHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerImageHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerImageHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerImageHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerImageHistorySettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImageHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImageHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImageHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImageHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImageHistorySettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Image
    /// <inheritdoc cref="DockerImageHistorySettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Image))]
    public static T SetImage<T>(this T o, string v) where T : DockerImageHistorySettings => o.Modify(b => b.Set(() => o.Image, v));
    /// <inheritdoc cref="DockerImageHistorySettings.Image"/>
    [Pure] [Builder(Type = typeof(DockerImageHistorySettings), Property = nameof(DockerImageHistorySettings.Image))]
    public static T ResetImage<T>(this T o) where T : DockerImageHistorySettings => o.Modify(b => b.Remove(() => o.Image));
    #endregion
}
#endregion
#region DockerPsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPsSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerPsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerPsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerPsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerPsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerPsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerPsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerPsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerPsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerPsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Last
    /// <inheritdoc cref="DockerPsSettings.Last"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Last))]
    public static T SetLast<T>(this T o, int? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Last, v));
    /// <inheritdoc cref="DockerPsSettings.Last"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Last))]
    public static T ResetLast<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Last));
    #endregion
    #region Latest
    /// <inheritdoc cref="DockerPsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Latest))]
    public static T SetLatest<T>(this T o, bool? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Latest, v));
    /// <inheritdoc cref="DockerPsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Latest))]
    public static T ResetLatest<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Latest));
    /// <inheritdoc cref="DockerPsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Latest))]
    public static T EnableLatest<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Latest, true));
    /// <inheritdoc cref="DockerPsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Latest))]
    public static T DisableLatest<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Latest, false));
    /// <inheritdoc cref="DockerPsSettings.Latest"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Latest))]
    public static T ToggleLatest<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Latest, !o.Latest));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerPsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerPsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Size
    /// <inheritdoc cref="DockerPsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Size))]
    public static T SetSize<T>(this T o, bool? v) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Size, v));
    /// <inheritdoc cref="DockerPsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Size))]
    public static T ResetSize<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Remove(() => o.Size));
    /// <inheritdoc cref="DockerPsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Size))]
    public static T EnableSize<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Size, true));
    /// <inheritdoc cref="DockerPsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Size))]
    public static T DisableSize<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Size, false));
    /// <inheritdoc cref="DockerPsSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerPsSettings), Property = nameof(DockerPsSettings.Size))]
    public static T ToggleSize<T>(this T o) where T : DockerPsSettings => o.Modify(b => b.Set(() => o.Size, !o.Size));
    #endregion
}
#endregion
#region DockerImageTagSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageTagSettingsExtensions
{
    #region SourceImage
    /// <inheritdoc cref="DockerImageTagSettings.SourceImage"/>
    [Pure] [Builder(Type = typeof(DockerImageTagSettings), Property = nameof(DockerImageTagSettings.SourceImage))]
    public static T SetSourceImage<T>(this T o, string v) where T : DockerImageTagSettings => o.Modify(b => b.Set(() => o.SourceImage, v));
    /// <inheritdoc cref="DockerImageTagSettings.SourceImage"/>
    [Pure] [Builder(Type = typeof(DockerImageTagSettings), Property = nameof(DockerImageTagSettings.SourceImage))]
    public static T ResetSourceImage<T>(this T o) where T : DockerImageTagSettings => o.Modify(b => b.Remove(() => o.SourceImage));
    #endregion
    #region TargetImage
    /// <inheritdoc cref="DockerImageTagSettings.TargetImage"/>
    [Pure] [Builder(Type = typeof(DockerImageTagSettings), Property = nameof(DockerImageTagSettings.TargetImage))]
    public static T SetTargetImage<T>(this T o, string v) where T : DockerImageTagSettings => o.Modify(b => b.Set(() => o.TargetImage, v));
    /// <inheritdoc cref="DockerImageTagSettings.TargetImage"/>
    [Pure] [Builder(Type = typeof(DockerImageTagSettings), Property = nameof(DockerImageTagSettings.TargetImage))]
    public static T ResetTargetImage<T>(this T o) where T : DockerImageTagSettings => o.Modify(b => b.Remove(() => o.TargetImage));
    #endregion
}
#endregion
#region DockerExportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerExportSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="DockerExportSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerExportSettings), Property = nameof(DockerExportSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerExportSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerExportSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerExportSettings), Property = nameof(DockerExportSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerExportSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerExportSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerExportSettings), Property = nameof(DockerExportSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerExportSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerExportSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerExportSettings), Property = nameof(DockerExportSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerExportSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerNetworkDisconnectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkDisconnectSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerNetworkDisconnectSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerNetworkDisconnectSettings), Property = nameof(DockerNetworkDisconnectSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerNetworkDisconnectSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerBuilderBuildSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuilderBuildSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region BuildArg
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.BuildArg))]
    public static T ClearBuildArg<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.BuildArg));
    #endregion
    #region CacheFrom
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CacheFrom))]
    public static T ClearCacheFrom<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.CacheFrom));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerBuilderBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Compress
    /// <inheritdoc cref="DockerBuilderBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Compress))]
    public static T SetCompress<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Compress, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Compress))]
    public static T ResetCompress<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Compress));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Compress))]
    public static T EnableCompress<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Compress, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Compress))]
    public static T DisableCompress<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Compress, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Compress))]
    public static T ToggleCompress<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Compress, !o.Compress));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerBuilderBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerBuilderBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region File
    /// <inheritdoc cref="DockerBuilderBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region ForceRm
    /// <inheritdoc cref="DockerBuilderBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ForceRm))]
    public static T SetForceRm<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ForceRm))]
    public static T ResetForceRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.ForceRm));
    /// <inheritdoc cref="DockerBuilderBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ForceRm))]
    public static T EnableForceRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ForceRm))]
    public static T DisableForceRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ForceRm))]
    public static T ToggleForceRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, !o.ForceRm));
    #endregion
    #region Iidfile
    /// <inheritdoc cref="DockerBuilderBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Iidfile))]
    public static T SetIidfile<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Iidfile, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Iidfile))]
    public static T ResetIidfile<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Iidfile));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerBuilderBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerBuilderBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerBuilderBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerBuilderBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NoCache
    /// <inheritdoc cref="DockerBuilderBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.NoCache))]
    public static T SetNoCache<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.NoCache, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.NoCache))]
    public static T ResetNoCache<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.NoCache));
    /// <inheritdoc cref="DockerBuilderBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.NoCache))]
    public static T EnableNoCache<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.NoCache, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.NoCache))]
    public static T DisableNoCache<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.NoCache, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.NoCache))]
    public static T ToggleNoCache<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.NoCache, !o.NoCache));
    #endregion
    #region Output
    /// <inheritdoc cref="DockerBuilderBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerBuilderBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Progress
    /// <inheritdoc cref="DockerBuilderBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Progress))]
    public static T SetProgress<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Progress, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Progress))]
    public static T ResetProgress<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Progress));
    #endregion
    #region Pull
    /// <inheritdoc cref="DockerBuilderBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Pull))]
    public static T SetPull<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Pull, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Pull))]
    public static T ResetPull<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Pull));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Pull))]
    public static T EnablePull<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Pull, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Pull))]
    public static T DisablePull<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Pull, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Pull))]
    public static T TogglePull<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Pull, !o.Pull));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerBuilderBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerBuilderBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerBuilderBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerBuilderBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region Squash
    /// <inheritdoc cref="DockerBuilderBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Squash))]
    public static T SetSquash<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Squash, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Squash))]
    public static T ResetSquash<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Squash));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Squash))]
    public static T EnableSquash<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Squash, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Squash))]
    public static T DisableSquash<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Squash, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Squash))]
    public static T ToggleSquash<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Squash, !o.Squash));
    #endregion
    #region Ssh
    /// <inheritdoc cref="DockerBuilderBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Ssh))]
    public static T SetSsh<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Ssh, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Ssh))]
    public static T ResetSsh<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Ssh));
    #endregion
    #region Stream
    /// <inheritdoc cref="DockerBuilderBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Stream))]
    public static T SetStream<T>(this T o, bool? v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Stream, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Stream))]
    public static T ResetStream<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Stream));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Stream))]
    public static T EnableStream<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Stream, true));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Stream))]
    public static T DisableStream<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Stream, false));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Stream))]
    public static T ToggleStream<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Stream, !o.Stream));
    #endregion
    #region Tag
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T SetTag<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T SetTag<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T AddTag<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T AddTag<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, params string[] v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, IEnumerable<string> v) where T : DockerBuilderBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Tag))]
    public static T ClearTag<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.ClearCollection(() => o.Tag));
    #endregion
    #region Target
    /// <inheritdoc cref="DockerBuilderBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Target))]
    public static T SetTarget<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Target, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Target))]
    public static T ResetTarget<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Target));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerBuilderBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region Path
    /// <inheritdoc cref="DockerBuilderBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Path))]
    public static T SetPath<T>(this T o, string v) where T : DockerBuilderBuildSettings => o.Modify(b => b.Set(() => o.Path, v));
    /// <inheritdoc cref="DockerBuilderBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuilderBuildSettings), Property = nameof(DockerBuilderBuildSettings.Path))]
    public static T ResetPath<T>(this T o) where T : DockerBuilderBuildSettings => o.Modify(b => b.Remove(() => o.Path));
    #endregion
}
#endregion
#region DockerBuildxBuildSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuildxBuildSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region Allow
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T SetAllow<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T SetAllow<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T AddAllow<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T AddAllow<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T RemoveAllow<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T RemoveAllow<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Allow, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Allow"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Allow))]
    public static T ClearAllow<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.Allow));
    #endregion
    #region BuildArg
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.BuildArg))]
    public static T ClearBuildArg<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.BuildArg));
    #endregion
    #region Builder
    /// <inheritdoc cref="DockerBuildxBuildSettings.Builder"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Builder))]
    public static T SetBuilder<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Builder, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Builder"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Builder))]
    public static T ResetBuilder<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Builder));
    #endregion
    #region CacheFrom
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheFrom))]
    public static T ClearCacheFrom<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.CacheFrom));
    #endregion
    #region CacheTo
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T SetCacheTo<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T SetCacheTo<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T AddCacheTo<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T AddCacheTo<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T RemoveCacheTo<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T RemoveCacheTo<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheTo, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CacheTo"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CacheTo))]
    public static T ClearCacheTo<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.CacheTo));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerBuildxBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Compress
    /// <inheritdoc cref="DockerBuildxBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Compress))]
    public static T SetCompress<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Compress, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Compress))]
    public static T ResetCompress<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Compress));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Compress))]
    public static T EnableCompress<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Compress, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Compress))]
    public static T DisableCompress<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Compress, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Compress))]
    public static T ToggleCompress<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Compress, !o.Compress));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region File
    /// <inheritdoc cref="DockerBuildxBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region Iidfile
    /// <inheritdoc cref="DockerBuildxBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Iidfile))]
    public static T SetIidfile<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Iidfile, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Iidfile))]
    public static T ResetIidfile<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Iidfile));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerBuildxBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Load
    /// <inheritdoc cref="DockerBuildxBuildSettings.Load"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Load))]
    public static T SetLoad<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Load, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Load"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Load))]
    public static T ResetLoad<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Load));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Load"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Load))]
    public static T EnableLoad<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Load, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Load"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Load))]
    public static T DisableLoad<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Load, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Load"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Load))]
    public static T ToggleLoad<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Load, !o.Load));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerBuildxBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerBuildxBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerBuildxBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NoCache
    /// <inheritdoc cref="DockerBuildxBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.NoCache))]
    public static T SetNoCache<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.NoCache, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.NoCache))]
    public static T ResetNoCache<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.NoCache));
    /// <inheritdoc cref="DockerBuildxBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.NoCache))]
    public static T EnableNoCache<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.NoCache, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.NoCache))]
    public static T DisableNoCache<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.NoCache, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.NoCache))]
    public static T ToggleNoCache<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.NoCache, !o.NoCache));
    #endregion
    #region Output
    /// <inheritdoc cref="DockerBuildxBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerBuildxBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Progress
    /// <inheritdoc cref="DockerBuildxBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Progress))]
    public static T SetProgress<T>(this T o, DockerProgressType v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Progress, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Progress))]
    public static T ResetProgress<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Progress));
    #endregion
    #region Pull
    /// <inheritdoc cref="DockerBuildxBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Pull))]
    public static T SetPull<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Pull, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Pull))]
    public static T ResetPull<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Pull));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Pull))]
    public static T EnablePull<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Pull, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Pull))]
    public static T DisablePull<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Pull, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Pull))]
    public static T TogglePull<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Pull, !o.Pull));
    #endregion
    #region Push
    /// <inheritdoc cref="DockerBuildxBuildSettings.Push"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Push))]
    public static T SetPush<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Push, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Push"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Push))]
    public static T ResetPush<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Push));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Push"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Push))]
    public static T EnablePush<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Push, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Push"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Push))]
    public static T DisablePush<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Push, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Push"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Push))]
    public static T TogglePush<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Push, !o.Push));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerBuildxBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerBuildxBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerBuildxBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerBuildxBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region Ssh
    /// <inheritdoc cref="DockerBuildxBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Ssh))]
    public static T SetSsh<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Ssh, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Ssh))]
    public static T ResetSsh<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Ssh));
    #endregion
    #region Tag
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T SetTag<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T SetTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T AddTag<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T AddTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, params string[] v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildxBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Tag))]
    public static T ClearTag<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.ClearCollection(() => o.Tag));
    #endregion
    #region Target
    /// <inheritdoc cref="DockerBuildxBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Target))]
    public static T SetTarget<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Target, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Target))]
    public static T ResetTarget<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Target));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerBuildxBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region Path
    /// <inheritdoc cref="DockerBuildxBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Path))]
    public static T SetPath<T>(this T o, string v) where T : DockerBuildxBuildSettings => o.Modify(b => b.Set(() => o.Path, v));
    /// <inheritdoc cref="DockerBuildxBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuildxBuildSettings), Property = nameof(DockerBuildxBuildSettings.Path))]
    public static T ResetPath<T>(this T o) where T : DockerBuildxBuildSettings => o.Modify(b => b.Remove(() => o.Path));
    #endregion
}
#endregion
#region DockerBuildxCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuildxCreateSettingsExtensions
{
    #region Append
    /// <inheritdoc cref="DockerBuildxCreateSettings.Append"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Append))]
    public static T SetAppend<T>(this T o, bool? v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Append, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Append"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Append))]
    public static T ResetAppend<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Append));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Append"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Append))]
    public static T EnableAppend<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Append, true));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Append"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Append))]
    public static T DisableAppend<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Append, false));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Append"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Append))]
    public static T ToggleAppend<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Append, !o.Append));
    #endregion
    #region Bootstrap
    /// <inheritdoc cref="DockerBuildxCreateSettings.Bootstrap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Bootstrap))]
    public static T SetBootstrap<T>(this T o, bool? v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Bootstrap, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Bootstrap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Bootstrap))]
    public static T ResetBootstrap<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Bootstrap));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Bootstrap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Bootstrap))]
    public static T EnableBootstrap<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Bootstrap, true));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Bootstrap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Bootstrap))]
    public static T DisableBootstrap<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Bootstrap, false));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Bootstrap"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Bootstrap))]
    public static T ToggleBootstrap<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Bootstrap, !o.Bootstrap));
    #endregion
    #region BuildKitDaemonFlags
    /// <inheritdoc cref="DockerBuildxCreateSettings.BuildKitDaemonFlags"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.BuildKitDaemonFlags))]
    public static T SetBuildKitDaemonFlags<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.BuildKitDaemonFlags, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.BuildKitDaemonFlags"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.BuildKitDaemonFlags))]
    public static T ResetBuildKitDaemonFlags<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.BuildKitDaemonFlags));
    #endregion
    #region BuildKitDFlags
    /// <inheritdoc cref="DockerBuildxCreateSettings.BuildKitDFlags"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.BuildKitDFlags))]
    public static T SetBuildKitDFlags<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.BuildKitDFlags, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.BuildKitDFlags"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.BuildKitDFlags))]
    public static T ResetBuildKitDFlags<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.BuildKitDFlags));
    #endregion
    #region Config
    /// <inheritdoc cref="DockerBuildxCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Config))]
    public static T SetConfig<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Config, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Config"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Config))]
    public static T ResetConfig<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Config));
    #endregion
    #region Driver
    /// <inheritdoc cref="DockerBuildxCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Driver))]
    public static T SetDriver<T>(this T o, DockerDriverType v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Driver, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Driver"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Driver))]
    public static T ResetDriver<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Driver));
    #endregion
    #region DriverOpt
    /// <inheritdoc cref="DockerBuildxCreateSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.DriverOpt))]
    public static T SetDriverOpt<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.DriverOpt, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.DriverOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.DriverOpt))]
    public static T ResetDriverOpt<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.DriverOpt));
    #endregion
    #region Leave
    /// <inheritdoc cref="DockerBuildxCreateSettings.Leave"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Leave))]
    public static T SetLeave<T>(this T o, bool? v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Leave, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Leave"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Leave))]
    public static T ResetLeave<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Leave));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Leave"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Leave))]
    public static T EnableLeave<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Leave, true));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Leave"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Leave))]
    public static T DisableLeave<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Leave, false));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Leave"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Leave))]
    public static T ToggleLeave<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Leave, !o.Leave));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerBuildxCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Node
    /// <inheritdoc cref="DockerBuildxCreateSettings.Node"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Node))]
    public static T SetNode<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Node, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Node"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Node))]
    public static T ResetNode<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Node));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerBuildxCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Use
    /// <inheritdoc cref="DockerBuildxCreateSettings.Use"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Use))]
    public static T SetUse<T>(this T o, bool? v) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Use, v));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Use"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Use))]
    public static T ResetUse<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Remove(() => o.Use));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Use"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Use))]
    public static T EnableUse<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Use, true));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Use"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Use))]
    public static T DisableUse<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Use, false));
    /// <inheritdoc cref="DockerBuildxCreateSettings.Use"/>
    [Pure] [Builder(Type = typeof(DockerBuildxCreateSettings), Property = nameof(DockerBuildxCreateSettings.Use))]
    public static T ToggleUse<T>(this T o) where T : DockerBuildxCreateSettings => o.Modify(b => b.Set(() => o.Use, !o.Use));
    #endregion
}
#endregion
#region DockerStatsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStatsSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerStatsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerStatsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerStatsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoStream
    /// <inheritdoc cref="DockerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoStream))]
    public static T SetNoStream<T>(this T o, bool? v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, v));
    /// <inheritdoc cref="DockerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoStream))]
    public static T ResetNoStream<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Remove(() => o.NoStream));
    /// <inheritdoc cref="DockerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoStream))]
    public static T EnableNoStream<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, true));
    /// <inheritdoc cref="DockerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoStream))]
    public static T DisableNoStream<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, false));
    /// <inheritdoc cref="DockerStatsSettings.NoStream"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoStream))]
    public static T ToggleNoStream<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoStream, !o.NoStream));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerStatsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerStatsSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerStatsSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerStatsSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerStatsSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerStatsSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerStatsSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerStatsSettings), Property = nameof(DockerStatsSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerStatsSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerSearchSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSearchSettingsExtensions
{
    #region Automated
    /// <inheritdoc cref="DockerSearchSettings.Automated"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Automated))]
    public static T SetAutomated<T>(this T o, bool? v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Automated, v));
    /// <inheritdoc cref="DockerSearchSettings.Automated"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Automated))]
    public static T ResetAutomated<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Automated));
    /// <inheritdoc cref="DockerSearchSettings.Automated"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Automated))]
    public static T EnableAutomated<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Automated, true));
    /// <inheritdoc cref="DockerSearchSettings.Automated"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Automated))]
    public static T DisableAutomated<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Automated, false));
    /// <inheritdoc cref="DockerSearchSettings.Automated"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Automated))]
    public static T ToggleAutomated<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Automated, !o.Automated));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerSearchSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerSearchSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerSearchSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSearchSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Limit
    /// <inheritdoc cref="DockerSearchSettings.Limit"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Limit))]
    public static T SetLimit<T>(this T o, int? v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Limit, v));
    /// <inheritdoc cref="DockerSearchSettings.Limit"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Limit))]
    public static T ResetLimit<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Limit));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerSearchSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerSearchSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerSearchSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerSearchSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerSearchSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Stars
    /// <inheritdoc cref="DockerSearchSettings.Stars"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Stars))]
    public static T SetStars<T>(this T o, int? v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Stars, v));
    /// <inheritdoc cref="DockerSearchSettings.Stars"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Stars))]
    public static T ResetStars<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Stars));
    #endregion
    #region Term
    /// <inheritdoc cref="DockerSearchSettings.Term"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Term))]
    public static T SetTerm<T>(this T o, string v) where T : DockerSearchSettings => o.Modify(b => b.Set(() => o.Term, v));
    /// <inheritdoc cref="DockerSearchSettings.Term"/>
    [Pure] [Builder(Type = typeof(DockerSearchSettings), Property = nameof(DockerSearchSettings.Term))]
    public static T ResetTerm<T>(this T o) where T : DockerSearchSettings => o.Modify(b => b.Remove(() => o.Term));
    #endregion
}
#endregion
#region DockerManifestSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerManifestSettingsExtensions
{
    #region Command
    /// <inheritdoc cref="DockerManifestSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerManifestSettings), Property = nameof(DockerManifestSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerManifestSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerManifestSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerManifestSettings), Property = nameof(DockerManifestSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerManifestSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
}
#endregion
#region DockerPluginPushSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginPushSettingsExtensions
{
    #region DisableContentTrust
    /// <inheritdoc cref="DockerPluginPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerPluginPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerPluginPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerPluginPushSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerPluginPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerPluginPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerPluginPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerPluginPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerPluginPushSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerPluginPushSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Plugin
    /// <inheritdoc cref="DockerPluginPushSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginPushSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginPushSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginPushSettings), Property = nameof(DockerPluginPushSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginPushSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
}
#endregion
#region DockerImageLoadSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageLoadSettingsExtensions
{
    #region Input
    /// <inheritdoc cref="DockerImageLoadSettings.Input"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : DockerImageLoadSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="DockerImageLoadSettings.Input"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Input))]
    public static T ResetInput<T>(this T o) where T : DockerImageLoadSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImageLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImageLoadSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImageLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImageLoadSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImageLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImageLoadSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImageLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImageLoadSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImageLoadSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLoadSettings), Property = nameof(DockerImageLoadSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImageLoadSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
}
#endregion
#region DockerSwarmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSwarmSettingsExtensions
{
}
#endregion
#region DockerContainerRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerContainerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerContainerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerContainerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerContainerRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Link
    /// <inheritdoc cref="DockerContainerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Link))]
    public static T SetLink<T>(this T o, bool? v) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Link, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Link))]
    public static T ResetLink<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Remove(() => o.Link));
    /// <inheritdoc cref="DockerContainerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Link))]
    public static T EnableLink<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Link, true));
    /// <inheritdoc cref="DockerContainerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Link))]
    public static T DisableLink<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Link, false));
    /// <inheritdoc cref="DockerContainerRmSettings.Link"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Link))]
    public static T ToggleLink<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Link, !o.Link));
    #endregion
    #region Volumes
    /// <inheritdoc cref="DockerContainerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Volumes))]
    public static T SetVolumes<T>(this T o, bool? v) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Volumes, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Volumes))]
    public static T ResetVolumes<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Remove(() => o.Volumes));
    /// <inheritdoc cref="DockerContainerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Volumes))]
    public static T EnableVolumes<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Volumes, true));
    /// <inheritdoc cref="DockerContainerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Volumes))]
    public static T DisableVolumes<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Volumes, false));
    /// <inheritdoc cref="DockerContainerRmSettings.Volumes"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Volumes))]
    public static T ToggleVolumes<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Volumes, !o.Volumes));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRmSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerRmSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRmSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerRmSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerRmSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerRmSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerRmSettings), Property = nameof(DockerContainerRmSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerRmSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContainerUpdateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerUpdateSettingsExtensions
{
    #region BlkioWeight
    /// <inheritdoc cref="DockerContainerUpdateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.BlkioWeight))]
    public static T SetBlkioWeight<T>(this T o, int? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.BlkioWeight, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.BlkioWeight"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.BlkioWeight))]
    public static T ResetBlkioWeight<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.BlkioWeight));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuRtPeriod
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuRtPeriod))]
    public static T SetCpuRtPeriod<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpuRtPeriod, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuRtPeriod"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuRtPeriod))]
    public static T ResetCpuRtPeriod<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuRtPeriod));
    #endregion
    #region CpuRtRuntime
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuRtRuntime))]
    public static T SetCpuRtRuntime<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpuRtRuntime, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuRtRuntime"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuRtRuntime))]
    public static T ResetCpuRtRuntime<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuRtRuntime));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region Cpus
    /// <inheritdoc cref="DockerContainerUpdateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Cpus))]
    public static T SetCpus<T>(this T o, decimal? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.Cpus, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Cpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Cpus))]
    public static T ResetCpus<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.Cpus));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region KernelMemory
    /// <inheritdoc cref="DockerContainerUpdateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.KernelMemory))]
    public static T SetKernelMemory<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.KernelMemory, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.KernelMemory"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.KernelMemory))]
    public static T ResetKernelMemory<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.KernelMemory));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerContainerUpdateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemoryReservation
    /// <inheritdoc cref="DockerContainerUpdateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.MemoryReservation))]
    public static T SetMemoryReservation<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.MemoryReservation, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.MemoryReservation"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.MemoryReservation))]
    public static T ResetMemoryReservation<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.MemoryReservation));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerContainerUpdateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region PidsLimit
    /// <inheritdoc cref="DockerContainerUpdateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.PidsLimit))]
    public static T SetPidsLimit<T>(this T o, long? v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.PidsLimit, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.PidsLimit"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.PidsLimit))]
    public static T ResetPidsLimit<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.PidsLimit));
    #endregion
    #region Restart
    /// <inheritdoc cref="DockerContainerUpdateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Restart))]
    public static T SetRestart<T>(this T o, string v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.Restart, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Restart"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Restart))]
    public static T ResetRestart<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.Remove(() => o.Restart));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUpdateSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerUpdateSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUpdateSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerUpdateSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerUpdateSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerUpdateSettings), Property = nameof(DockerContainerUpdateSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerUpdateSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerPluginSetSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginSetSettingsExtensions
{
    #region Plugin
    /// <inheritdoc cref="DockerPluginSetSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.Plugin))]
    public static T SetPlugin<T>(this T o, string v) where T : DockerPluginSetSettings => o.Modify(b => b.Set(() => o.Plugin, v));
    /// <inheritdoc cref="DockerPluginSetSettings.Plugin"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.Plugin))]
    public static T ResetPlugin<T>(this T o) where T : DockerPluginSetSettings => o.Modify(b => b.Remove(() => o.Plugin));
    #endregion
    #region KeyValues
    /// <inheritdoc cref="DockerPluginSetSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.KeyValues))]
    public static T SetKeyValues<T>(this T o, IDictionary<string, string> v) where T : DockerPluginSetSettings => o.Modify(b => b.Set(() => o.KeyValues, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="DockerPluginSetSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.KeyValues))]
    public static T SetKeyValue<T>(this T o, string k, string v) where T : DockerPluginSetSettings => o.Modify(b => b.SetDictionary(() => o.KeyValues, k, v));
    /// <inheritdoc cref="DockerPluginSetSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.KeyValues))]
    public static T AddKeyValue<T>(this T o, string k, string v) where T : DockerPluginSetSettings => o.Modify(b => b.AddDictionary(() => o.KeyValues, k, v));
    /// <inheritdoc cref="DockerPluginSetSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.KeyValues))]
    public static T RemoveKeyValue<T>(this T o, string k) where T : DockerPluginSetSettings => o.Modify(b => b.RemoveDictionary(() => o.KeyValues, k));
    /// <inheritdoc cref="DockerPluginSetSettings.KeyValues"/>
    [Pure] [Builder(Type = typeof(DockerPluginSetSettings), Property = nameof(DockerPluginSetSettings.KeyValues))]
    public static T ClearKeyValues<T>(this T o) where T : DockerPluginSetSettings => o.Modify(b => b.ClearDictionary(() => o.KeyValues));
    #endregion
}
#endregion
#region DockerWaitSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerWaitSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerWaitSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerWaitSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerWaitSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerWaitSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerWaitSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerWaitSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerWaitSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerWaitSettings), Property = nameof(DockerWaitSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerWaitSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerContextExportSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextExportSettingsExtensions
{
    #region Kubeconfig
    /// <inheritdoc cref="DockerContextExportSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Kubeconfig))]
    public static T SetKubeconfig<T>(this T o, bool? v) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.Kubeconfig, v));
    /// <inheritdoc cref="DockerContextExportSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Kubeconfig))]
    public static T ResetKubeconfig<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Remove(() => o.Kubeconfig));
    /// <inheritdoc cref="DockerContextExportSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Kubeconfig))]
    public static T EnableKubeconfig<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.Kubeconfig, true));
    /// <inheritdoc cref="DockerContextExportSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Kubeconfig))]
    public static T DisableKubeconfig<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.Kubeconfig, false));
    /// <inheritdoc cref="DockerContextExportSettings.Kubeconfig"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Kubeconfig))]
    public static T ToggleKubeconfig<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.Kubeconfig, !o.Kubeconfig));
    #endregion
    #region Context
    /// <inheritdoc cref="DockerContextExportSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextExportSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region File
    /// <inheritdoc cref="DockerContextExportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerContextExportSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerContextExportSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerContextExportSettings), Property = nameof(DockerContextExportSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerContextExportSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
}
#endregion
#region DockerManifestAnnotateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerManifestAnnotateSettingsExtensions
{
    #region Arch
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Arch"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Arch))]
    public static T SetArch<T>(this T o, string v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.Arch, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Arch"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Arch))]
    public static T ResetArch<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Remove(() => o.Arch));
    #endregion
    #region Os
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Os"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Os))]
    public static T SetOs<T>(this T o, string v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.Os, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Os"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Os))]
    public static T ResetOs<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Remove(() => o.Os));
    #endregion
    #region OsFeatures
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T SetOsFeatures<T>(this T o, params string[] v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T SetOsFeatures<T>(this T o, IEnumerable<string> v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T AddOsFeatures<T>(this T o, params string[] v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.AddCollection(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T AddOsFeatures<T>(this T o, IEnumerable<string> v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.AddCollection(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T RemoveOsFeatures<T>(this T o, params string[] v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.RemoveCollection(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T RemoveOsFeatures<T>(this T o, IEnumerable<string> v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.RemoveCollection(() => o.OsFeatures, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.OsFeatures"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.OsFeatures))]
    public static T ClearOsFeatures<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.ClearCollection(() => o.OsFeatures));
    #endregion
    #region Variant
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Variant"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Variant))]
    public static T SetVariant<T>(this T o, string v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.Variant, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Variant"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Variant))]
    public static T ResetVariant<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Remove(() => o.Variant));
    #endregion
    #region ManifestList
    /// <inheritdoc cref="DockerManifestAnnotateSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.ManifestList))]
    public static T SetManifestList<T>(this T o, string v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.ManifestList, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.ManifestList"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.ManifestList))]
    public static T ResetManifestList<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Remove(() => o.ManifestList));
    #endregion
    #region Manifest
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Manifest"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Manifest))]
    public static T SetManifest<T>(this T o, string v) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Set(() => o.Manifest, v));
    /// <inheritdoc cref="DockerManifestAnnotateSettings.Manifest"/>
    [Pure] [Builder(Type = typeof(DockerManifestAnnotateSettings), Property = nameof(DockerManifestAnnotateSettings.Manifest))]
    public static T ResetManifest<T>(this T o) where T : DockerManifestAnnotateSettings => o.Modify(b => b.Remove(() => o.Manifest));
    #endregion
}
#endregion
#region DockerImagePullSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImagePullSettingsExtensions
{
    #region AllTags
    /// <inheritdoc cref="DockerImagePullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.AllTags))]
    public static T SetAllTags<T>(this T o, bool? v) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.AllTags, v));
    /// <inheritdoc cref="DockerImagePullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.AllTags))]
    public static T ResetAllTags<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Remove(() => o.AllTags));
    /// <inheritdoc cref="DockerImagePullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.AllTags))]
    public static T EnableAllTags<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.AllTags, true));
    /// <inheritdoc cref="DockerImagePullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.AllTags))]
    public static T DisableAllTags<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.AllTags, false));
    /// <inheritdoc cref="DockerImagePullSettings.AllTags"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.AllTags))]
    public static T ToggleAllTags<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.AllTags, !o.AllTags));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerImagePullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerImagePullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerImagePullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerImagePullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerImagePullSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerImagePullSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerImagePullSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImagePullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImagePullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImagePullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImagePullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImagePullSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerImagePullSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerImagePullSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerImagePullSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerImagePullSettings), Property = nameof(DockerImagePullSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerImagePullSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
}
#endregion
#region DockerEventsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerEventsSettingsExtensions
{
    #region Filter
    /// <inheritdoc cref="DockerEventsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerEventsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerEventsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerEventsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerEventsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerEventsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerEventsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerEventsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Since
    /// <inheritdoc cref="DockerEventsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Since))]
    public static T SetSince<T>(this T o, string v) where T : DockerEventsSettings => o.Modify(b => b.Set(() => o.Since, v));
    /// <inheritdoc cref="DockerEventsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Since))]
    public static T ResetSince<T>(this T o) where T : DockerEventsSettings => o.Modify(b => b.Remove(() => o.Since));
    #endregion
    #region Until
    /// <inheritdoc cref="DockerEventsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Until))]
    public static T SetUntil<T>(this T o, string v) where T : DockerEventsSettings => o.Modify(b => b.Set(() => o.Until, v));
    /// <inheritdoc cref="DockerEventsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerEventsSettings), Property = nameof(DockerEventsSettings.Until))]
    public static T ResetUntil<T>(this T o) where T : DockerEventsSettings => o.Modify(b => b.Remove(() => o.Until));
    #endregion
}
#endregion
#region DockerStackLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackLsSettingsExtensions
{
    #region AllNamespaces
    /// <inheritdoc cref="DockerStackLsSettings.AllNamespaces"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.AllNamespaces))]
    public static T SetAllNamespaces<T>(this T o, bool? v) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.AllNamespaces, v));
    /// <inheritdoc cref="DockerStackLsSettings.AllNamespaces"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.AllNamespaces))]
    public static T ResetAllNamespaces<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.Remove(() => o.AllNamespaces));
    /// <inheritdoc cref="DockerStackLsSettings.AllNamespaces"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.AllNamespaces))]
    public static T EnableAllNamespaces<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.AllNamespaces, true));
    /// <inheritdoc cref="DockerStackLsSettings.AllNamespaces"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.AllNamespaces))]
    public static T DisableAllNamespaces<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.AllNamespaces, false));
    /// <inheritdoc cref="DockerStackLsSettings.AllNamespaces"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.AllNamespaces))]
    public static T ToggleAllNamespaces<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.AllNamespaces, !o.AllNamespaces));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerStackLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerStackLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Namespace
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T SetNamespace<T>(this T o, params string[] v) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T SetNamespace<T>(this T o, IEnumerable<string> v) where T : DockerStackLsSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T AddNamespace<T>(this T o, params string[] v) where T : DockerStackLsSettings => o.Modify(b => b.AddCollection(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T AddNamespace<T>(this T o, IEnumerable<string> v) where T : DockerStackLsSettings => o.Modify(b => b.AddCollection(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T RemoveNamespace<T>(this T o, params string[] v) where T : DockerStackLsSettings => o.Modify(b => b.RemoveCollection(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T RemoveNamespace<T>(this T o, IEnumerable<string> v) where T : DockerStackLsSettings => o.Modify(b => b.RemoveCollection(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackLsSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackLsSettings), Property = nameof(DockerStackLsSettings.Namespace))]
    public static T ClearNamespace<T>(this T o) where T : DockerStackLsSettings => o.Modify(b => b.ClearCollection(() => o.Namespace));
    #endregion
}
#endregion
#region DockerContainerInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerContainerInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Size
    /// <inheritdoc cref="DockerContainerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Size))]
    public static T SetSize<T>(this T o, bool? v) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Size, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Size))]
    public static T ResetSize<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.Remove(() => o.Size));
    /// <inheritdoc cref="DockerContainerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Size))]
    public static T EnableSize<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Size, true));
    /// <inheritdoc cref="DockerContainerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Size))]
    public static T DisableSize<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Size, false));
    /// <inheritdoc cref="DockerContainerInspectSettings.Size"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Size))]
    public static T ToggleSize<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Size, !o.Size));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerInspectSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerInspectSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerInspectSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerInspectSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerInspectSettings), Property = nameof(DockerContainerInspectSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerInspectSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerKillSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerKillSettingsExtensions
{
    #region Signal
    /// <inheritdoc cref="DockerKillSettings.Signal"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Signal))]
    public static T SetSignal<T>(this T o, string v) where T : DockerKillSettings => o.Modify(b => b.Set(() => o.Signal, v));
    /// <inheritdoc cref="DockerKillSettings.Signal"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Signal))]
    public static T ResetSignal<T>(this T o) where T : DockerKillSettings => o.Modify(b => b.Remove(() => o.Signal));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerKillSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerKillSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerKillSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerKillSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerKillSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerKillSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerKillSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerKillSettings), Property = nameof(DockerKillSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerKillSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerCheckpointCreateSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerCheckpointCreateSettingsExtensions
{
    #region CheckpointDir
    /// <inheritdoc cref="DockerCheckpointCreateSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.CheckpointDir))]
    public static T SetCheckpointDir<T>(this T o, string v) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.CheckpointDir, v));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.CheckpointDir))]
    public static T ResetCheckpointDir<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Remove(() => o.CheckpointDir));
    #endregion
    #region LeaveRunning
    /// <inheritdoc cref="DockerCheckpointCreateSettings.LeaveRunning"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.LeaveRunning))]
    public static T SetLeaveRunning<T>(this T o, bool? v) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.LeaveRunning, v));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.LeaveRunning"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.LeaveRunning))]
    public static T ResetLeaveRunning<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Remove(() => o.LeaveRunning));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.LeaveRunning"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.LeaveRunning))]
    public static T EnableLeaveRunning<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.LeaveRunning, true));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.LeaveRunning"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.LeaveRunning))]
    public static T DisableLeaveRunning<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.LeaveRunning, false));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.LeaveRunning"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.LeaveRunning))]
    public static T ToggleLeaveRunning<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.LeaveRunning, !o.LeaveRunning));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerCheckpointCreateSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Checkpoint
    /// <inheritdoc cref="DockerCheckpointCreateSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.Checkpoint))]
    public static T SetCheckpoint<T>(this T o, string v) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Set(() => o.Checkpoint, v));
    /// <inheritdoc cref="DockerCheckpointCreateSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerCheckpointCreateSettings), Property = nameof(DockerCheckpointCreateSettings.Checkpoint))]
    public static T ResetCheckpoint<T>(this T o) where T : DockerCheckpointCreateSettings => o.Modify(b => b.Remove(() => o.Checkpoint));
    #endregion
}
#endregion
#region DockerPauseSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPauseSettingsExtensions
{
    #region Containers
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerPauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerPauseSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerPauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerPauseSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerPauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerPauseSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerPauseSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerPauseSettings), Property = nameof(DockerPauseSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerPauseSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerLogsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerLogsSettingsExtensions
{
    #region Details
    /// <inheritdoc cref="DockerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Details))]
    public static T SetDetails<T>(this T o, bool? v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Details, v));
    /// <inheritdoc cref="DockerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Details))]
    public static T ResetDetails<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Details));
    /// <inheritdoc cref="DockerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Details))]
    public static T EnableDetails<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Details, true));
    /// <inheritdoc cref="DockerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Details))]
    public static T DisableDetails<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Details, false));
    /// <inheritdoc cref="DockerLogsSettings.Details"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Details))]
    public static T ToggleDetails<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Details, !o.Details));
    #endregion
    #region Follow
    /// <inheritdoc cref="DockerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Follow))]
    public static T SetFollow<T>(this T o, bool? v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Follow, v));
    /// <inheritdoc cref="DockerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Follow))]
    public static T ResetFollow<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Follow));
    /// <inheritdoc cref="DockerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Follow))]
    public static T EnableFollow<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Follow, true));
    /// <inheritdoc cref="DockerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Follow))]
    public static T DisableFollow<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Follow, false));
    /// <inheritdoc cref="DockerLogsSettings.Follow"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Follow))]
    public static T ToggleFollow<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Follow, !o.Follow));
    #endregion
    #region Since
    /// <inheritdoc cref="DockerLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Since))]
    public static T SetSince<T>(this T o, string v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Since, v));
    /// <inheritdoc cref="DockerLogsSettings.Since"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Since))]
    public static T ResetSince<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Since));
    #endregion
    #region Tail
    /// <inheritdoc cref="DockerLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Tail))]
    public static T SetTail<T>(this T o, string v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Tail, v));
    /// <inheritdoc cref="DockerLogsSettings.Tail"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Tail))]
    public static T ResetTail<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Tail));
    #endregion
    #region Timestamps
    /// <inheritdoc cref="DockerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Timestamps))]
    public static T SetTimestamps<T>(this T o, bool? v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, v));
    /// <inheritdoc cref="DockerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Timestamps))]
    public static T ResetTimestamps<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Timestamps));
    /// <inheritdoc cref="DockerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Timestamps))]
    public static T EnableTimestamps<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, true));
    /// <inheritdoc cref="DockerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Timestamps))]
    public static T DisableTimestamps<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, false));
    /// <inheritdoc cref="DockerLogsSettings.Timestamps"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Timestamps))]
    public static T ToggleTimestamps<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Timestamps, !o.Timestamps));
    #endregion
    #region Until
    /// <inheritdoc cref="DockerLogsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Until))]
    public static T SetUntil<T>(this T o, string v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Until, v));
    /// <inheritdoc cref="DockerLogsSettings.Until"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Until))]
    public static T ResetUntil<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Until));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerLogsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerLogsSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerLogsSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerLogsSettings), Property = nameof(DockerLogsSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerLogsSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
}
#endregion
#region DockerContextInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerContextInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerContextInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerContextInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Context
    /// <inheritdoc cref="DockerContextInspectSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : DockerContextInspectSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Context"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Context))]
    public static T ResetContext<T>(this T o) where T : DockerContextInspectSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Contexts
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T SetContexts<T>(this T o, params string[] v) where T : DockerContextInspectSettings => o.Modify(b => b.Set(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T SetContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextInspectSettings => o.Modify(b => b.Set(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T AddContexts<T>(this T o, params string[] v) where T : DockerContextInspectSettings => o.Modify(b => b.AddCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T AddContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextInspectSettings => o.Modify(b => b.AddCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T RemoveContexts<T>(this T o, params string[] v) where T : DockerContextInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T RemoveContexts<T>(this T o, IEnumerable<string> v) where T : DockerContextInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Contexts, v));
    /// <inheritdoc cref="DockerContextInspectSettings.Contexts"/>
    [Pure] [Builder(Type = typeof(DockerContextInspectSettings), Property = nameof(DockerContextInspectSettings.Contexts))]
    public static T ClearContexts<T>(this T o) where T : DockerContextInspectSettings => o.Modify(b => b.ClearCollection(() => o.Contexts));
    #endregion
}
#endregion
#region DockerNodePromoteSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodePromoteSettingsExtensions
{
    #region Nodes
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T SetNodes<T>(this T o, params string[] v) where T : DockerNodePromoteSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T SetNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePromoteSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T AddNodes<T>(this T o, params string[] v) where T : DockerNodePromoteSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T AddNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePromoteSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, params string[] v) where T : DockerNodePromoteSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodePromoteSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodePromoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodePromoteSettings), Property = nameof(DockerNodePromoteSettings.Nodes))]
    public static T ClearNodes<T>(this T o) where T : DockerNodePromoteSettings => o.Modify(b => b.ClearCollection(() => o.Nodes));
    #endregion
}
#endregion
#region DockerNodeDemoteSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNodeDemoteSettingsExtensions
{
    #region Nodes
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T SetNodes<T>(this T o, params string[] v) where T : DockerNodeDemoteSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T SetNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeDemoteSettings => o.Modify(b => b.Set(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T AddNodes<T>(this T o, params string[] v) where T : DockerNodeDemoteSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T AddNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeDemoteSettings => o.Modify(b => b.AddCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, params string[] v) where T : DockerNodeDemoteSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T RemoveNodes<T>(this T o, IEnumerable<string> v) where T : DockerNodeDemoteSettings => o.Modify(b => b.RemoveCollection(() => o.Nodes, v));
    /// <inheritdoc cref="DockerNodeDemoteSettings.Nodes"/>
    [Pure] [Builder(Type = typeof(DockerNodeDemoteSettings), Property = nameof(DockerNodeDemoteSettings.Nodes))]
    public static T ClearNodes<T>(this T o) where T : DockerNodeDemoteSettings => o.Modify(b => b.ClearCollection(() => o.Nodes));
    #endregion
}
#endregion
#region DockerExecSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerExecSettingsExtensions
{
    #region Detach
    /// <inheritdoc cref="DockerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerExecSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerExecSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerExecSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Env
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T SetEnv<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T SetEnv<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T AddEnv<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T AddEnv<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.AddCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T RemoveEnv<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T RemoveEnv<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Env, v));
    /// <inheritdoc cref="DockerExecSettings.Env"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Env))]
    public static T ClearEnv<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.ClearCollection(() => o.Env));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerExecSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region Privileged
    /// <inheritdoc cref="DockerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Privileged))]
    public static T SetPrivileged<T>(this T o, bool? v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Privileged, v));
    /// <inheritdoc cref="DockerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Privileged))]
    public static T ResetPrivileged<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Privileged));
    /// <inheritdoc cref="DockerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Privileged))]
    public static T EnablePrivileged<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Privileged, true));
    /// <inheritdoc cref="DockerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Privileged))]
    public static T DisablePrivileged<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Privileged, false));
    /// <inheritdoc cref="DockerExecSettings.Privileged"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Privileged))]
    public static T TogglePrivileged<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Privileged, !o.Privileged));
    #endregion
    #region Tty
    /// <inheritdoc cref="DockerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Tty))]
    public static T SetTty<T>(this T o, bool? v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Tty, v));
    /// <inheritdoc cref="DockerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Tty))]
    public static T ResetTty<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Tty));
    /// <inheritdoc cref="DockerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Tty))]
    public static T EnableTty<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Tty, true));
    /// <inheritdoc cref="DockerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Tty))]
    public static T DisableTty<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Tty, false));
    /// <inheritdoc cref="DockerExecSettings.Tty"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Tty))]
    public static T ToggleTty<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Tty, !o.Tty));
    #endregion
    #region User
    /// <inheritdoc cref="DockerExecSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.User))]
    public static T SetUser<T>(this T o, string v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.User, v));
    /// <inheritdoc cref="DockerExecSettings.User"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.User))]
    public static T ResetUser<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.User));
    #endregion
    #region Workdir
    /// <inheritdoc cref="DockerExecSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Workdir))]
    public static T SetWorkdir<T>(this T o, string v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Workdir, v));
    /// <inheritdoc cref="DockerExecSettings.Workdir"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Workdir))]
    public static T ResetWorkdir<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Workdir));
    #endregion
    #region Container
    /// <inheritdoc cref="DockerExecSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Container))]
    public static T SetContainer<T>(this T o, string v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Container, v));
    /// <inheritdoc cref="DockerExecSettings.Container"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Container))]
    public static T ResetContainer<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Container));
    #endregion
    #region Command
    /// <inheritdoc cref="DockerExecSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerExecSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
    #region Args
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T SetArgs<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T SetArgs<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.Set(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T AddArgs<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T AddArgs<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.AddCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T RemoveArgs<T>(this T o, params string[] v) where T : DockerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T RemoveArgs<T>(this T o, IEnumerable<string> v) where T : DockerExecSettings => o.Modify(b => b.RemoveCollection(() => o.Args, v));
    /// <inheritdoc cref="DockerExecSettings.Args"/>
    [Pure] [Builder(Type = typeof(DockerExecSettings), Property = nameof(DockerExecSettings.Args))]
    public static T ClearArgs<T>(this T o) where T : DockerExecSettings => o.Modify(b => b.ClearCollection(() => o.Args));
    #endregion
}
#endregion
#region DockerImageRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageRmSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerImageRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerImageRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerImageRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerImageRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerImageRmSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region NoPrune
    /// <inheritdoc cref="DockerImageRmSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.NoPrune))]
    public static T SetNoPrune<T>(this T o, bool? v) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.NoPrune, v));
    /// <inheritdoc cref="DockerImageRmSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.NoPrune))]
    public static T ResetNoPrune<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Remove(() => o.NoPrune));
    /// <inheritdoc cref="DockerImageRmSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.NoPrune))]
    public static T EnableNoPrune<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.NoPrune, true));
    /// <inheritdoc cref="DockerImageRmSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.NoPrune))]
    public static T DisableNoPrune<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.NoPrune, false));
    /// <inheritdoc cref="DockerImageRmSettings.NoPrune"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.NoPrune))]
    public static T ToggleNoPrune<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.NoPrune, !o.NoPrune));
    #endregion
    #region Images
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T SetImages<T>(this T o, params string[] v) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T SetImages<T>(this T o, IEnumerable<string> v) where T : DockerImageRmSettings => o.Modify(b => b.Set(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T AddImages<T>(this T o, params string[] v) where T : DockerImageRmSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T AddImages<T>(this T o, IEnumerable<string> v) where T : DockerImageRmSettings => o.Modify(b => b.AddCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T RemoveImages<T>(this T o, params string[] v) where T : DockerImageRmSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T RemoveImages<T>(this T o, IEnumerable<string> v) where T : DockerImageRmSettings => o.Modify(b => b.RemoveCollection(() => o.Images, v));
    /// <inheritdoc cref="DockerImageRmSettings.Images"/>
    [Pure] [Builder(Type = typeof(DockerImageRmSettings), Property = nameof(DockerImageRmSettings.Images))]
    public static T ClearImages<T>(this T o) where T : DockerImageRmSettings => o.Modify(b => b.ClearCollection(() => o.Images));
    #endregion
}
#endregion
#region DockerImageSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageSettingsExtensions
{
}
#endregion
#region DockerContextSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContextSettingsExtensions
{
}
#endregion
#region DockerVolumeSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerVolumeSettingsExtensions
{
    #region Command
    /// <inheritdoc cref="DockerVolumeSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerVolumeSettings), Property = nameof(DockerVolumeSettings.Command))]
    public static T SetCommand<T>(this T o, string v) where T : DockerVolumeSettings => o.Modify(b => b.Set(() => o.Command, v));
    /// <inheritdoc cref="DockerVolumeSettings.Command"/>
    [Pure] [Builder(Type = typeof(DockerVolumeSettings), Property = nameof(DockerVolumeSettings.Command))]
    public static T ResetCommand<T>(this T o) where T : DockerVolumeSettings => o.Modify(b => b.Remove(() => o.Command));
    #endregion
}
#endregion
#region DockerContainerStartSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerContainerStartSettingsExtensions
{
    #region Attach
    /// <inheritdoc cref="DockerContainerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Attach))]
    public static T SetAttach<T>(this T o, bool? v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Attach, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Attach))]
    public static T ResetAttach<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Remove(() => o.Attach));
    /// <inheritdoc cref="DockerContainerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Attach))]
    public static T EnableAttach<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Attach, true));
    /// <inheritdoc cref="DockerContainerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Attach))]
    public static T DisableAttach<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Attach, false));
    /// <inheritdoc cref="DockerContainerStartSettings.Attach"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Attach))]
    public static T ToggleAttach<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Attach, !o.Attach));
    #endregion
    #region Checkpoint
    /// <inheritdoc cref="DockerContainerStartSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Checkpoint))]
    public static T SetCheckpoint<T>(this T o, string v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Checkpoint, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Checkpoint"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Checkpoint))]
    public static T ResetCheckpoint<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Remove(() => o.Checkpoint));
    #endregion
    #region CheckpointDir
    /// <inheritdoc cref="DockerContainerStartSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.CheckpointDir))]
    public static T SetCheckpointDir<T>(this T o, string v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.CheckpointDir, v));
    /// <inheritdoc cref="DockerContainerStartSettings.CheckpointDir"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.CheckpointDir))]
    public static T ResetCheckpointDir<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Remove(() => o.CheckpointDir));
    #endregion
    #region DetachKeys
    /// <inheritdoc cref="DockerContainerStartSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.DetachKeys))]
    public static T SetDetachKeys<T>(this T o, string v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.DetachKeys, v));
    /// <inheritdoc cref="DockerContainerStartSettings.DetachKeys"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.DetachKeys))]
    public static T ResetDetachKeys<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Remove(() => o.DetachKeys));
    #endregion
    #region Interactive
    /// <inheritdoc cref="DockerContainerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Interactive))]
    public static T SetInteractive<T>(this T o, bool? v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Interactive, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Interactive))]
    public static T ResetInteractive<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Remove(() => o.Interactive));
    /// <inheritdoc cref="DockerContainerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Interactive))]
    public static T EnableInteractive<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Interactive, true));
    /// <inheritdoc cref="DockerContainerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Interactive))]
    public static T DisableInteractive<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Interactive, false));
    /// <inheritdoc cref="DockerContainerStartSettings.Interactive"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Interactive))]
    public static T ToggleInteractive<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Interactive, !o.Interactive));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerContainerStartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerContainerStartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerContainerStartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerContainerStartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerContainerStartSettings), Property = nameof(DockerContainerStartSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerContainerStartSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerPluginInspectSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerPluginInspectSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerPluginInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerPluginInspectSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerPluginInspectSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Plugins
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T SetPlugins<T>(this T o, params string[] v) where T : DockerPluginInspectSettings => o.Modify(b => b.Set(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T SetPlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginInspectSettings => o.Modify(b => b.Set(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T AddPlugins<T>(this T o, params string[] v) where T : DockerPluginInspectSettings => o.Modify(b => b.AddCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T AddPlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginInspectSettings => o.Modify(b => b.AddCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T RemovePlugins<T>(this T o, params string[] v) where T : DockerPluginInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T RemovePlugins<T>(this T o, IEnumerable<string> v) where T : DockerPluginInspectSettings => o.Modify(b => b.RemoveCollection(() => o.Plugins, v));
    /// <inheritdoc cref="DockerPluginInspectSettings.Plugins"/>
    [Pure] [Builder(Type = typeof(DockerPluginInspectSettings), Property = nameof(DockerPluginInspectSettings.Plugins))]
    public static T ClearPlugins<T>(this T o) where T : DockerPluginInspectSettings => o.Modify(b => b.ClearCollection(() => o.Plugins));
    #endregion
}
#endregion
#region DockerLogoutSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerLogoutSettingsExtensions
{
    #region Server
    /// <inheritdoc cref="DockerLogoutSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerLogoutSettings), Property = nameof(DockerLogoutSettings.Server))]
    public static T SetServer<T>(this T o, string v) where T : DockerLogoutSettings => o.Modify(b => b.Set(() => o.Server, v));
    /// <inheritdoc cref="DockerLogoutSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerLogoutSettings), Property = nameof(DockerLogoutSettings.Server))]
    public static T ResetServer<T>(this T o) where T : DockerLogoutSettings => o.Modify(b => b.Remove(() => o.Server));
    #endregion
}
#endregion
#region DockerNetworkSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerNetworkSettingsExtensions
{
}
#endregion
#region DockerImageLsSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerImageLsSettingsExtensions
{
    #region All
    /// <inheritdoc cref="DockerImageLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.All))]
    public static T SetAll<T>(this T o, bool? v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.All, v));
    /// <inheritdoc cref="DockerImageLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.All))]
    public static T ResetAll<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.All));
    /// <inheritdoc cref="DockerImageLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.All))]
    public static T EnableAll<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.All, true));
    /// <inheritdoc cref="DockerImageLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.All))]
    public static T DisableAll<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.All, false));
    /// <inheritdoc cref="DockerImageLsSettings.All"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.All))]
    public static T ToggleAll<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.All, !o.All));
    #endregion
    #region Digests
    /// <inheritdoc cref="DockerImageLsSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Digests))]
    public static T SetDigests<T>(this T o, bool? v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Digests, v));
    /// <inheritdoc cref="DockerImageLsSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Digests))]
    public static T ResetDigests<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.Digests));
    /// <inheritdoc cref="DockerImageLsSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Digests))]
    public static T EnableDigests<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Digests, true));
    /// <inheritdoc cref="DockerImageLsSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Digests))]
    public static T DisableDigests<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Digests, false));
    /// <inheritdoc cref="DockerImageLsSettings.Digests"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Digests))]
    public static T ToggleDigests<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Digests, !o.Digests));
    #endregion
    #region Filter
    /// <inheritdoc cref="DockerImageLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Filter))]
    public static T SetFilter<T>(this T o, string v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Filter, v));
    /// <inheritdoc cref="DockerImageLsSettings.Filter"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Filter))]
    public static T ResetFilter<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.Filter));
    #endregion
    #region Format
    /// <inheritdoc cref="DockerImageLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerImageLsSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region NoTrunc
    /// <inheritdoc cref="DockerImageLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.NoTrunc))]
    public static T SetNoTrunc<T>(this T o, bool? v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, v));
    /// <inheritdoc cref="DockerImageLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.NoTrunc))]
    public static T ResetNoTrunc<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.NoTrunc));
    /// <inheritdoc cref="DockerImageLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.NoTrunc))]
    public static T EnableNoTrunc<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, true));
    /// <inheritdoc cref="DockerImageLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.NoTrunc))]
    public static T DisableNoTrunc<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, false));
    /// <inheritdoc cref="DockerImageLsSettings.NoTrunc"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.NoTrunc))]
    public static T ToggleNoTrunc<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.NoTrunc, !o.NoTrunc));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerImageLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerImageLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerImageLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerImageLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerImageLsSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Repository
    /// <inheritdoc cref="DockerImageLsSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Repository))]
    public static T SetRepository<T>(this T o, string v) where T : DockerImageLsSettings => o.Modify(b => b.Set(() => o.Repository, v));
    /// <inheritdoc cref="DockerImageLsSettings.Repository"/>
    [Pure] [Builder(Type = typeof(DockerImageLsSettings), Property = nameof(DockerImageLsSettings.Repository))]
    public static T ResetRepository<T>(this T o) where T : DockerImageLsSettings => o.Modify(b => b.Remove(() => o.Repository));
    #endregion
}
#endregion
#region DockerSystemDfSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerSystemDfSettingsExtensions
{
    #region Format
    /// <inheritdoc cref="DockerSystemDfSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Format))]
    public static T SetFormat<T>(this T o, string v) where T : DockerSystemDfSettings => o.Modify(b => b.Set(() => o.Format, v));
    /// <inheritdoc cref="DockerSystemDfSettings.Format"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Format))]
    public static T ResetFormat<T>(this T o) where T : DockerSystemDfSettings => o.Modify(b => b.Remove(() => o.Format));
    #endregion
    #region Verbose
    /// <inheritdoc cref="DockerSystemDfSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : DockerSystemDfSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="DockerSystemDfSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : DockerSystemDfSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="DockerSystemDfSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : DockerSystemDfSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="DockerSystemDfSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : DockerSystemDfSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="DockerSystemDfSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(DockerSystemDfSettings), Property = nameof(DockerSystemDfSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : DockerSystemDfSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region DockerServiceRollbackSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerServiceRollbackSettingsExtensions
{
    #region Detach
    /// <inheritdoc cref="DockerServiceRollbackSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Detach))]
    public static T SetDetach<T>(this T o, bool? v) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Detach, v));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Detach))]
    public static T ResetDetach<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Remove(() => o.Detach));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Detach))]
    public static T EnableDetach<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Detach, true));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Detach))]
    public static T DisableDetach<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Detach, false));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Detach"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Detach))]
    public static T ToggleDetach<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Detach, !o.Detach));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerServiceRollbackSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Service
    /// <inheritdoc cref="DockerServiceRollbackSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Service))]
    public static T SetService<T>(this T o, string v) where T : DockerServiceRollbackSettings => o.Modify(b => b.Set(() => o.Service, v));
    /// <inheritdoc cref="DockerServiceRollbackSettings.Service"/>
    [Pure] [Builder(Type = typeof(DockerServiceRollbackSettings), Property = nameof(DockerServiceRollbackSettings.Service))]
    public static T ResetService<T>(this T o) where T : DockerServiceRollbackSettings => o.Modify(b => b.Remove(() => o.Service));
    #endregion
}
#endregion
#region DockerRestartSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRestartSettingsExtensions
{
    #region Time
    /// <inheritdoc cref="DockerRestartSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Time))]
    public static T SetTime<T>(this T o, int? v) where T : DockerRestartSettings => o.Modify(b => b.Set(() => o.Time, v));
    /// <inheritdoc cref="DockerRestartSettings.Time"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Time))]
    public static T ResetTime<T>(this T o) where T : DockerRestartSettings => o.Modify(b => b.Remove(() => o.Time));
    #endregion
    #region Containers
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T SetContainers<T>(this T o, params string[] v) where T : DockerRestartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T SetContainers<T>(this T o, IEnumerable<string> v) where T : DockerRestartSettings => o.Modify(b => b.Set(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T AddContainers<T>(this T o, params string[] v) where T : DockerRestartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T AddContainers<T>(this T o, IEnumerable<string> v) where T : DockerRestartSettings => o.Modify(b => b.AddCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, params string[] v) where T : DockerRestartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T RemoveContainers<T>(this T o, IEnumerable<string> v) where T : DockerRestartSettings => o.Modify(b => b.RemoveCollection(() => o.Containers, v));
    /// <inheritdoc cref="DockerRestartSettings.Containers"/>
    [Pure] [Builder(Type = typeof(DockerRestartSettings), Property = nameof(DockerRestartSettings.Containers))]
    public static T ClearContainers<T>(this T o) where T : DockerRestartSettings => o.Modify(b => b.ClearCollection(() => o.Containers));
    #endregion
}
#endregion
#region DockerTrustSignerRemoveSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerTrustSignerRemoveSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Force))]
    public static T ResetForce<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Force))]
    public static T EnableForce<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Force))]
    public static T DisableForce<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Name
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Name"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Name))]
    public static T ResetName<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Repositories
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T SetRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T SetRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.Set(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T AddRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.AddCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T AddRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.AddCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T RemoveRepositories<T>(this T o, params string[] v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.RemoveCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T RemoveRepositories<T>(this T o, IEnumerable<string> v) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.RemoveCollection(() => o.Repositories, v));
    /// <inheritdoc cref="DockerTrustSignerRemoveSettings.Repositories"/>
    [Pure] [Builder(Type = typeof(DockerTrustSignerRemoveSettings), Property = nameof(DockerTrustSignerRemoveSettings.Repositories))]
    public static T ClearRepositories<T>(this T o) where T : DockerTrustSignerRemoveSettings => o.Modify(b => b.ClearCollection(() => o.Repositories));
    #endregion
}
#endregion
#region DockerStackRmSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerStackRmSettingsExtensions
{
    #region Namespace
    /// <inheritdoc cref="DockerStackRmSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : DockerStackRmSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="DockerStackRmSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : DockerStackRmSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Stacks
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T SetStacks<T>(this T o, params string[] v) where T : DockerStackRmSettings => o.Modify(b => b.Set(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T SetStacks<T>(this T o, IEnumerable<string> v) where T : DockerStackRmSettings => o.Modify(b => b.Set(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T AddStacks<T>(this T o, params string[] v) where T : DockerStackRmSettings => o.Modify(b => b.AddCollection(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T AddStacks<T>(this T o, IEnumerable<string> v) where T : DockerStackRmSettings => o.Modify(b => b.AddCollection(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T RemoveStacks<T>(this T o, params string[] v) where T : DockerStackRmSettings => o.Modify(b => b.RemoveCollection(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T RemoveStacks<T>(this T o, IEnumerable<string> v) where T : DockerStackRmSettings => o.Modify(b => b.RemoveCollection(() => o.Stacks, v));
    /// <inheritdoc cref="DockerStackRmSettings.Stacks"/>
    [Pure] [Builder(Type = typeof(DockerStackRmSettings), Property = nameof(DockerStackRmSettings.Stacks))]
    public static T ClearStacks<T>(this T o) where T : DockerStackRmSettings => o.Modify(b => b.ClearCollection(() => o.Stacks));
    #endregion
}
#endregion
#region DockerBuildSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerBuildSettingsExtensions
{
    #region AddHost
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T SetAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T AddAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T RemoveAddHost<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.AddHost, v));
    /// <inheritdoc cref="DockerBuildSettings.AddHost"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.AddHost))]
    public static T ClearAddHost<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.AddHost));
    #endregion
    #region BuildArg
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T SetBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T AddBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T RemoveBuildArg<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.BuildArg, v));
    /// <inheritdoc cref="DockerBuildSettings.BuildArg"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.BuildArg))]
    public static T ClearBuildArg<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.BuildArg));
    #endregion
    #region CacheFrom
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T SetCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T AddCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T RemoveCacheFrom<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.CacheFrom, v));
    /// <inheritdoc cref="DockerBuildSettings.CacheFrom"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CacheFrom))]
    public static T ClearCacheFrom<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.CacheFrom));
    #endregion
    #region CgroupParent
    /// <inheritdoc cref="DockerBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CgroupParent))]
    public static T SetCgroupParent<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CgroupParent, v));
    /// <inheritdoc cref="DockerBuildSettings.CgroupParent"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CgroupParent))]
    public static T ResetCgroupParent<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CgroupParent));
    #endregion
    #region Compress
    /// <inheritdoc cref="DockerBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Compress))]
    public static T SetCompress<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Compress, v));
    /// <inheritdoc cref="DockerBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Compress))]
    public static T ResetCompress<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Compress));
    /// <inheritdoc cref="DockerBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Compress))]
    public static T EnableCompress<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Compress, true));
    /// <inheritdoc cref="DockerBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Compress))]
    public static T DisableCompress<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Compress, false));
    /// <inheritdoc cref="DockerBuildSettings.Compress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Compress))]
    public static T ToggleCompress<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Compress, !o.Compress));
    #endregion
    #region CpuPeriod
    /// <inheritdoc cref="DockerBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuPeriod))]
    public static T SetCpuPeriod<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CpuPeriod, v));
    /// <inheritdoc cref="DockerBuildSettings.CpuPeriod"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuPeriod))]
    public static T ResetCpuPeriod<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CpuPeriod));
    #endregion
    #region CpuQuota
    /// <inheritdoc cref="DockerBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuQuota))]
    public static T SetCpuQuota<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CpuQuota, v));
    /// <inheritdoc cref="DockerBuildSettings.CpuQuota"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuQuota))]
    public static T ResetCpuQuota<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CpuQuota));
    #endregion
    #region CpuShares
    /// <inheritdoc cref="DockerBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuShares))]
    public static T SetCpuShares<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CpuShares, v));
    /// <inheritdoc cref="DockerBuildSettings.CpuShares"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpuShares))]
    public static T ResetCpuShares<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CpuShares));
    #endregion
    #region CpusetCpus
    /// <inheritdoc cref="DockerBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpusetCpus))]
    public static T SetCpusetCpus<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CpusetCpus, v));
    /// <inheritdoc cref="DockerBuildSettings.CpusetCpus"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpusetCpus))]
    public static T ResetCpusetCpus<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CpusetCpus));
    #endregion
    #region CpusetMems
    /// <inheritdoc cref="DockerBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpusetMems))]
    public static T SetCpusetMems<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.CpusetMems, v));
    /// <inheritdoc cref="DockerBuildSettings.CpusetMems"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.CpusetMems))]
    public static T ResetCpusetMems<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.CpusetMems));
    #endregion
    #region DisableContentTrust
    /// <inheritdoc cref="DockerBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.DisableContentTrust))]
    public static T SetDisableContentTrust<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, v));
    /// <inheritdoc cref="DockerBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.DisableContentTrust))]
    public static T ResetDisableContentTrust<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.DisableContentTrust));
    /// <inheritdoc cref="DockerBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.DisableContentTrust))]
    public static T EnableDisableContentTrust<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, true));
    /// <inheritdoc cref="DockerBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.DisableContentTrust))]
    public static T DisableDisableContentTrust<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, false));
    /// <inheritdoc cref="DockerBuildSettings.DisableContentTrust"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.DisableContentTrust))]
    public static T ToggleDisableContentTrust<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.DisableContentTrust, !o.DisableContentTrust));
    #endregion
    #region File
    /// <inheritdoc cref="DockerBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="DockerBuildSettings.File"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.File))]
    public static T ResetFile<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region ForceRm
    /// <inheritdoc cref="DockerBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ForceRm))]
    public static T SetForceRm<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, v));
    /// <inheritdoc cref="DockerBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ForceRm))]
    public static T ResetForceRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.ForceRm));
    /// <inheritdoc cref="DockerBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ForceRm))]
    public static T EnableForceRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, true));
    /// <inheritdoc cref="DockerBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ForceRm))]
    public static T DisableForceRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, false));
    /// <inheritdoc cref="DockerBuildSettings.ForceRm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ForceRm))]
    public static T ToggleForceRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.ForceRm, !o.ForceRm));
    #endregion
    #region Iidfile
    /// <inheritdoc cref="DockerBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Iidfile))]
    public static T SetIidfile<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Iidfile, v));
    /// <inheritdoc cref="DockerBuildSettings.Iidfile"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Iidfile))]
    public static T ResetIidfile<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Iidfile));
    #endregion
    #region Isolation
    /// <inheritdoc cref="DockerBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Isolation))]
    public static T SetIsolation<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Isolation, v));
    /// <inheritdoc cref="DockerBuildSettings.Isolation"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Isolation))]
    public static T ResetIsolation<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Isolation));
    #endregion
    #region Label
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T SetLabel<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T SetLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T AddLabel<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T AddLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T RemoveLabel<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Label, v));
    /// <inheritdoc cref="DockerBuildSettings.Label"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Label))]
    public static T ClearLabel<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.Label));
    #endregion
    #region Memory
    /// <inheritdoc cref="DockerBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Memory))]
    public static T SetMemory<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Memory, v));
    /// <inheritdoc cref="DockerBuildSettings.Memory"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Memory))]
    public static T ResetMemory<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Memory));
    #endregion
    #region MemorySwap
    /// <inheritdoc cref="DockerBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.MemorySwap))]
    public static T SetMemorySwap<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.MemorySwap, v));
    /// <inheritdoc cref="DockerBuildSettings.MemorySwap"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.MemorySwap))]
    public static T ResetMemorySwap<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.MemorySwap));
    #endregion
    #region Network
    /// <inheritdoc cref="DockerBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Network))]
    public static T SetNetwork<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Network, v));
    /// <inheritdoc cref="DockerBuildSettings.Network"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Network))]
    public static T ResetNetwork<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Network));
    #endregion
    #region NoCache
    /// <inheritdoc cref="DockerBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.NoCache))]
    public static T SetNoCache<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.NoCache, v));
    /// <inheritdoc cref="DockerBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.NoCache))]
    public static T ResetNoCache<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.NoCache));
    /// <inheritdoc cref="DockerBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.NoCache))]
    public static T EnableNoCache<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.NoCache, true));
    /// <inheritdoc cref="DockerBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.NoCache))]
    public static T DisableNoCache<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.NoCache, false));
    /// <inheritdoc cref="DockerBuildSettings.NoCache"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.NoCache))]
    public static T ToggleNoCache<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.NoCache, !o.NoCache));
    #endregion
    #region Output
    /// <inheritdoc cref="DockerBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="DockerBuildSettings.Output"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Platform
    /// <inheritdoc cref="DockerBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Platform))]
    public static T SetPlatform<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Platform, v));
    /// <inheritdoc cref="DockerBuildSettings.Platform"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Platform))]
    public static T ResetPlatform<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Platform));
    #endregion
    #region Progress
    /// <inheritdoc cref="DockerBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Progress))]
    public static T SetProgress<T>(this T o, DockerProgressType v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Progress, v));
    /// <inheritdoc cref="DockerBuildSettings.Progress"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Progress))]
    public static T ResetProgress<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Progress));
    #endregion
    #region Pull
    /// <inheritdoc cref="DockerBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Pull))]
    public static T SetPull<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Pull, v));
    /// <inheritdoc cref="DockerBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Pull))]
    public static T ResetPull<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Pull));
    /// <inheritdoc cref="DockerBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Pull))]
    public static T EnablePull<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Pull, true));
    /// <inheritdoc cref="DockerBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Pull))]
    public static T DisablePull<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Pull, false));
    /// <inheritdoc cref="DockerBuildSettings.Pull"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Pull))]
    public static T TogglePull<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Pull, !o.Pull));
    #endregion
    #region Quiet
    /// <inheritdoc cref="DockerBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Quiet))]
    public static T SetQuiet<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Quiet, v));
    /// <inheritdoc cref="DockerBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Quiet))]
    public static T ResetQuiet<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Quiet));
    /// <inheritdoc cref="DockerBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Quiet))]
    public static T EnableQuiet<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Quiet, true));
    /// <inheritdoc cref="DockerBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Quiet))]
    public static T DisableQuiet<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Quiet, false));
    /// <inheritdoc cref="DockerBuildSettings.Quiet"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Quiet))]
    public static T ToggleQuiet<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Quiet, !o.Quiet));
    #endregion
    #region Rm
    /// <inheritdoc cref="DockerBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Rm))]
    public static T SetRm<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Rm, v));
    /// <inheritdoc cref="DockerBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Rm))]
    public static T ResetRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Rm));
    /// <inheritdoc cref="DockerBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Rm))]
    public static T EnableRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Rm, true));
    /// <inheritdoc cref="DockerBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Rm))]
    public static T DisableRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Rm, false));
    /// <inheritdoc cref="DockerBuildSettings.Rm"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Rm))]
    public static T ToggleRm<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Rm, !o.Rm));
    #endregion
    #region Secret
    /// <inheritdoc cref="DockerBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Secret))]
    public static T SetSecret<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Secret, v));
    /// <inheritdoc cref="DockerBuildSettings.Secret"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Secret))]
    public static T ResetSecret<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Secret));
    #endregion
    #region SecurityOpt
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T SetSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T AddSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T RemoveSecurityOpt<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.SecurityOpt, v));
    /// <inheritdoc cref="DockerBuildSettings.SecurityOpt"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.SecurityOpt))]
    public static T ClearSecurityOpt<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.SecurityOpt));
    #endregion
    #region ShmSize
    /// <inheritdoc cref="DockerBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ShmSize))]
    public static T SetShmSize<T>(this T o, long? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.ShmSize, v));
    /// <inheritdoc cref="DockerBuildSettings.ShmSize"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.ShmSize))]
    public static T ResetShmSize<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.ShmSize));
    #endregion
    #region Squash
    /// <inheritdoc cref="DockerBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Squash))]
    public static T SetSquash<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Squash, v));
    /// <inheritdoc cref="DockerBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Squash))]
    public static T ResetSquash<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Squash));
    /// <inheritdoc cref="DockerBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Squash))]
    public static T EnableSquash<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Squash, true));
    /// <inheritdoc cref="DockerBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Squash))]
    public static T DisableSquash<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Squash, false));
    /// <inheritdoc cref="DockerBuildSettings.Squash"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Squash))]
    public static T ToggleSquash<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Squash, !o.Squash));
    #endregion
    #region Ssh
    /// <inheritdoc cref="DockerBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Ssh))]
    public static T SetSsh<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Ssh, v));
    /// <inheritdoc cref="DockerBuildSettings.Ssh"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Ssh))]
    public static T ResetSsh<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Ssh));
    #endregion
    #region Stream
    /// <inheritdoc cref="DockerBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Stream))]
    public static T SetStream<T>(this T o, bool? v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Stream, v));
    /// <inheritdoc cref="DockerBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Stream))]
    public static T ResetStream<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Stream));
    /// <inheritdoc cref="DockerBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Stream))]
    public static T EnableStream<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Stream, true));
    /// <inheritdoc cref="DockerBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Stream))]
    public static T DisableStream<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Stream, false));
    /// <inheritdoc cref="DockerBuildSettings.Stream"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Stream))]
    public static T ToggleStream<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Stream, !o.Stream));
    #endregion
    #region Tag
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T SetTag<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T SetTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T AddTag<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T AddTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.AddCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, params string[] v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T RemoveTag<T>(this T o, IEnumerable<string> v) where T : DockerBuildSettings => o.Modify(b => b.RemoveCollection(() => o.Tag, v));
    /// <inheritdoc cref="DockerBuildSettings.Tag"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Tag))]
    public static T ClearTag<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.ClearCollection(() => o.Tag));
    #endregion
    #region Target
    /// <inheritdoc cref="DockerBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Target))]
    public static T SetTarget<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Target, v));
    /// <inheritdoc cref="DockerBuildSettings.Target"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Target))]
    public static T ResetTarget<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Target));
    #endregion
    #region Ulimit
    /// <inheritdoc cref="DockerBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Ulimit))]
    public static T SetUlimit<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Ulimit, v));
    /// <inheritdoc cref="DockerBuildSettings.Ulimit"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Ulimit))]
    public static T ResetUlimit<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Ulimit));
    #endregion
    #region Path
    /// <inheritdoc cref="DockerBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Path))]
    public static T SetPath<T>(this T o, string v) where T : DockerBuildSettings => o.Modify(b => b.Set(() => o.Path, v));
    /// <inheritdoc cref="DockerBuildSettings.Path"/>
    [Pure] [Builder(Type = typeof(DockerBuildSettings), Property = nameof(DockerBuildSettings.Path))]
    public static T ResetPath<T>(this T o) where T : DockerBuildSettings => o.Modify(b => b.Remove(() => o.Path));
    #endregion
}
#endregion
#region DockerOptionsBaseExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerOptionsBaseExtensions
{
    #region LogLevel
    /// <inheritdoc cref="DockerOptionsBase.LogLevel"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.LogLevel))]
    public static T SetLogLevel<T>(this T o, DockerLogLevel v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.LogLevel, v));
    /// <inheritdoc cref="DockerOptionsBase.LogLevel"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.LogLevel))]
    public static T ResetLogLevel<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.LogLevel));
    #endregion
    #region Config
    /// <inheritdoc cref="DockerOptionsBase.Config"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Config))]
    public static T SetConfig<T>(this T o, string v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.Config, v));
    /// <inheritdoc cref="DockerOptionsBase.Config"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Config))]
    public static T ResetConfig<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.Config));
    #endregion
    #region Debug
    /// <inheritdoc cref="DockerOptionsBase.Debug"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Debug))]
    public static T SetDebug<T>(this T o, bool? v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.Debug, v));
    /// <inheritdoc cref="DockerOptionsBase.Debug"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Debug))]
    public static T ResetDebug<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.Debug));
    /// <inheritdoc cref="DockerOptionsBase.Debug"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Debug))]
    public static T EnableDebug<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.Debug, true));
    /// <inheritdoc cref="DockerOptionsBase.Debug"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Debug))]
    public static T DisableDebug<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.Debug, false));
    /// <inheritdoc cref="DockerOptionsBase.Debug"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.Debug))]
    public static T ToggleDebug<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.Debug, !o.Debug));
    #endregion
    #region TLS
    /// <inheritdoc cref="DockerOptionsBase.TLS"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLS))]
    public static T SetTLS<T>(this T o, bool? v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLS, v));
    /// <inheritdoc cref="DockerOptionsBase.TLS"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLS))]
    public static T ResetTLS<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.TLS));
    /// <inheritdoc cref="DockerOptionsBase.TLS"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLS))]
    public static T EnableTLS<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLS, true));
    /// <inheritdoc cref="DockerOptionsBase.TLS"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLS))]
    public static T DisableTLS<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLS, false));
    /// <inheritdoc cref="DockerOptionsBase.TLS"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLS))]
    public static T ToggleTLS<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLS, !o.TLS));
    #endregion
    #region TLSVerify
    /// <inheritdoc cref="DockerOptionsBase.TLSVerify"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSVerify))]
    public static T SetTLSVerify<T>(this T o, bool? v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSVerify, v));
    /// <inheritdoc cref="DockerOptionsBase.TLSVerify"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSVerify))]
    public static T ResetTLSVerify<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.TLSVerify));
    /// <inheritdoc cref="DockerOptionsBase.TLSVerify"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSVerify))]
    public static T EnableTLSVerify<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSVerify, true));
    /// <inheritdoc cref="DockerOptionsBase.TLSVerify"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSVerify))]
    public static T DisableTLSVerify<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSVerify, false));
    /// <inheritdoc cref="DockerOptionsBase.TLSVerify"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSVerify))]
    public static T ToggleTLSVerify<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSVerify, !o.TLSVerify));
    #endregion
    #region TLSCaCert
    /// <inheritdoc cref="DockerOptionsBase.TLSCaCert"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSCaCert))]
    public static T SetTLSCaCert<T>(this T o, string v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSCaCert, v));
    /// <inheritdoc cref="DockerOptionsBase.TLSCaCert"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSCaCert))]
    public static T ResetTLSCaCert<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.TLSCaCert));
    #endregion
    #region TLSCert
    /// <inheritdoc cref="DockerOptionsBase.TLSCert"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSCert))]
    public static T SetTLSCert<T>(this T o, string v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSCert, v));
    /// <inheritdoc cref="DockerOptionsBase.TLSCert"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSCert))]
    public static T ResetTLSCert<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.TLSCert));
    #endregion
    #region TLSKey
    /// <inheritdoc cref="DockerOptionsBase.TLSKey"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSKey))]
    public static T SetTLSKey<T>(this T o, string v) where T : DockerOptionsBase => o.Modify(b => b.Set(() => o.TLSKey, v));
    /// <inheritdoc cref="DockerOptionsBase.TLSKey"/>
    [Pure] [Builder(Type = typeof(DockerOptionsBase), Property = nameof(DockerOptionsBase.TLSKey))]
    public static T ResetTLSKey<T>(this T o) where T : DockerOptionsBase => o.Modify(b => b.Remove(() => o.TLSKey));
    #endregion
}
#endregion
#region DockerRunTargetSettingsExtensions
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class DockerRunTargetSettingsExtensions
{
    #region PullImage
    /// <inheritdoc cref="DockerRunTargetSettings.PullImage"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.PullImage))]
    public static T SetPullImage<T>(this T o, bool? v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.PullImage, v));
    /// <inheritdoc cref="DockerRunTargetSettings.PullImage"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.PullImage))]
    public static T ResetPullImage<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.PullImage));
    /// <inheritdoc cref="DockerRunTargetSettings.PullImage"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.PullImage))]
    public static T EnablePullImage<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.PullImage, true));
    /// <inheritdoc cref="DockerRunTargetSettings.PullImage"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.PullImage))]
    public static T DisablePullImage<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.PullImage, false));
    /// <inheritdoc cref="DockerRunTargetSettings.PullImage"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.PullImage))]
    public static T TogglePullImage<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.PullImage, !o.PullImage));
    #endregion
    #region DotNetRuntime
    /// <inheritdoc cref="DockerRunTargetSettings.DotNetRuntime"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.DotNetRuntime))]
    public static T SetDotNetRuntime<T>(this T o, string v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.DotNetRuntime, v));
    /// <inheritdoc cref="DockerRunTargetSettings.DotNetRuntime"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.DotNetRuntime))]
    public static T ResetDotNetRuntime<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.DotNetRuntime));
    #endregion
    #region BuildCaching
    /// <inheritdoc cref="DockerRunTargetSettings.BuildCaching"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.BuildCaching))]
    public static T SetBuildCaching<T>(this T o, bool? v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.BuildCaching, v));
    /// <inheritdoc cref="DockerRunTargetSettings.BuildCaching"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.BuildCaching))]
    public static T ResetBuildCaching<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.BuildCaching));
    /// <inheritdoc cref="DockerRunTargetSettings.BuildCaching"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.BuildCaching))]
    public static T EnableBuildCaching<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.BuildCaching, true));
    /// <inheritdoc cref="DockerRunTargetSettings.BuildCaching"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.BuildCaching))]
    public static T DisableBuildCaching<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.BuildCaching, false));
    /// <inheritdoc cref="DockerRunTargetSettings.BuildCaching"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.BuildCaching))]
    public static T ToggleBuildCaching<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.BuildCaching, !o.BuildCaching));
    #endregion
    #region KeepEnvFile
    /// <inheritdoc cref="DockerRunTargetSettings.KeepEnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.KeepEnvFile))]
    public static T SetKeepEnvFile<T>(this T o, bool? v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.KeepEnvFile, v));
    /// <inheritdoc cref="DockerRunTargetSettings.KeepEnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.KeepEnvFile))]
    public static T ResetKeepEnvFile<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.KeepEnvFile));
    /// <inheritdoc cref="DockerRunTargetSettings.KeepEnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.KeepEnvFile))]
    public static T EnableKeepEnvFile<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.KeepEnvFile, true));
    /// <inheritdoc cref="DockerRunTargetSettings.KeepEnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.KeepEnvFile))]
    public static T DisableKeepEnvFile<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.KeepEnvFile, false));
    /// <inheritdoc cref="DockerRunTargetSettings.KeepEnvFile"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.KeepEnvFile))]
    public static T ToggleKeepEnvFile<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.KeepEnvFile, !o.KeepEnvFile));
    #endregion
    #region Username
    /// <inheritdoc cref="DockerRunTargetSettings.Username"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Username))]
    public static T SetUsername<T>(this T o, string v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.Username, v));
    /// <inheritdoc cref="DockerRunTargetSettings.Username"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Username))]
    public static T ResetUsername<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.Username));
    #endregion
    #region Password
    /// <inheritdoc cref="DockerRunTargetSettings.Password"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Password))]
    public static T SetPassword<T>(this T o, string v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.Password, v));
    /// <inheritdoc cref="DockerRunTargetSettings.Password"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Password))]
    public static T ResetPassword<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.Password));
    #endregion
    #region Server
    /// <inheritdoc cref="DockerRunTargetSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Server))]
    public static T SetServer<T>(this T o, string v) where T : DockerRunTargetSettings => o.Modify(b => b.Set(() => o.Server, v));
    /// <inheritdoc cref="DockerRunTargetSettings.Server"/>
    [Pure] [Builder(Type = typeof(DockerRunTargetSettings), Property = nameof(DockerRunTargetSettings.Server))]
    public static T ResetServer<T>(this T o) where T : DockerRunTargetSettings => o.Modify(b => b.Remove(() => o.Server));
    #endregion
}
#endregion
#region DockerLogLevel
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerLogLevel>))]
public partial class DockerLogLevel : Enumeration
{
    public static DockerLogLevel debug = (DockerLogLevel) "debug";
    public static DockerLogLevel info = (DockerLogLevel) "info";
    public static DockerLogLevel warn = (DockerLogLevel) "warn";
    public static DockerLogLevel error = (DockerLogLevel) "error";
    public static DockerLogLevel fatal = (DockerLogLevel) "fatal";
    public static implicit operator DockerLogLevel(string value)
    {
        return new DockerLogLevel { Value = value };
    }
}
#endregion
#region DockerRestartCondition
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerRestartCondition>))]
public partial class DockerRestartCondition : Enumeration
{
    public static DockerRestartCondition none = (DockerRestartCondition) "none";
    public static DockerRestartCondition on_failure = (DockerRestartCondition) "on-failure";
    public static DockerRestartCondition any = (DockerRestartCondition) "any";
    public static implicit operator DockerRestartCondition(string value)
    {
        return new DockerRestartCondition { Value = value };
    }
}
#endregion
#region DockerRollbackFailureAction
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerRollbackFailureAction>))]
public partial class DockerRollbackFailureAction : Enumeration
{
    public static DockerRollbackFailureAction pause = (DockerRollbackFailureAction) "pause";
    public static DockerRollbackFailureAction continue_ = (DockerRollbackFailureAction) "continue";
    public static implicit operator DockerRollbackFailureAction(string value)
    {
        return new DockerRollbackFailureAction { Value = value };
    }
}
#endregion
#region DockerRollbackOrder
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerRollbackOrder>))]
public partial class DockerRollbackOrder : Enumeration
{
    public static DockerRollbackOrder start_first = (DockerRollbackOrder) "start-first";
    public static DockerRollbackOrder stop_first = (DockerRollbackOrder) "stop-first";
    public static implicit operator DockerRollbackOrder(string value)
    {
        return new DockerRollbackOrder { Value = value };
    }
}
#endregion
#region DockerUpdateFailureAction
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerUpdateFailureAction>))]
public partial class DockerUpdateFailureAction : Enumeration
{
    public static DockerUpdateFailureAction pause = (DockerUpdateFailureAction) "pause";
    public static DockerUpdateFailureAction continue_ = (DockerUpdateFailureAction) "continue";
    public static DockerUpdateFailureAction rollback = (DockerUpdateFailureAction) "rollback";
    public static implicit operator DockerUpdateFailureAction(string value)
    {
        return new DockerUpdateFailureAction { Value = value };
    }
}
#endregion
#region DockerUpdateOrder
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerUpdateOrder>))]
public partial class DockerUpdateOrder : Enumeration
{
    public static DockerUpdateOrder start_first = (DockerUpdateOrder) "start-first";
    public static DockerUpdateOrder stop_first = (DockerUpdateOrder) "stop-first";
    public static implicit operator DockerUpdateOrder(string value)
    {
        return new DockerUpdateOrder { Value = value };
    }
}
#endregion
#region DockerAvailability
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerAvailability>))]
public partial class DockerAvailability : Enumeration
{
    public static DockerAvailability active = (DockerAvailability) "active";
    public static DockerAvailability pause = (DockerAvailability) "pause";
    public static DockerAvailability drain = (DockerAvailability) "drain";
    public static implicit operator DockerAvailability(string value)
    {
        return new DockerAvailability { Value = value };
    }
}
#endregion
#region DockerRole
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerRole>))]
public partial class DockerRole : Enumeration
{
    public static DockerRole worker = (DockerRole) "worker";
    public static DockerRole manager = (DockerRole) "manager";
    public static implicit operator DockerRole(string value)
    {
        return new DockerRole { Value = value };
    }
}
#endregion
#region DockerResolveImage
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerResolveImage>))]
public partial class DockerResolveImage : Enumeration
{
    public static DockerResolveImage always = (DockerResolveImage) "always";
    public static DockerResolveImage changed = (DockerResolveImage) "changed";
    public static DockerResolveImage never = (DockerResolveImage) "never";
    public static implicit operator DockerResolveImage(string value)
    {
        return new DockerResolveImage { Value = value };
    }
}
#endregion
#region DockerProgressType
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerProgressType>))]
public partial class DockerProgressType : Enumeration
{
    public static DockerProgressType auto = (DockerProgressType) "auto";
    public static DockerProgressType plain = (DockerProgressType) "plain";
    public static DockerProgressType tty = (DockerProgressType) "tty";
    public static implicit operator DockerProgressType(string value)
    {
        return new DockerProgressType { Value = value };
    }
}
#endregion
#region DockerDriverType
/// <summary>Used within <see cref="DockerTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<DockerDriverType>))]
public partial class DockerDriverType : Enumeration
{
    public static DockerDriverType docker_container = (DockerDriverType) "docker-container";
    public static DockerDriverType kubernetes = (DockerDriverType) "kubernetes";
    public static DockerDriverType remote = (DockerDriverType) "remote";
    public static implicit operator DockerDriverType(string value)
    {
        return new DockerDriverType { Value = value };
    }
}
#endregion
