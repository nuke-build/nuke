// Generated from https://github.com/nuke-build/nuke/blob/master/source/Nuke.Common/Tools/EntityFramework/EntityFramework.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.EntityFramework;

/// <summary><p>The command-line interface (CLI) tools for Entity Framework Core perform design-time development tasks. For example, they create migrations, apply <a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations?view=aspnetcore-2.0#introduction-to-migrations">migrations</a>, and generate code for a model based on an existing database. The commands are an extension to the cross-platform <a href="https://docs.microsoft.com/en-us/dotnet/core/tools">dotnet</a> command, which is part of the <a href="https://www.microsoft.com/net/core">.NET Core SDK</a>. These tools work with .NET Core projects.<para/>If you're using Visual Studio, we recommend the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Package Manager Console tools</a> instead:<para/><ul><li>They automatically work with the current project selected in the Package Manager Console without requiring that you manually switch directories.</li><li>They automatically open files generated by a command after the command is completed.</li></ul></p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[NuGetPackageRequirement(PackageId)]
[NuGetTool(Id = PackageId, Executable = PackageExecutable)]
public partial class EntityFrameworkTasks : ToolTasks, IRequireNuGetPackage
{
    public static string EntityFrameworkPath => new EntityFrameworkTasks().GetToolPath();
    public const string PackageId = "dotnet-ef";
    public const string PackageExecutable = "dotnet-ef.dll|dotnet-ef.exe";
    /// <summary><p>The command-line interface (CLI) tools for Entity Framework Core perform design-time development tasks. For example, they create migrations, apply <a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations?view=aspnetcore-2.0#introduction-to-migrations">migrations</a>, and generate code for a model based on an existing database. The commands are an extension to the cross-platform <a href="https://docs.microsoft.com/en-us/dotnet/core/tools">dotnet</a> command, which is part of the <a href="https://www.microsoft.com/net/core">.NET Core SDK</a>. These tools work with .NET Core projects.<para/>If you're using Visual Studio, we recommend the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Package Manager Console tools</a> instead:<para/><ul><li>They automatically work with the current project selected in the Package Manager Console without requiring that you manually switch directories.</li><li>They automatically open files generated by a command after the command is completed.</li></ul></p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    public static IReadOnlyCollection<Output> EntityFramework(ArgumentStringHandler arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Action<OutputType, string> logger = null, Func<IProcess, object> exitHandler = null) => new EntityFrameworkTasks().Run(arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, logger, exitHandler);
    /// <summary><p>The <c>dotnet-ef database drop</c> command is used to drop the database.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseDropSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseDropSettings.Context"/></li><li><c>--dry-run</c> via <see cref="EntityFrameworkDatabaseDropSettings.DryRun"/></li><li><c>--force</c> via <see cref="EntityFrameworkDatabaseDropSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseDropSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseDropSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseDropSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseDropSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseDropSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseDropSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDatabaseDrop(EntityFrameworkDatabaseDropSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef database drop</c> command is used to drop the database.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseDropSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseDropSettings.Context"/></li><li><c>--dry-run</c> via <see cref="EntityFrameworkDatabaseDropSettings.DryRun"/></li><li><c>--force</c> via <see cref="EntityFrameworkDatabaseDropSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseDropSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseDropSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseDropSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseDropSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseDropSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseDropSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDatabaseDrop(Configure<EntityFrameworkDatabaseDropSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDatabaseDropSettings()));
    /// <summary><p>The <c>dotnet-ef database drop</c> command is used to drop the database.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseDropSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseDropSettings.Context"/></li><li><c>--dry-run</c> via <see cref="EntityFrameworkDatabaseDropSettings.DryRun"/></li><li><c>--force</c> via <see cref="EntityFrameworkDatabaseDropSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseDropSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseDropSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseDropSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseDropSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseDropSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseDropSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseDropSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDatabaseDropSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDatabaseDrop(CombinatorialConfigure<EntityFrameworkDatabaseDropSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDatabaseDrop, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef database update</c> command is used to update the database to the last migration or to a specified migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;migration&gt;</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Migration"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDatabaseUpdate(EntityFrameworkDatabaseUpdateSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef database update</c> command is used to update the database to the last migration or to a specified migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;migration&gt;</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Migration"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDatabaseUpdate(Configure<EntityFrameworkDatabaseUpdateSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDatabaseUpdateSettings()));
    /// <summary><p>The <c>dotnet-ef database update</c> command is used to update the database to the last migration or to a specified migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;migration&gt;</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Migration"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDatabaseUpdateSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDatabaseUpdate(CombinatorialConfigure<EntityFrameworkDatabaseUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDatabaseUpdate, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef dbcontext info</c> command is used to get information about a <c>DbContext</c> type.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextInfoSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextInfoSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextInfoSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextInfoSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextInfoSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextInfoSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextInfoSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextInfoSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextInfo(EntityFrameworkDbContextInfoSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef dbcontext info</c> command is used to get information about a <c>DbContext</c> type.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextInfoSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextInfoSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextInfoSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextInfoSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextInfoSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextInfoSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextInfoSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextInfoSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextInfo(Configure<EntityFrameworkDbContextInfoSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDbContextInfoSettings()));
    /// <summary><p>The <c>dotnet-ef dbcontext info</c> command is used to get information about a <c>DbContext</c> type.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextInfoSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextInfoSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextInfoSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextInfoSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextInfoSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextInfoSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextInfoSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextInfoSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextInfoSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDbContextInfoSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDbContextInfo(CombinatorialConfigure<EntityFrameworkDbContextInfoSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDbContextInfo, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef dbcontext list</c> command is used to list available <c>DbContext</c> types.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextListSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextListSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextListSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextList(EntityFrameworkDbContextListSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef dbcontext list</c> command is used to list available <c>DbContext</c> types.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextListSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextListSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextListSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextList(Configure<EntityFrameworkDbContextListSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDbContextListSettings()));
    /// <summary><p>The <c>dotnet-ef dbcontext list</c> command is used to list available <c>DbContext</c> types.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextListSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextListSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextListSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDbContextListSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDbContextList(CombinatorialConfigure<EntityFrameworkDbContextListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDbContextList, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef dbcontext scaffold</c> command is used to generate code for a <c>DbContext</c> and entity types for a database. In order for this command to generate an entity type, the database table must have a primary key.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;connection&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Connection"/></li><li><c>&lt;provider&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Provider"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Context"/></li><li><c>--context-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextDirectory"/></li><li><c>--context-namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextNamespace"/></li><li><c>--data-annotations</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/></li><li><c>--force</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/></li><li><c>--no-onconfiguring</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/></li><li><c>--no-pluralize</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Runtime"/></li><li><c>--schema</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.StartupProject"/></li><li><c>--table</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Tables"/></li><li><c>--use-database-names</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextScaffold(EntityFrameworkDbContextScaffoldSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef dbcontext scaffold</c> command is used to generate code for a <c>DbContext</c> and entity types for a database. In order for this command to generate an entity type, the database table must have a primary key.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;connection&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Connection"/></li><li><c>&lt;provider&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Provider"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Context"/></li><li><c>--context-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextDirectory"/></li><li><c>--context-namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextNamespace"/></li><li><c>--data-annotations</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/></li><li><c>--force</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/></li><li><c>--no-onconfiguring</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/></li><li><c>--no-pluralize</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Runtime"/></li><li><c>--schema</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.StartupProject"/></li><li><c>--table</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Tables"/></li><li><c>--use-database-names</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextScaffold(Configure<EntityFrameworkDbContextScaffoldSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDbContextScaffoldSettings()));
    /// <summary><p>The <c>dotnet-ef dbcontext scaffold</c> command is used to generate code for a <c>DbContext</c> and entity types for a database. In order for this command to generate an entity type, the database table must have a primary key.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;connection&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Connection"/></li><li><c>&lt;provider&gt;</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Provider"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Context"/></li><li><c>--context-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextDirectory"/></li><li><c>--context-namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.ContextNamespace"/></li><li><c>--data-annotations</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/></li><li><c>--force</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/></li><li><c>--no-onconfiguring</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/></li><li><c>--no-pluralize</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Runtime"/></li><li><c>--schema</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.StartupProject"/></li><li><c>--table</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Tables"/></li><li><c>--use-database-names</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDbContextScaffoldSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDbContextScaffold(CombinatorialConfigure<EntityFrameworkDbContextScaffoldSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDbContextScaffold, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef dbcontext script</c> command is used to generate a SQL script from the <c>DbContext</c>, bypassing any migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScriptSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkDbContextScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScriptSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextScript(EntityFrameworkDbContextScriptSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef dbcontext script</c> command is used to generate a SQL script from the <c>DbContext</c>, bypassing any migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScriptSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkDbContextScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScriptSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkDbContextScript(Configure<EntityFrameworkDbContextScriptSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkDbContextScriptSettings()));
    /// <summary><p>The <c>dotnet-ef dbcontext script</c> command is used to generate a SQL script from the <c>DbContext</c>, bypassing any migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkDbContextScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkDbContextScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkDbContextScriptSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkDbContextScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkDbContextScriptSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkDbContextScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkDbContextScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkDbContextScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkDbContextScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkDbContextScriptSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkDbContextScriptSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkDbContextScript(CombinatorialConfigure<EntityFrameworkDbContextScriptSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkDbContextScript, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef migrations add</c> command is used to add a new migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="EntityFrameworkMigrationsAddSettings.Name"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsAddSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsAddSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsAddSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsAddSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkMigrationsAddSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoColor"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkMigrationsAddSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsAddSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsAddSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsAddSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsAddSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsAdd(EntityFrameworkMigrationsAddSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef migrations add</c> command is used to add a new migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="EntityFrameworkMigrationsAddSettings.Name"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsAddSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsAddSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsAddSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsAddSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkMigrationsAddSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoColor"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkMigrationsAddSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsAddSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsAddSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsAddSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsAddSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsAdd(Configure<EntityFrameworkMigrationsAddSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkMigrationsAddSettings()));
    /// <summary><p>The <c>dotnet-ef migrations add</c> command is used to add a new migration.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;name&gt;</c> via <see cref="EntityFrameworkMigrationsAddSettings.Name"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsAddSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsAddSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsAddSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsAddSettings.Json"/></li><li><c>--namespace</c> via <see cref="EntityFrameworkMigrationsAddSettings.Namespace"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsAddSettings.NoColor"/></li><li><c>--output-dir</c> via <see cref="EntityFrameworkMigrationsAddSettings.OutputDirectory"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsAddSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsAddSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsAddSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsAddSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkMigrationsAddSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkMigrationsAdd(CombinatorialConfigure<EntityFrameworkMigrationsAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkMigrationsAdd, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef migrations list</c> command is used to list available migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsListSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkMigrationsListSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsListSettings.NoColor"/></li><li><c>--no-connect</c> via <see cref="EntityFrameworkMigrationsListSettings.NoConnect"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsListSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsList(EntityFrameworkMigrationsListSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef migrations list</c> command is used to list available migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsListSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkMigrationsListSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsListSettings.NoColor"/></li><li><c>--no-connect</c> via <see cref="EntityFrameworkMigrationsListSettings.NoConnect"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsListSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsList(Configure<EntityFrameworkMigrationsListSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkMigrationsListSettings()));
    /// <summary><p>The <c>dotnet-ef migrations list</c> command is used to list available migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsListSettings.Configuration"/></li><li><c>--connection</c> via <see cref="EntityFrameworkMigrationsListSettings.Connection"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsListSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsListSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsListSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsListSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsListSettings.NoColor"/></li><li><c>--no-connect</c> via <see cref="EntityFrameworkMigrationsListSettings.NoConnect"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsListSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsListSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsListSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsListSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkMigrationsListSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkMigrationsList(CombinatorialConfigure<EntityFrameworkMigrationsListSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkMigrationsList, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef migrations remove</c> command is used to remove the last migration (rolls back the code changes that were done for the migration).</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsRemove(EntityFrameworkMigrationsRemoveSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef migrations remove</c> command is used to remove the last migration (rolls back the code changes that were done for the migration).</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsRemove(Configure<EntityFrameworkMigrationsRemoveSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkMigrationsRemoveSettings()));
    /// <summary><p>The <c>dotnet-ef migrations remove</c> command is used to remove the last migration (rolls back the code changes that were done for the migration).</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkMigrationsRemoveSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkMigrationsRemove(CombinatorialConfigure<EntityFrameworkMigrationsRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkMigrationsRemove, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef migrations bundle</c> command is used to create a bundle.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Runtime"/></li><li><c>--self-contained</c> via <see cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.StartupProject"/></li><li><c>--target-runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.TargetRuntime"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsBundle(EntityFrameworkMigrationsBundleSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef migrations bundle</c> command is used to create a bundle.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Runtime"/></li><li><c>--self-contained</c> via <see cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.StartupProject"/></li><li><c>--target-runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.TargetRuntime"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsBundle(Configure<EntityFrameworkMigrationsBundleSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkMigrationsBundleSettings()));
    /// <summary><p>The <c>dotnet-ef migrations bundle</c> command is used to create a bundle.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Context"/></li><li><c>--force</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Force"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Framework"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsBundleSettings.NoColor"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Runtime"/></li><li><c>--self-contained</c> via <see cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsBundleSettings.StartupProject"/></li><li><c>--target-runtime</c> via <see cref="EntityFrameworkMigrationsBundleSettings.TargetRuntime"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsBundleSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkMigrationsBundleSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkMigrationsBundle(CombinatorialConfigure<EntityFrameworkMigrationsBundleSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkMigrationsBundle, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The <c>dotnet-ef migrations script</c> command is used to generate a SQL script from migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;from&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.From"/></li><li><c>&lt;to&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.To"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Framework"/></li><li><c>--idempotent</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoColor"/></li><li><c>--no-transactions</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsScript(EntityFrameworkMigrationsScriptSettings options = null) => new EntityFrameworkTasks().Run(options);
    /// <summary><p>The <c>dotnet-ef migrations script</c> command is used to generate a SQL script from migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;from&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.From"/></li><li><c>&lt;to&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.To"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Framework"/></li><li><c>--idempotent</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoColor"/></li><li><c>--no-transactions</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Verbose"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> EntityFrameworkMigrationsScript(Configure<EntityFrameworkMigrationsScriptSettings> configurator) => new EntityFrameworkTasks().Run(configurator.Invoke(new EntityFrameworkMigrationsScriptSettings()));
    /// <summary><p>The <c>dotnet-ef migrations script</c> command is used to generate a SQL script from migrations.</p><p>For more details, visit the <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>&lt;from&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.From"/></li><li><c>&lt;to&gt;</c> via <see cref="EntityFrameworkMigrationsScriptSettings.To"/></li><li><c>--configuration</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Configuration"/></li><li><c>--context</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Context"/></li><li><c>--framework</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Framework"/></li><li><c>--idempotent</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/></li><li><c>--json</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Json"/></li><li><c>--no-build</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/></li><li><c>--no-color</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoColor"/></li><li><c>--no-transactions</c> via <see cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/></li><li><c>--output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Output"/></li><li><c>--prefix-output</c> via <see cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/></li><li><c>--project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Project"/></li><li><c>--runtime</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Runtime"/></li><li><c>--startup-project</c> via <see cref="EntityFrameworkMigrationsScriptSettings.StartupProject"/></li><li><c>--verbose</c> via <see cref="EntityFrameworkMigrationsScriptSettings.Verbose"/></li></ul></remarks>
    public static IEnumerable<(EntityFrameworkMigrationsScriptSettings Settings, IReadOnlyCollection<Output> Output)> EntityFrameworkMigrationsScript(CombinatorialConfigure<EntityFrameworkMigrationsScriptSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(EntityFrameworkMigrationsScript, degreeOfParallelism, completeOnFailure);
}
#region EntityFrameworkDatabaseDropSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDatabaseDrop), Arguments = "database drop")]
public partial class EntityFrameworkDatabaseDropSettings : ToolOptions
{
    /// <summary>Don't confirm.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Show which database would be dropped, but don't drop it.</summary>
    [Argument(Format = "--dry-run")] public bool? DryRun => Get<bool?>(() => DryRun);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDatabaseUpdateSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDatabaseUpdate), Arguments = "database update")]
public partial class EntityFrameworkDatabaseUpdateSettings : ToolOptions
{
    /// <summary>The target migration. Migrations may be identified by name or by ID. The number 0 is a special case that means before the first migration and causes all migrations to be reverted. If no migration is specified, the command defaults to the last migration.</summary>
    [Argument(Format = "{value}", Position = 1)] public string Migration => Get<string>(() => Migration);
    /// <summary>The connection string to the database. Defaults to the one specified in <c>AddDbContext</c> or <c>OnConfiguring</c>. Added in EF Core 5.0.</summary>
    [Argument(Format = "--connection {value}")] public string Connection => Get<string>(() => Connection);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDbContextInfoSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDbContextInfo), Arguments = "dbcontext info")]
public partial class EntityFrameworkDbContextInfoSettings : ToolOptions
{
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDbContextListSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDbContextList), Arguments = "dbcontext list")]
public partial class EntityFrameworkDbContextListSettings : ToolOptions
{
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDbContextScaffoldSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDbContextScaffold), Arguments = "dbcontext scaffold")]
public partial class EntityFrameworkDbContextScaffoldSettings : ToolOptions
{
    /// <summary>The connection string to the database. For ASP.NET Core 2.x projects, the value can be <em>name=&lt;name of connection string&gt;</em>. In that case the name comes from the configuration sources that are set up for the project.</summary>
    [Argument(Format = "{value}", Position = 1)] public string Connection => Get<string>(() => Connection);
    /// <summary>The provider to use. Typically this is the name of the NuGet package, for example: <c>Microsoft.EntityFrameworkCore.SqlServer.</c></summary>
    [Argument(Format = "{value}", Position = 1)] public string Provider => Get<string>(() => Provider);
    /// <summary>Use attributes to configure the model (where possible). If this option is omitted, only the fluent API is used.</summary>
    [Argument(Format = "--data-annotations")] public bool? DataAnnotations => Get<bool?>(() => DataAnnotations);
    /// <summary>The name of the <c>DbContext</c> class to generate.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>The directory to put the <c>DbContext</c> class file in. Paths are relative to the project directory. Namespaces are derived from the folder names.</summary>
    [Argument(Format = "--context-dir {value}")] public string ContextDirectory => Get<string>(() => ContextDirectory);
    /// <summary>The namespace to use for the generated <c>DbContext</c> class. Note: overrides <c>--namespace</c>. Added in EF Core 5.0.</summary>
    [Argument(Format = "--context-namespace {value}")] public string ContextNamespace => Get<string>(() => ContextNamespace);
    /// <summary>Overwrite existing files.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>The directory to put entity class files in. Paths are relative to the project directory.</summary>
    [Argument(Format = "--output-dir {value}")] public string OutputDirectory => Get<string>(() => OutputDirectory);
    /// <summary>The namespace to use for all generated classes. Defaults to generated from the root namespace and the output directory. Added in EF Core 5.0.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The schemas of tables to generate entity types for. To specify multiple schemas, repeat <c>--schema</c> for each one. If this option is omitted, all schemas are included.</summary>
    [Argument(Format = "--schema {value}")] public IReadOnlyList<string> Schemas => Get<List<string>>(() => Schemas);
    /// <summary>The tables to generate entity types for. To specify multiple tables, repeat <c>-t</c> or <c>--table</c> for each one. If this option is omitted, all tables are included.</summary>
    [Argument(Format = "--table {value}")] public IReadOnlyList<string> Tables => Get<List<string>>(() => Tables);
    /// <summary>Use table and column names exactly as they appear in the database. If this option is omitted, database names are changed to more closely conform to C# name style conventions.</summary>
    [Argument(Format = "--use-database-names")] public bool? UseDatabaseNames => Get<bool?>(() => UseDatabaseNames);
    /// <summary>Suppresses generation of the <c>OnConfiguring</c> method in the generated <c>DbContext</c> class. Added in EF Core 5.0.</summary>
    [Argument(Format = "--no-onconfiguring")] public bool? NoOnConfiguring => Get<bool?>(() => NoOnConfiguring);
    /// <summary>Don't use the pluralizer. Added in EF Core 5.0</summary>
    [Argument(Format = "--no-pluralize")] public bool? NoPluralize => Get<bool?>(() => NoPluralize);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDbContextScriptSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkDbContextScript), Arguments = "dbcontext script")]
public partial class EntityFrameworkDbContextScriptSettings : ToolOptions
{
    /// <summary>The file to write the result to.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkMigrationsAddSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkMigrationsAdd), Arguments = "migrations add")]
public partial class EntityFrameworkMigrationsAddSettings : ToolOptions
{
    /// <summary>The name of the migration.</summary>
    [Argument(Format = "{value}", Position = 1)] public string Name => Get<string>(() => Name);
    /// <summary>The directory (and sub-namespace) to use. Paths are relative to the project directory. Defaults to 'Migrations'.</summary>
    [Argument(Format = "--output-dir {value}")] public string OutputDirectory => Get<string>(() => OutputDirectory);
    /// <summary>The namespace to use for all generated classes. Defaults to generated from the root namespace and the output directory. Added in EF Core 5.0.</summary>
    [Argument(Format = "--namespace {value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkMigrationsListSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkMigrationsList), Arguments = "migrations list")]
public partial class EntityFrameworkMigrationsListSettings : ToolOptions
{
    /// <summary>The connection string to the database. Defaults to the one specified in AddDbContext or OnConfiguring. Added in EF Core 5.0.</summary>
    [Argument(Format = "--connection {value}")] public string Connection => Get<string>(() => Connection);
    /// <summary>Don't connect to the database. Added in EF Core 5.0.</summary>
    [Argument(Format = "--no-connect")] public bool? NoConnect => Get<bool?>(() => NoConnect);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkMigrationsRemoveSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkMigrationsRemove), Arguments = "migrations remove")]
public partial class EntityFrameworkMigrationsRemoveSettings : ToolOptions
{
    /// <summary>Revert the migration (roll back the changes that were applied to the database).</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkMigrationsBundleSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkMigrationsBundle), Arguments = "migrations bundle")]
public partial class EntityFrameworkMigrationsBundleSettings : ToolOptions
{
    /// <summary>The path of executable file to create. Paths are relative to the project directory.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Overwrite existing files.</summary>
    [Argument(Format = "--force")] public bool? Force => Get<bool?>(() => Force);
    /// <summary>Create a self-contained executable file. No installed Framework required when this file is executed on the target system.</summary>
    [Argument(Format = "--self-contained")] public bool? SelfContained => Get<bool?>(() => SelfContained);
    /// <summary>The target runtime to bundle for. Example: <c>linux-x64</c></summary>
    [Argument(Format = "--target-runtime {value}")] public string TargetRuntime => Get<string>(() => TargetRuntime);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkMigrationsScriptSettings
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(EntityFrameworkTasks), Command = nameof(EntityFrameworkTasks.EntityFrameworkMigrationsScript), Arguments = "migrations script")]
public partial class EntityFrameworkMigrationsScriptSettings : ToolOptions
{
    /// <summary>The starting migration. Migrations may be identified by name or by ID. The number 0 is a special case that means <em>before the first migration</em>. Defaults to 0.</summary>
    [Argument(Format = "{value}", Position = 1)] public string From => Get<string>(() => From);
    /// <summary>The ending migration. Defaults to the last migration.</summary>
    [Argument(Format = "{value}", Position = 1)] public string To => Get<string>(() => To);
    /// <summary>The file to write the script to.</summary>
    [Argument(Format = "--output {value}")] public string Output => Get<string>(() => Output);
    /// <summary>Generate a script that can be used on a database at any migration.</summary>
    [Argument(Format = "--idempotent")] public bool? Idempotent => Get<bool?>(() => Idempotent);
    /// <summary>Don't generate SQL transaction statements. Added in EF Core 5.0.</summary>
    [Argument(Format = "--no-transactions")] public bool? NoTransactions => Get<bool?>(() => NoTransactions);
    /// <summary>Show JSON output.</summary>
    [Argument(Format = "--json")] public bool? Json => Get<bool?>(() => Json);
    /// <summary>The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required.</summary>
    [Argument(Format = "--context {value}")] public string Context => Get<string>(() => Context);
    /// <summary>Relative path to the project folder of the target project. Default value is the current folder.</summary>
    [Argument(Format = "--project {value}")] public string Project => Get<string>(() => Project);
    /// <summary>Relative path to the project folder of the startup project. Default value is the current folder.</summary>
    [Argument(Format = "--startup-project {value}")] public string StartupProject => Get<string>(() => StartupProject);
    /// <summary>The <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions">Target Framework Moniker</a> for the <a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them.</summary>
    [Argument(Format = "--framework {value}")] public string Framework => Get<string>(() => Framework);
    /// <summary>The build configuration, for example: <c>Debug</c> or <c>Release.</c></summary>
    [Argument(Format = "--configuration {value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog">RID catalog</a>.</summary>
    [Argument(Format = "--runtime {value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>Don't build the project. Intended to be used when the build is up-to-date.</summary>
    [Argument(Format = "--no-build")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>Don't colorize output.</summary>
    [Argument(Format = "--no-color")] public bool? NoColor => Get<bool?>(() => NoColor);
    /// <summary>Prefix output with level.</summary>
    [Argument(Format = "--prefix-output")] public bool? PrefixOutput => Get<bool?>(() => PrefixOutput);
    /// <summary>Show verbose output.</summary>
    [Argument(Format = "--verbose")] public bool? Verbose => Get<bool?>(() => Verbose);
}
#endregion
#region EntityFrameworkDatabaseDropSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDatabaseDropSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Force))]
    public static T ResetForce<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Force))]
    public static T EnableForce<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Force))]
    public static T DisableForce<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region DryRun
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.DryRun"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.DryRun))]
    public static T SetDryRun<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.DryRun, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.DryRun"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.DryRun))]
    public static T ResetDryRun<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.DryRun));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.DryRun"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.DryRun))]
    public static T EnableDryRun<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.DryRun, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.DryRun"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.DryRun))]
    public static T DisableDryRun<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.DryRun, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.DryRun"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.DryRun))]
    public static T ToggleDryRun<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.DryRun, !o.DryRun));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseDropSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseDropSettings), Property = nameof(EntityFrameworkDatabaseDropSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDatabaseDropSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkDatabaseUpdateSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDatabaseUpdateSettingsExtensions
{
    #region Migration
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Migration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Migration))]
    public static T SetMigration<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Migration, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Migration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Migration))]
    public static T ResetMigration<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Migration));
    #endregion
    #region Connection
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Connection))]
    public static T SetConnection<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Connection, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Connection))]
    public static T ResetConnection<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Connection));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDatabaseUpdateSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDatabaseUpdateSettings), Property = nameof(EntityFrameworkDatabaseUpdateSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDatabaseUpdateSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkDbContextInfoSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDbContextInfoSettingsExtensions
{
    #region Json
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDbContextInfoSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextInfoSettings), Property = nameof(EntityFrameworkDbContextInfoSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDbContextInfoSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkDbContextListSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDbContextListSettingsExtensions
{
    #region Json
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDbContextListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextListSettings), Property = nameof(EntityFrameworkDbContextListSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDbContextListSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkDbContextScaffoldSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDbContextScaffoldSettingsExtensions
{
    #region Connection
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Connection))]
    public static T SetConnection<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Connection, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Connection))]
    public static T ResetConnection<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Connection));
    #endregion
    #region Provider
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Provider"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Provider))]
    public static T SetProvider<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Provider, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Provider"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Provider))]
    public static T ResetProvider<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Provider));
    #endregion
    #region DataAnnotations
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.DataAnnotations))]
    public static T SetDataAnnotations<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.DataAnnotations, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.DataAnnotations))]
    public static T ResetDataAnnotations<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.DataAnnotations));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.DataAnnotations))]
    public static T EnableDataAnnotations<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.DataAnnotations, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.DataAnnotations))]
    public static T DisableDataAnnotations<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.DataAnnotations, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.DataAnnotations"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.DataAnnotations))]
    public static T ToggleDataAnnotations<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.DataAnnotations, !o.DataAnnotations));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region ContextDirectory
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.ContextDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.ContextDirectory))]
    public static T SetContextDirectory<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.ContextDirectory, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.ContextDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.ContextDirectory))]
    public static T ResetContextDirectory<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.ContextDirectory));
    #endregion
    #region ContextNamespace
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.ContextNamespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.ContextNamespace))]
    public static T SetContextNamespace<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.ContextNamespace, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.ContextNamespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.ContextNamespace))]
    public static T ResetContextNamespace<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.ContextNamespace));
    #endregion
    #region Force
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Force))]
    public static T ResetForce<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Force))]
    public static T EnableForce<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Force))]
    public static T DisableForce<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region OutputDirectory
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.OutputDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.OutputDirectory))]
    public static T SetOutputDirectory<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.OutputDirectory, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.OutputDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.OutputDirectory))]
    public static T ResetOutputDirectory<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.OutputDirectory));
    #endregion
    #region Namespace
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Schemas
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T SetSchemas<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T SetSchemas<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T AddSchemas<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.AddCollection(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T AddSchemas<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.AddCollection(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T RemoveSchemas<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.RemoveCollection(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T RemoveSchemas<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.RemoveCollection(() => o.Schemas, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Schemas"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Schemas))]
    public static T ClearSchemas<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.ClearCollection(() => o.Schemas));
    #endregion
    #region Tables
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T SetTables<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T SetTables<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T AddTables<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.AddCollection(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T AddTables<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.AddCollection(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T RemoveTables<T>(this T o, params string[] v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.RemoveCollection(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T RemoveTables<T>(this T o, IEnumerable<string> v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.RemoveCollection(() => o.Tables, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Tables"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Tables))]
    public static T ClearTables<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.ClearCollection(() => o.Tables));
    #endregion
    #region UseDatabaseNames
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames))]
    public static T SetUseDatabaseNames<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.UseDatabaseNames, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames))]
    public static T ResetUseDatabaseNames<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.UseDatabaseNames));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames))]
    public static T EnableUseDatabaseNames<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.UseDatabaseNames, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames))]
    public static T DisableUseDatabaseNames<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.UseDatabaseNames, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.UseDatabaseNames))]
    public static T ToggleUseDatabaseNames<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.UseDatabaseNames, !o.UseDatabaseNames));
    #endregion
    #region NoOnConfiguring
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring))]
    public static T SetNoOnConfiguring<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoOnConfiguring, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring))]
    public static T ResetNoOnConfiguring<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.NoOnConfiguring));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring))]
    public static T EnableNoOnConfiguring<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoOnConfiguring, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring))]
    public static T DisableNoOnConfiguring<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoOnConfiguring, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoOnConfiguring))]
    public static T ToggleNoOnConfiguring<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoOnConfiguring, !o.NoOnConfiguring));
    #endregion
    #region NoPluralize
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoPluralize))]
    public static T SetNoPluralize<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoPluralize, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoPluralize))]
    public static T ResetNoPluralize<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.NoPluralize));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoPluralize))]
    public static T EnableNoPluralize<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoPluralize, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoPluralize))]
    public static T DisableNoPluralize<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoPluralize, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoPluralize"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoPluralize))]
    public static T ToggleNoPluralize<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoPluralize, !o.NoPluralize));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScaffoldSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScaffoldSettings), Property = nameof(EntityFrameworkDbContextScaffoldSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDbContextScaffoldSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkDbContextScriptSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkDbContextScriptSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkDbContextScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkDbContextScriptSettings), Property = nameof(EntityFrameworkDbContextScriptSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkDbContextScriptSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkMigrationsAddSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkMigrationsAddSettingsExtensions
{
    #region Name
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Name"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Name"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Name))]
    public static T ResetName<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region OutputDirectory
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.OutputDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.OutputDirectory))]
    public static T SetOutputDirectory<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.OutputDirectory, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.OutputDirectory"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.OutputDirectory))]
    public static T ResetOutputDirectory<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.OutputDirectory));
    #endregion
    #region Namespace
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsAddSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsAddSettings), Property = nameof(EntityFrameworkMigrationsAddSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkMigrationsAddSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkMigrationsListSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkMigrationsListSettingsExtensions
{
    #region Connection
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Connection))]
    public static T SetConnection<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Connection, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Connection"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Connection))]
    public static T ResetConnection<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Connection));
    #endregion
    #region NoConnect
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoConnect"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoConnect))]
    public static T SetNoConnect<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoConnect, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoConnect"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoConnect))]
    public static T ResetNoConnect<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.NoConnect));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoConnect"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoConnect))]
    public static T EnableNoConnect<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoConnect, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoConnect"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoConnect))]
    public static T DisableNoConnect<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoConnect, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoConnect"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoConnect))]
    public static T ToggleNoConnect<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoConnect, !o.NoConnect));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsListSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsListSettings), Property = nameof(EntityFrameworkMigrationsListSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkMigrationsListSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkMigrationsRemoveSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkMigrationsRemoveSettingsExtensions
{
    #region Force
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Force))]
    public static T ResetForce<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Force))]
    public static T EnableForce<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Force))]
    public static T DisableForce<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsRemoveSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsRemoveSettings), Property = nameof(EntityFrameworkMigrationsRemoveSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkMigrationsRemoveSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkMigrationsBundleSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkMigrationsBundleSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Force
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Force))]
    public static T SetForce<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Force, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Force))]
    public static T ResetForce<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Force));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Force))]
    public static T EnableForce<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Force, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Force))]
    public static T DisableForce<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Force, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Force"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Force))]
    public static T ToggleForce<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Force, !o.Force));
    #endregion
    #region SelfContained
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.SelfContained))]
    public static T SetSelfContained<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.SelfContained, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.SelfContained))]
    public static T ResetSelfContained<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.SelfContained));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.SelfContained))]
    public static T EnableSelfContained<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.SelfContained, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.SelfContained))]
    public static T DisableSelfContained<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.SelfContained, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.SelfContained"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.SelfContained))]
    public static T ToggleSelfContained<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.SelfContained, !o.SelfContained));
    #endregion
    #region TargetRuntime
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.TargetRuntime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.TargetRuntime))]
    public static T SetTargetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.TargetRuntime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.TargetRuntime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.TargetRuntime))]
    public static T ResetTargetRuntime<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.TargetRuntime));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsBundleSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsBundleSettings), Property = nameof(EntityFrameworkMigrationsBundleSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkMigrationsBundleSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
#region EntityFrameworkMigrationsScriptSettingsExtensions
/// <summary>Used within <see cref="EntityFrameworkTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class EntityFrameworkMigrationsScriptSettingsExtensions
{
    #region From
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.From"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.From))]
    public static T SetFrom<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.From, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.From"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.From))]
    public static T ResetFrom<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.From));
    #endregion
    #region To
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.To"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.To))]
    public static T SetTo<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.To, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.To"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.To))]
    public static T ResetTo<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.To));
    #endregion
    #region Output
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region Idempotent
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Idempotent))]
    public static T SetIdempotent<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Idempotent, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Idempotent))]
    public static T ResetIdempotent<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Idempotent));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Idempotent))]
    public static T EnableIdempotent<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Idempotent, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Idempotent))]
    public static T DisableIdempotent<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Idempotent, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Idempotent"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Idempotent))]
    public static T ToggleIdempotent<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Idempotent, !o.Idempotent));
    #endregion
    #region NoTransactions
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoTransactions))]
    public static T SetNoTransactions<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoTransactions, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoTransactions))]
    public static T ResetNoTransactions<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.NoTransactions));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoTransactions))]
    public static T EnableNoTransactions<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoTransactions, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoTransactions))]
    public static T DisableNoTransactions<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoTransactions, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoTransactions"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoTransactions))]
    public static T ToggleNoTransactions<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoTransactions, !o.NoTransactions));
    #endregion
    #region Json
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Json))]
    public static T SetJson<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Json, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Json))]
    public static T ResetJson<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Json));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Json))]
    public static T EnableJson<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Json, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Json))]
    public static T DisableJson<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Json, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Json"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Json))]
    public static T ToggleJson<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Json, !o.Json));
    #endregion
    #region Context
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Context))]
    public static T SetContext<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Context, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Context"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Context))]
    public static T ResetContext<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Context));
    #endregion
    #region Project
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Project"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Project))]
    public static T ResetProject<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region StartupProject
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.StartupProject))]
    public static T SetStartupProject<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.StartupProject, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.StartupProject"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.StartupProject))]
    public static T ResetStartupProject<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.StartupProject));
    #endregion
    #region Framework
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Framework))]
    public static T SetFramework<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Framework, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Framework"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Framework))]
    public static T ResetFramework<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Framework));
    #endregion
    #region Configuration
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region Runtime
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NoColor
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoColor))]
    public static T SetNoColor<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoColor, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoColor))]
    public static T ResetNoColor<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.NoColor));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoColor))]
    public static T EnableNoColor<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoColor, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoColor))]
    public static T DisableNoColor<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoColor, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.NoColor"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.NoColor))]
    public static T ToggleNoColor<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.NoColor, !o.NoColor));
    #endregion
    #region PrefixOutput
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.PrefixOutput))]
    public static T SetPrefixOutput<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.PrefixOutput))]
    public static T ResetPrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.PrefixOutput));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.PrefixOutput))]
    public static T EnablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.PrefixOutput))]
    public static T DisablePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.PrefixOutput"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.PrefixOutput))]
    public static T TogglePrefixOutput<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.PrefixOutput, !o.PrefixOutput));
    #endregion
    #region Verbose
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="EntityFrameworkMigrationsScriptSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(EntityFrameworkMigrationsScriptSettings), Property = nameof(EntityFrameworkMigrationsScriptSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : EntityFrameworkMigrationsScriptSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
}
#endregion
