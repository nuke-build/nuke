{
  "$schema": "https://raw.githubusercontent.com/nuke-build/nuke/master/source/Nuke.CodeGeneration/schema.json",
  "references": [
    "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_pwsh"
  ],
  "name": "PowerShellCore",
  "officialUrl": "https://docs.microsoft.com/en-us/powershell/",
  "help": "PowerShell is a cross-platform task automation solution made up of a command-line shell, a scripting language, and a configuration management framework. PowerShell runs on Windows, Linux, and macOS.",
  "pathExecutable": "pwsh",
  "tasks": [
    {
      "settingsClass": {
        "properties": [
          {
            "name": "Version",
            "type": "bool",
            "format": "-Version",
            "help": "Displays the version of PowerShell. Additional parameters are ignored."
          },
          {
            "name": "NoLogo",
            "type": "bool",
            "format": "-NoLogo",
            "help": "Hides the copyright banner at startup of interactive sessions."
          },
          {
            "name": "NoExit",
            "type": "bool",
            "format": "-NoExit",
            "help": "Does not exit after running startup commands."
          },
          {
            "name": "StartUsingASingleThreadedApartment",
            "type": "bool",
            "format": "-STA",
            "help": "Start PowerShell using a single-threaded apartment. This is the default. This switch is only available on the Windows platform."
          },
          {
            "name": "StartUsingAMultiThreadedApartment",
            "type": "bool",
            "format": "-MTA",
            "help": "Start PowerShell using a multi-threaded apartment. This switch is only available on Windows."
          },
          {
            "name": "NoProfile",
            "type": "bool",
            "format": "-NoProfile",
            "help": "Does not load the PowerShell profiles."
          },
          {
            "name": "NonInteractive",
            "type": "bool",
            "format": "-NonInteractive",
            "help": "Does not present an interactive prompt to the user. Any attempts to use interactive features, like <c>Read-Host</c> or confirmation prompts, result in statement-terminating errors."
          },
          {
            "name": "InputFormat",
            "type": "PowerShellFormat",
            "format": "-InputFormat {value}",
            "help": "Describes the format of data sent to PowerShell. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format)."
          },
          {
            "name": "OutputFormat",
            "type": "PowerShellFormat",
            "format": "-OutputFormat {value}",
            "help": "Determines how output from PowerShell is formatted. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format).<para/>Example: <c>pwsh -o XML -c Get-Date</c><para/>When called withing a PowerShell session, you get deserialized objects as output rather plain strings. When called from other shells, the output is string data formatted as CLIXML text."
          },
          {
            "name": "WindowStyle",
            "type": "PowerShellWindowStyle",
            "format": "-WindowStyle {value}",
            "help": "Sets the window style for the session. Valid values are Normal, Minimized, Maximized and Hidden."
          },
          {
            "name": "EncodedCommand",
            "type": "string",
            "format": "-EncodedCommand {value}",
            "help": "Accepts a Base64-encoded string version of a command. Use this parameter to submit commands to PowerShell that require complex, nested quoting. The Base64 representation must be a UTF-16LE encoded string."
          },
          {
            "name": "ConfigurationName",
            "type": "string",
            "format": "-ConfigurationName {value}",
            "help": "Specifies a configuration endpoint in which PowerShell is run. This can be any endpoint registered on the local machine including the default PowerShell remoting endpoints or a custom endpoint having specific user role capabilities."
          },
          {
            "name": "ExecutionPolicy",
            "type": "ExecutionPolicy",
            "format": "-ExecutionPolicy {value}",
            "help": "Sets the default execution policy for the current session and saves it in the <c>$env:PSExecutionPolicyPreference</c> environment variable. This parameter does not change the persistently configured execution policies.<para/>This parameter only applies to Windows computers. The <c>$env:PSExecutionPolicyPreference</c> environment variable does not exist on non-Windows platforms."
          },
          {
            "name": "CustomPipeName",
            "type": "string",
            "format": "-CustomPipeName {value}",
            "help": "Specifies the name to use for an additional IPC server (named pipe) used for debugging and other cross-process communication. This offers a predictable mechanism for connecting to other PowerShell instances. Typically used with the <em>CustomPipeName</em> parameter on <c>Enter-PSHostProcess</c>."
          },
          {
            "name": "SettingsFile",
            "type": "string",
            "format": "-SettingsFile {value}",
            "help": "Overrides the system-wide <c>powershell.config.json</c> settings file for the session. By default, system-wide settings are read from the <c>powershell.config.json</c> in the <c>$PSHOME</c> directory.<para/>Note that these settings are not used by the endpoint specified by the <c>-ConfigurationName</c> argument."
          },
          {
            "name": "WorkingDirectory",
            "type": "string",
            "format": "-WorkingDirectory {value}",
            "help": "Sets the initial working directory by executing at startup. Any valid PowerShell file path is supported."
          },
          {
            "name": "File",
            "type": "string",
            "format": "-File  {value}",
            "help": "If the value of <c>File</c> is <c>-</c>, the command text is read from standard input. Running <c>pwsh -File -</c> without redirected standard input starts a regular session. This is the same as not specifying the <c>File</c> parameter at all.<para/>This is the default parameter if no parameters are present but values are present in the command line. The specified script runs in the local scope (\"dot-sourced\"), so that the functions and variables that the script creates are available in the current session. Enter the script file path and any parameters. File must be the last parameter in the command, because all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters.<para/>Typically, the switch parameters of a script are either included or omitted. For example, the following command uses the All parameter of the Get-Script.ps1 script file: <c>-File .\\Get-Script.ps1 -All</c><para/>In rare cases, you might need to provide a <em>Boolean</em> value for a switch parameter. To provide a <em>Boolean</em> value for a switch parameter in the value of the <em>File</em> parameter, Use the parameter normally followed immediately by a colon and the boolean value, such as the following: <c>-File .\\Get-Script.ps1 -All:$False</c>.<para/>As of PowerShell 7.2, the File parameter only accepts .ps1 files on Windows. If another file type is provided an error is thrown. This behavior is Windows specific. On other platforms, PowerShell attempts to run other file types."
          },
          {
            "name": "FileArguments",
            "type": "List<string>",
            "format": "{value}",
            "help": "Arguments passed in when using the <c>-File</c> option."
          },
          {
            "name": "FileKeyValueParameters",
            "type": "Dictionary<string, string>",
            "format": "-{value}",
            "itemFormat": "{key} {value}",
            "secret": false,
            "help": "Key-value pairs passed in when using the <c>-File</c> option."
          },
          {
            "name": "Command",
            "type": "string",
            "format": "-Command {value}",
            "help": "Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the <c>NoExit</c> parameter is specified.<para/>The value of <em>Command</em> can be <c>-</c>, a script block, or a string. If the value of <em>Command</em> is <c>-</c>, the command text is read from standard input.<para/>The <em>Command</em> parameter only accepts a script block for execution when it can recognize the value passed to <em>Command</em> as a <em>ScriptBlock</em> type. This is only possible when running <c>pwsh</c> from another PowerShell host. The <em>ScriptBlock</em> type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces (<c>{}</c>), before being passed to <c>pwsh</c>."
          }
        ]
      }
    }
  ],
  "enumerations": [
    {
      "name": "PowerShellFormat",
      "values": [
        "Text",
        "Xml"
      ]
    },
    {
      "name": "PowerShellWindowStyle",
      "values": [
        "Normal",
        "Minimized",
        "Maximized",
        "Hidden"
      ]
    },
    {
      "name": "ExecutionPolicy",
      "values": [
        "AllSigned",
        "Bypass",
        "Default",
        "RemoteSigned",
        "Restricted",
        "Undefined",
        "Unrestricted"
      ]
    }
  ]
}