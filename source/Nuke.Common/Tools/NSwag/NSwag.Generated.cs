// Generated from https://github.com/nuke-build/nuke/blob/master/source/Nuke.Common/Tools/NSwag/NSwag.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.NSwag;

/// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[NuGetPackageRequirement(PackageId)]
[NuGetTool(Id = PackageId, Executable = PackageExecutable)]
public partial class NSwagTasks : ToolTasks, IRequireNuGetPackage
{
    public static string NSwagPath => new NSwagTasks().GetToolPath();
    public const string PackageId = "nswag.msbuild";
    public const string PackageExecutable = "dotnet-nswag.dll|NSwag.exe";
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    public static IReadOnlyCollection<Output> NSwag(ArgumentStringHandler arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Action<OutputType, string> logger = null, Func<IProcess, object> exitHandler = null) => new NSwagTasks().Run(arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, logger, exitHandler);
    /// <summary><p>Prints the toolchain version.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IReadOnlyCollection<Output> NSwagVersion(NSwagVersionSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Prints the toolchain version.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IReadOnlyCollection<Output> NSwagVersion(Configure<NSwagVersionSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagVersionSettings()));
    /// <summary><p>Prints the toolchain version.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IEnumerable<(NSwagVersionSettings Settings, IReadOnlyCollection<Output> Output)> NSwagVersion(CombinatorialConfigure<NSwagVersionSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagVersion, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List all types for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagListTypes(NSwagListTypesSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>List all types for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagListTypes(Configure<NSwagListTypesSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagListTypesSettings()));
    /// <summary><p>List all types for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li></ul></remarks>
    public static IEnumerable<(NSwagListTypesSettings Settings, IReadOnlyCollection<Output> Output)> NSwagListTypes(CombinatorialConfigure<NSwagListTypesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagListTypes, degreeOfParallelism, completeOnFailure);
    /// <summary><p>List all controllers classes for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagListWebApiControllers(NSwagListWebApiControllersSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>List all controllers classes for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagListWebApiControllers(Configure<NSwagListWebApiControllersSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagListWebApiControllersSettings()));
    /// <summary><p>List all controllers classes for the given assembly and settings.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li><li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li><li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li></ul></remarks>
    public static IEnumerable<(NSwagListWebApiControllersSettings Settings, IReadOnlyCollection<Output> Output)> NSwagListWebApiControllers(CombinatorialConfigure<NSwagListWebApiControllersSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagListWebApiControllers, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li><li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagTypesToOpenApi(NSwagTypesToOpenApiSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li><li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagTypesToOpenApi(Configure<NSwagTypesToOpenApiSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagTypesToOpenApiSettings()));
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li><li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IEnumerable<(NSwagTypesToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagTypesToOpenApi(CombinatorialConfigure<NSwagTypesToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagTypesToOpenApi, degreeOfParallelism, completeOnFailure);
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li><li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagTypesToSwagger(NSwagTypesToSwaggerSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li><li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagTypesToSwagger(Configure<NSwagTypesToSwaggerSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagTypesToSwaggerSettings()));
    /// <summary><p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li><li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IEnumerable<(NSwagTypesToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagTypesToSwagger(CombinatorialConfigure<NSwagTypesToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagTypesToSwagger, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagWebApiToOpenApi(NSwagWebApiToOpenApiSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagWebApiToOpenApi(Configure<NSwagWebApiToOpenApiSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagWebApiToOpenApiSettings()));
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IEnumerable<(NSwagWebApiToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagWebApiToOpenApi(CombinatorialConfigure<NSwagWebApiToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagWebApiToOpenApi, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li><li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li><li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li><li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagWebApiToSwagger(NSwagWebApiToSwaggerSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li><li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li><li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li><li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagWebApiToSwagger(Configure<NSwagWebApiToSwaggerSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagWebApiToSwaggerSettings()));
    /// <summary><p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li><li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li><li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li><li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li><li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li><li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li></ul></remarks>
    public static IEnumerable<(NSwagWebApiToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagWebApiToSwagger(CombinatorialConfigure<NSwagWebApiToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagWebApiToSwagger, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagAspNetCoreToOpenApi(NSwagAspNetCoreToOpenApiSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagAspNetCoreToOpenApi(Configure<NSwagAspNetCoreToOpenApiSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagAspNetCoreToOpenApiSettings()));
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li></ul></remarks>
    public static IEnumerable<(NSwagAspNetCoreToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagAspNetCoreToOpenApi(CombinatorialConfigure<NSwagAspNetCoreToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagAspNetCoreToOpenApi, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li><li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li><li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li><li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li><li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li><li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li><li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li><li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li><li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li><li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagAspNetCoreToSwagger(NSwagAspNetCoreToSwaggerSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li><li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li><li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li><li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li><li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li><li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li><li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li><li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li><li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li><li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagAspNetCoreToSwagger(Configure<NSwagAspNetCoreToSwaggerSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagAspNetCoreToSwaggerSettings()));
    /// <summary><p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li><li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li><li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li><li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li><li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li><li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li><li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li><li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li><li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li><li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li><li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li><li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li><li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li><li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li><li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li><li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li><li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li><li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li><li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li><li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li><li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li><li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li><li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li><li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li><li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li><li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li><li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li><li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li><li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li><li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li><li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li><li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li><li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li><li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li><li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li><li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li><li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li><li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li><li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li><li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li><li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li><li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li><li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li><li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li><li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li><li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li></ul></remarks>
    public static IEnumerable<(NSwagAspNetCoreToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagAspNetCoreToSwagger(CombinatorialConfigure<NSwagAspNetCoreToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagAspNetCoreToSwagger, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Creates a new nswag.json file in the current directory.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IReadOnlyCollection<Output> NSwagCreateDocument(NSwagCreateDocumentSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Creates a new nswag.json file in the current directory.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IReadOnlyCollection<Output> NSwagCreateDocument(Configure<NSwagCreateDocumentSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagCreateDocumentSettings()));
    /// <summary><p>Creates a new nswag.json file in the current directory.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p></remarks>
    public static IEnumerable<(NSwagCreateDocumentSettings Settings, IReadOnlyCollection<Output> Output)> NSwagCreateDocument(CombinatorialConfigure<NSwagCreateDocumentSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagCreateDocument, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li><li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagExecuteDocument(NSwagExecuteDocumentSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li><li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagExecuteDocument(Configure<NSwagExecuteDocumentSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagExecuteDocumentSettings()));
    /// <summary><p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li><li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li></ul></remarks>
    public static IEnumerable<(NSwagExecuteDocumentSettings Settings, IReadOnlyCollection<Output> Output)> NSwagExecuteDocument(CombinatorialConfigure<NSwagExecuteDocumentSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagExecuteDocument, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates CSharp classes from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li><li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li><li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagJsonSchemaToCSharp(NSwagJsonSchemaToCSharpSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates CSharp classes from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li><li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li><li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagJsonSchemaToCSharp(Configure<NSwagJsonSchemaToCSharpSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagJsonSchemaToCSharpSettings()));
    /// <summary><p>Generates CSharp classes from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li><li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li><li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li></ul></remarks>
    public static IEnumerable<(NSwagJsonSchemaToCSharpSettings Settings, IReadOnlyCollection<Output> Output)> NSwagJsonSchemaToCSharp(CombinatorialConfigure<NSwagJsonSchemaToCSharpSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagJsonSchemaToCSharp, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates TypeScript interfaces from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagJsonSchemaToTypeScript(NSwagJsonSchemaToTypeScriptSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates TypeScript interfaces from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagJsonSchemaToTypeScript(Configure<NSwagJsonSchemaToTypeScriptSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagJsonSchemaToTypeScriptSettings()));
    /// <summary><p>Generates TypeScript interfaces from a JSON Schema.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li><li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li><li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li><li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li></ul></remarks>
    public static IEnumerable<(NSwagJsonSchemaToTypeScriptSettings Settings, IReadOnlyCollection<Output> Output)> NSwagJsonSchemaToTypeScript(CombinatorialConfigure<NSwagJsonSchemaToTypeScriptSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagJsonSchemaToTypeScript, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpClient(NSwagOpenApiToCSharpClientSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpClient(Configure<NSwagOpenApiToCSharpClientSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagOpenApiToCSharpClientSettings()));
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IEnumerable<(NSwagOpenApiToCSharpClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToCSharpClient(CombinatorialConfigure<NSwagOpenApiToCSharpClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagOpenApiToCSharpClient, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li><li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li><li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li><li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li><li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li><li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li><li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li><li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li><li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li><li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li><li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li><li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li><li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpClient(NSwagSwaggerToCSharpClientSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li><li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li><li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li><li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li><li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li><li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li><li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li><li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li><li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li><li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li><li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li><li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li><li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpClient(Configure<NSwagSwaggerToCSharpClientSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagSwaggerToCSharpClientSettings()));
    /// <summary><p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li><li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li><li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li><li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li><li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li><li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li><li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li><li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li><li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li><li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li><li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li><li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li><li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li><li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li><li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li><li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li><li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li><li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li></ul></remarks>
    public static IEnumerable<(NSwagSwaggerToCSharpClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToCSharpClient(CombinatorialConfigure<NSwagSwaggerToCSharpClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagSwaggerToCSharpClient, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpController(NSwagOpenApiToCSharpControllerSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpController(Configure<NSwagOpenApiToCSharpControllerSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagOpenApiToCSharpControllerSettings()));
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li><li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li><li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IEnumerable<(NSwagOpenApiToCSharpControllerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToCSharpController(CombinatorialConfigure<NSwagOpenApiToCSharpControllerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagOpenApiToCSharpController, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li><li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li><li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li><li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li><li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li><li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpController(NSwagSwaggerToCSharpControllerSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li><li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li><li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li><li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li><li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li><li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpController(Configure<NSwagSwaggerToCSharpControllerSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagSwaggerToCSharpControllerSettings()));
    /// <summary><p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li><li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li><li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li><li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li><li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li><li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li><li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li><li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li><li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li><li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li><li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li><li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li><li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li><li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li><li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li><li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li><li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li><li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li><li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li><li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li><li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li><li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li><li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li><li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li><li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li><li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li><li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li><li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li><li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li><li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li><li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li><li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li><li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li><li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li><li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li><li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li></ul></remarks>
    public static IEnumerable<(NSwagSwaggerToCSharpControllerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToCSharpController(CombinatorialConfigure<NSwagSwaggerToCSharpControllerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagSwaggerToCSharpController, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToTypeScriptClient(NSwagOpenApiToTypeScriptClientSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagOpenApiToTypeScriptClient(Configure<NSwagOpenApiToTypeScriptClientSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagOpenApiToTypeScriptClientSettings()));
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li><li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li></ul></remarks>
    public static IEnumerable<(NSwagOpenApiToTypeScriptClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToTypeScriptClient(CombinatorialConfigure<NSwagOpenApiToTypeScriptClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagOpenApiToTypeScriptClient, degreeOfParallelism, completeOnFailure);
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li><li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li><li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li><li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li><li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li><li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li><li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li><li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li><li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li><li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li><li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li><li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li><li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li><li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li><li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li><li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li><li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li><li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li><li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li><li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li><li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToTypeScriptClient(NSwagSwaggerToTypeScriptClientSettings options = null) => new NSwagTasks().Run(options);
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li><li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li><li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li><li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li><li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li><li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li><li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li><li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li><li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li><li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li><li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li><li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li><li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li><li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li><li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li><li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li><li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li><li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li><li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li><li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li><li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li></ul></remarks>
    public static IReadOnlyCollection<Output> NSwagSwaggerToTypeScriptClient(Configure<NSwagSwaggerToTypeScriptClientSettings> configurator) => new NSwagTasks().Run(configurator.Invoke(new NSwagSwaggerToTypeScriptClientSettings()));
    /// <summary><p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p><p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p></summary>
    /// <remarks><p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p><ul><li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li><li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li><li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li><li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li><li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li><li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li><li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li><li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li><li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li><li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li><li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li><li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li><li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li><li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li><li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li><li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li><li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li><li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li><li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li><li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li><li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li><li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li><li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li><li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li><li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li><li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li><li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li><li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li><li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li><li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li><li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li><li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li><li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li><li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li><li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li><li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li><li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li><li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li><li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li><li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li><li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li><li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li><li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li><li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li><li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li><li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li><li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li><li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li><li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li><li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li><li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li><li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li><li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li><li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li><li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li></ul></remarks>
    public static IEnumerable<(NSwagSwaggerToTypeScriptClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToTypeScriptClient(CombinatorialConfigure<NSwagSwaggerToTypeScriptClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false) => configurator.Invoke(NSwagSwaggerToTypeScriptClient, degreeOfParallelism, completeOnFailure);
}
#region NSwagVersionSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagVersion), Arguments = "version")]
public partial class NSwagVersionSettings : ToolOptions, IToolOptionsWithFramework
{
}
#endregion
#region NSwagListTypesSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagListTypes), Arguments = "list-types")]
public partial class NSwagListTypesSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The nswag.json configuration file path.</summary>
    [Argument(Format = "/File:{value}")] public string File => Get<string>(() => File);
    /// <summary></summary>
    [Argument(Format = "/Variables:{key}={value}")] public IReadOnlyDictionary<string, object> Variables => Get<Dictionary<string, object>>(() => Variables);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagListWebApiControllersSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagListWebApiControllers), Arguments = "list-controllers")]
public partial class NSwagListWebApiControllersSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The nswag.json configuration file path.</summary>
    [Argument(Format = "/File:{value}")] public string File => Get<string>(() => File);
    /// <summary></summary>
    [Argument(Format = "/Variables:{key}={value}")] public IReadOnlyDictionary<string, object> Variables => Get<Dictionary<string, object>>(() => Variables);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagTypesToOpenApiSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagTypesToOpenApi), Arguments = "types2openapi")]
public partial class NSwagTypesToOpenApiSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagTypesToSwaggerSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagTypesToSwagger), Arguments = "types2swagger")]
public partial class NSwagTypesToSwaggerSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</summary>
    [Argument(Format = "/AllowReferencesWithProperties:{value}")] public bool? AllowReferencesWithProperties => Get<bool?>(() => AllowReferencesWithProperties);
    /// <summary>The class names.</summary>
    [Argument(Format = "/ClassNames:{value}")] public IReadOnlyList<string> ClassNames => Get<List<string>>(() => ClassNames);
    /// <summary>The default reference type null handling of dictionary value types (NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultDictionaryValueReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultDictionaryValueReferenceTypeNullHandling);
    /// <summary>The default enum handling ('String' or 'Integer'), default: Integer.</summary>
    [Argument(Format = "/DefaultEnumHandling:{value}")] public EnumHandling DefaultEnumHandling => Get<EnumHandling>(() => DefaultEnumHandling);
    /// <summary>The default property name handling ('Default' or 'CamelCase').</summary>
    [Argument(Format = "/DefaultPropertyNameHandling:{value}")] public PropertyNameHandling DefaultPropertyNameHandling => Get<PropertyNameHandling>(() => DefaultPropertyNameHandling);
    /// <summary>The default reference type null handling (Null (default) or NotNull).</summary>
    [Argument(Format = "/DefaultReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultReferenceTypeNullHandling);
    /// <summary>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</summary>
    [Argument(Format = "/FlattenInheritanceHierarchy:{value}")] public bool? FlattenInheritanceHierarchy => Get<bool?>(() => FlattenInheritanceHierarchy);
    /// <summary>Generate schemas for types in KnownTypeAttribute attributes (default: true).</summary>
    [Argument(Format = "/GenerateKnownTypes:{value}")] public bool? GenerateKnownTypes => Get<bool?>(() => GenerateKnownTypes);
    /// <summary>Generate xmlObject representation for definitions (default: false).</summary>
    [Argument(Format = "/GenerateXmlObjects:{value}")] public bool? GenerateXmlObjects => Get<bool?>(() => GenerateXmlObjects);
    /// <summary>Ignore properties with the ObsoleteAttribute (default: false).</summary>
    [Argument(Format = "/IgnoreObsoleteProperties:{value}")] public bool? IgnoreObsoleteProperties => Get<bool?>(() => IgnoreObsoleteProperties);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagWebApiToOpenApiSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagWebApiToOpenApi), Arguments = "webapi2openapi")]
public partial class NSwagWebApiToOpenApiSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</summary>
    [Argument(Format = "/AllowNullableBodyParameters:{value}")] public bool? AllowNullableBodyParameters => Get<bool?>(() => AllowNullableBodyParameters);
    /// <summary>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</summary>
    [Argument(Format = "/AllowReferencesWithProperties:{value}")] public bool? AllowReferencesWithProperties => Get<bool?>(() => AllowReferencesWithProperties);
    /// <summary>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</summary>
    [Argument(Format = "/AspNetCoreEnvironment:{value}")] public string AspNetCoreEnvironment => Get<string>(() => AspNetCoreEnvironment);
    /// <summary>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/ContractResolver:{value}")] public string ContractResolver => Get<string>(() => ContractResolver);
    /// <summary>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</summary>
    [Argument(Format = "/CreateWebHostBuilderMethod:{value}")] public string CreateWebHostBuilderMethod => Get<string>(() => CreateWebHostBuilderMethod);
    /// <summary>The default reference type null handling of dictionary value types (NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultDictionaryValueReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultDictionaryValueReferenceTypeNullHandling);
    /// <summary>The default enum handling ('String' or 'Integer'), default: Integer.</summary>
    [Argument(Format = "/DefaultEnumHandling:{value}")] public EnumHandling DefaultEnumHandling => Get<EnumHandling>(() => DefaultEnumHandling);
    /// <summary>The default property name handling ('Default' or 'CamelCase').</summary>
    [Argument(Format = "/DefaultPropertyNameHandling:{value}")] public PropertyNameHandling DefaultPropertyNameHandling => Get<PropertyNameHandling>(() => DefaultPropertyNameHandling);
    /// <summary>The default reference type null handling (Null (default) or NotNull).</summary>
    [Argument(Format = "/DefaultReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultReferenceTypeNullHandling);
    /// <summary>The default response reference type null handling (default: NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultResponseReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultResponseReferenceTypeNullHandling);
    /// <summary>The document name to use in SwaggerDocumentProvider (default: v1).</summary>
    [Argument(Format = "/DocumentName:{value}")] public string DocumentName => Get<string>(() => DocumentName);
    /// <summary>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/DocumentProcessors:{value}")] public IReadOnlyList<string> DocumentProcessors => Get<List<string>>(() => DocumentProcessors);
    /// <summary>Specifies the Swagger document template (may be a path or JSON, default: none).</summary>
    [Argument(Format = "/DocumentTemplate:{value}")] public string DocumentTemplate => Get<string>(() => DocumentTemplate);
    /// <summary>The excluded type names (same as JsonSchemaIgnoreAttribute).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</summary>
    [Argument(Format = "/FlattenInheritanceHierarchy:{value}")] public bool? FlattenInheritanceHierarchy => Get<bool?>(() => FlattenInheritanceHierarchy);
    /// <summary>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</summary>
    [Argument(Format = "/GenerateAbstractProperties:{value}")] public bool? GenerateAbstractProperties => Get<bool?>(() => GenerateAbstractProperties);
    /// <summary>Generate the x-abstract flag on schemas (default: true).</summary>
    [Argument(Format = "/GenerateAbstractSchemas:{value}")] public bool? GenerateAbstractSchemas => Get<bool?>(() => GenerateAbstractSchemas);
    /// <summary>Generate a description with number to enum name mappings (for integer enums only, default: false).</summary>
    [Argument(Format = "/GenerateEnumMappingDescription:{value}")] public bool? GenerateEnumMappingDescription => Get<bool?>(() => GenerateEnumMappingDescription);
    /// <summary>Generate schemas for types in KnownTypeAttribute attributes (default: true).</summary>
    [Argument(Format = "/GenerateKnownTypes:{value}")] public bool? GenerateKnownTypes => Get<bool?>(() => GenerateKnownTypes);
    /// <summary>Generate xmlObject representation for definitions (default: false).</summary>
    [Argument(Format = "/GenerateXmlObjects:{value}")] public bool? GenerateXmlObjects => Get<bool?>(() => GenerateXmlObjects);
    /// <summary>Ignore properties with the ObsoleteAttribute (default: false).</summary>
    [Argument(Format = "/IgnoreObsoleteProperties:{value}")] public bool? IgnoreObsoleteProperties => Get<bool?>(() => IgnoreObsoleteProperties);
    /// <summary>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoDescription:{value}")] public string InfoDescription => Get<string>(() => InfoDescription);
    /// <summary>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoTitle:{value}")] public string InfoTitle => Get<string>(() => InfoTitle);
    /// <summary>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoVersion:{value}")] public string InfoVersion => Get<string>(() => InfoVersion);
    /// <summary>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/OperationProcessors:{value}")] public IReadOnlyList<string> OperationProcessors => Get<List<string>>(() => OperationProcessors);
    /// <summary>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SchemaNameGenerator:{value}")] public string SchemaNameGenerator => Get<string>(() => SchemaNameGenerator);
    /// <summary>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SerializerSettings:{value}")] public string SerializerSettings => Get<string>(() => SerializerSettings);
    /// <summary>The basePath of the Swagger specification (optional).</summary>
    [Argument(Format = "/ServiceBasePath:{value}")] public string ServiceBasePath => Get<string>(() => ServiceBasePath);
    /// <summary>Overrides the service host of the web service (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</summary>
    [Argument(Format = "/Startup:{value}")] public string Startup => Get<string>(() => Startup);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</summary>
    [Argument(Format = "/UseDocumentProvider:{value}")] public bool? UseDocumentProvider => Get<bool?>(() => UseDocumentProvider);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagWebApiToSwaggerSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagWebApiToSwagger), Arguments = "webapi2swagger")]
public partial class NSwagWebApiToSwaggerSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>Specifies whether to add path parameters which are missing in the action method (default: true).</summary>
    [Argument(Format = "/AddMissingPathParameters:{value}")] public bool? AddMissingPathParameters => Get<bool?>(() => AddMissingPathParameters);
    /// <summary>Specifies whether the controllers are hosted by ASP.NET Core.</summary>
    [Argument(Format = "/AspNetCore:{value}")] public bool? AspNetCore => Get<bool?>(() => AspNetCore);
    /// <summary>The Web API controller full class name or empty to load all controllers from the assembly.</summary>
    [Argument(Format = "/Controller:{value}")] public string Controller => Get<string>(() => Controller);
    /// <summary>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</summary>
    [Argument(Format = "/Controllers:{value}")] public IReadOnlyList<string> Controllers => Get<List<string>>(() => Controllers);
    /// <summary>The Web API default URL template (default for Web API: 'api/{controller}/{id}'; for MVC projects: '{controller}/{action}/{id?}').</summary>
    [Argument(Format = "/DefaultUrlTemplate:{value}")] public string DefaultUrlTemplate => Get<string>(() => DefaultUrlTemplate);
    /// <summary>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</summary>
    [Argument(Format = "/IncludedVersions:{value}")] public IReadOnlyList<string> IncludedVersions => Get<List<string>>(() => IncludedVersions);
    /// <summary>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</summary>
    [Argument(Format = "/ResolveJsonOptions:{value}")] public bool? ResolveJsonOptions => Get<bool?>(() => ResolveJsonOptions);
    /// <summary>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</summary>
    [Argument(Format = "/AllowNullableBodyParameters:{value}")] public bool? AllowNullableBodyParameters => Get<bool?>(() => AllowNullableBodyParameters);
    /// <summary>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</summary>
    [Argument(Format = "/AllowReferencesWithProperties:{value}")] public bool? AllowReferencesWithProperties => Get<bool?>(() => AllowReferencesWithProperties);
    /// <summary>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</summary>
    [Argument(Format = "/AspNetCoreEnvironment:{value}")] public string AspNetCoreEnvironment => Get<string>(() => AspNetCoreEnvironment);
    /// <summary>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/ContractResolver:{value}")] public string ContractResolver => Get<string>(() => ContractResolver);
    /// <summary>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</summary>
    [Argument(Format = "/CreateWebHostBuilderMethod:{value}")] public string CreateWebHostBuilderMethod => Get<string>(() => CreateWebHostBuilderMethod);
    /// <summary>The default reference type null handling of dictionary value types (NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultDictionaryValueReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultDictionaryValueReferenceTypeNullHandling);
    /// <summary>The default enum handling ('String' or 'Integer'), default: Integer.</summary>
    [Argument(Format = "/DefaultEnumHandling:{value}")] public EnumHandling DefaultEnumHandling => Get<EnumHandling>(() => DefaultEnumHandling);
    /// <summary>The default property name handling ('Default' or 'CamelCase').</summary>
    [Argument(Format = "/DefaultPropertyNameHandling:{value}")] public PropertyNameHandling DefaultPropertyNameHandling => Get<PropertyNameHandling>(() => DefaultPropertyNameHandling);
    /// <summary>The default reference type null handling (Null (default) or NotNull).</summary>
    [Argument(Format = "/DefaultReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultReferenceTypeNullHandling);
    /// <summary>The default response reference type null handling (default: NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultResponseReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultResponseReferenceTypeNullHandling);
    /// <summary>The document name to use in SwaggerDocumentProvider (default: v1).</summary>
    [Argument(Format = "/DocumentName:{value}")] public string DocumentName => Get<string>(() => DocumentName);
    /// <summary>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/DocumentProcessors:{value}")] public IReadOnlyList<string> DocumentProcessors => Get<List<string>>(() => DocumentProcessors);
    /// <summary>Specifies the Swagger document template (may be a path or JSON, default: none).</summary>
    [Argument(Format = "/DocumentTemplate:{value}")] public string DocumentTemplate => Get<string>(() => DocumentTemplate);
    /// <summary>The excluded type names (same as JsonSchemaIgnoreAttribute).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</summary>
    [Argument(Format = "/FlattenInheritanceHierarchy:{value}")] public bool? FlattenInheritanceHierarchy => Get<bool?>(() => FlattenInheritanceHierarchy);
    /// <summary>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</summary>
    [Argument(Format = "/GenerateAbstractProperties:{value}")] public bool? GenerateAbstractProperties => Get<bool?>(() => GenerateAbstractProperties);
    /// <summary>Generate the x-abstract flag on schemas (default: true).</summary>
    [Argument(Format = "/GenerateAbstractSchemas:{value}")] public bool? GenerateAbstractSchemas => Get<bool?>(() => GenerateAbstractSchemas);
    /// <summary>Generate a description with number to enum name mappings (for integer enums only, default: false).</summary>
    [Argument(Format = "/GenerateEnumMappingDescription:{value}")] public bool? GenerateEnumMappingDescription => Get<bool?>(() => GenerateEnumMappingDescription);
    /// <summary>Generate schemas for types in KnownTypeAttribute attributes (default: true).</summary>
    [Argument(Format = "/GenerateKnownTypes:{value}")] public bool? GenerateKnownTypes => Get<bool?>(() => GenerateKnownTypes);
    /// <summary>Generate xmlObject representation for definitions (default: false).</summary>
    [Argument(Format = "/GenerateXmlObjects:{value}")] public bool? GenerateXmlObjects => Get<bool?>(() => GenerateXmlObjects);
    /// <summary>Ignore properties with the ObsoleteAttribute (default: false).</summary>
    [Argument(Format = "/IgnoreObsoleteProperties:{value}")] public bool? IgnoreObsoleteProperties => Get<bool?>(() => IgnoreObsoleteProperties);
    /// <summary>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoDescription:{value}")] public string InfoDescription => Get<string>(() => InfoDescription);
    /// <summary>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoTitle:{value}")] public string InfoTitle => Get<string>(() => InfoTitle);
    /// <summary>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoVersion:{value}")] public string InfoVersion => Get<string>(() => InfoVersion);
    /// <summary>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/OperationProcessors:{value}")] public IReadOnlyList<string> OperationProcessors => Get<List<string>>(() => OperationProcessors);
    /// <summary>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SchemaNameGenerator:{value}")] public string SchemaNameGenerator => Get<string>(() => SchemaNameGenerator);
    /// <summary>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SerializerSettings:{value}")] public string SerializerSettings => Get<string>(() => SerializerSettings);
    /// <summary>The basePath of the Swagger specification (optional).</summary>
    [Argument(Format = "/ServiceBasePath:{value}")] public string ServiceBasePath => Get<string>(() => ServiceBasePath);
    /// <summary>Overrides the service host of the web service (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</summary>
    [Argument(Format = "/Startup:{value}")] public string Startup => Get<string>(() => Startup);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</summary>
    [Argument(Format = "/UseDocumentProvider:{value}")] public bool? UseDocumentProvider => Get<bool?>(() => UseDocumentProvider);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagAspNetCoreToOpenApiSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagAspNetCoreToOpenApi), Arguments = "aspnetcore2openapi")]
public partial class NSwagAspNetCoreToOpenApiSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</summary>
    [Argument(Format = "/AllowNullableBodyParameters:{value}")] public bool? AllowNullableBodyParameters => Get<bool?>(() => AllowNullableBodyParameters);
    /// <summary>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</summary>
    [Argument(Format = "/AllowReferencesWithProperties:{value}")] public bool? AllowReferencesWithProperties => Get<bool?>(() => AllowReferencesWithProperties);
    /// <summary>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</summary>
    [Argument(Format = "/AspNetCoreEnvironment:{value}")] public string AspNetCoreEnvironment => Get<string>(() => AspNetCoreEnvironment);
    /// <summary>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/ContractResolver:{value}")] public string ContractResolver => Get<string>(() => ContractResolver);
    /// <summary>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</summary>
    [Argument(Format = "/CreateWebHostBuilderMethod:{value}")] public string CreateWebHostBuilderMethod => Get<string>(() => CreateWebHostBuilderMethod);
    /// <summary>The default reference type null handling of dictionary value types (NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultDictionaryValueReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultDictionaryValueReferenceTypeNullHandling);
    /// <summary>The default enum handling ('String' or 'Integer'), default: Integer.</summary>
    [Argument(Format = "/DefaultEnumHandling:{value}")] public EnumHandling DefaultEnumHandling => Get<EnumHandling>(() => DefaultEnumHandling);
    /// <summary>The default property name handling ('Default' or 'CamelCase').</summary>
    [Argument(Format = "/DefaultPropertyNameHandling:{value}")] public PropertyNameHandling DefaultPropertyNameHandling => Get<PropertyNameHandling>(() => DefaultPropertyNameHandling);
    /// <summary>The default reference type null handling (Null (default) or NotNull).</summary>
    [Argument(Format = "/DefaultReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultReferenceTypeNullHandling);
    /// <summary>The default response reference type null handling (default: NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultResponseReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultResponseReferenceTypeNullHandling);
    /// <summary>The document name to use in SwaggerDocumentProvider (default: v1).</summary>
    [Argument(Format = "/DocumentName:{value}")] public string DocumentName => Get<string>(() => DocumentName);
    /// <summary>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/DocumentProcessors:{value}")] public IReadOnlyList<string> DocumentProcessors => Get<List<string>>(() => DocumentProcessors);
    /// <summary>Specifies the Swagger document template (may be a path or JSON, default: none).</summary>
    [Argument(Format = "/DocumentTemplate:{value}")] public string DocumentTemplate => Get<string>(() => DocumentTemplate);
    /// <summary>The excluded type names (same as JsonSchemaIgnoreAttribute).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</summary>
    [Argument(Format = "/FlattenInheritanceHierarchy:{value}")] public bool? FlattenInheritanceHierarchy => Get<bool?>(() => FlattenInheritanceHierarchy);
    /// <summary>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</summary>
    [Argument(Format = "/GenerateAbstractProperties:{value}")] public bool? GenerateAbstractProperties => Get<bool?>(() => GenerateAbstractProperties);
    /// <summary>Generate the x-abstract flag on schemas (default: true).</summary>
    [Argument(Format = "/GenerateAbstractSchemas:{value}")] public bool? GenerateAbstractSchemas => Get<bool?>(() => GenerateAbstractSchemas);
    /// <summary>Generate a description with number to enum name mappings (for integer enums only, default: false).</summary>
    [Argument(Format = "/GenerateEnumMappingDescription:{value}")] public bool? GenerateEnumMappingDescription => Get<bool?>(() => GenerateEnumMappingDescription);
    /// <summary>Generate schemas for types in KnownTypeAttribute attributes (default: true).</summary>
    [Argument(Format = "/GenerateKnownTypes:{value}")] public bool? GenerateKnownTypes => Get<bool?>(() => GenerateKnownTypes);
    /// <summary>Generate xmlObject representation for definitions (default: false).</summary>
    [Argument(Format = "/GenerateXmlObjects:{value}")] public bool? GenerateXmlObjects => Get<bool?>(() => GenerateXmlObjects);
    /// <summary>Ignore properties with the ObsoleteAttribute (default: false).</summary>
    [Argument(Format = "/IgnoreObsoleteProperties:{value}")] public bool? IgnoreObsoleteProperties => Get<bool?>(() => IgnoreObsoleteProperties);
    /// <summary>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoDescription:{value}")] public string InfoDescription => Get<string>(() => InfoDescription);
    /// <summary>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoTitle:{value}")] public string InfoTitle => Get<string>(() => InfoTitle);
    /// <summary>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoVersion:{value}")] public string InfoVersion => Get<string>(() => InfoVersion);
    /// <summary>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/OperationProcessors:{value}")] public IReadOnlyList<string> OperationProcessors => Get<List<string>>(() => OperationProcessors);
    /// <summary>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SchemaNameGenerator:{value}")] public string SchemaNameGenerator => Get<string>(() => SchemaNameGenerator);
    /// <summary>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SerializerSettings:{value}")] public string SerializerSettings => Get<string>(() => SerializerSettings);
    /// <summary>The basePath of the Swagger specification (optional).</summary>
    [Argument(Format = "/ServiceBasePath:{value}")] public string ServiceBasePath => Get<string>(() => ServiceBasePath);
    /// <summary>Overrides the service host of the web service (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</summary>
    [Argument(Format = "/Startup:{value}")] public string Startup => Get<string>(() => Startup);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</summary>
    [Argument(Format = "/UseDocumentProvider:{value}")] public bool? UseDocumentProvider => Get<bool?>(() => UseDocumentProvider);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagAspNetCoreToSwaggerSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagAspNetCoreToSwagger), Arguments = "aspnetcore2swagger")]
public partial class NSwagAspNetCoreToSwaggerSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</summary>
    [Argument(Format = "/ApiGroupNames:{value}")] public IReadOnlyList<string> ApiGroupNames => Get<List<string>>(() => ApiGroupNames);
    /// <summary>The configuration to use.</summary>
    [Argument(Format = "/Configuration:{value}")] public string Configuration => Get<string>(() => Configuration);
    /// <summary>The MSBuild project extensions path. Defaults to "obj".</summary>
    [Argument(Format = "/MSBuildProjectExtensionsPath:{value}")] public string MSBuildProjectExtensionsPath => Get<string>(() => MSBuildProjectExtensionsPath);
    /// <summary>Don't build the project. Only use this when the build is up-to-date.</summary>
    [Argument(Format = "/NoBuild:{value}")] public bool? NoBuild => Get<bool?>(() => NoBuild);
    /// <summary>The working directory to use.</summary>
    [Argument(Format = "/WorkingDirectory:{value}")] public string NSwagWorkingDirectory => Get<string>(() => NSwagWorkingDirectory);
    /// <summary>The project to use.</summary>
    [Argument(Format = "/Project:{value}")] public string Project => Get<string>(() => Project);
    /// <summary>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</summary>
    [Argument(Format = "/RequireParametersWithoutDefault:{value}")] public bool? RequireParametersWithoutDefault => Get<bool?>(() => RequireParametersWithoutDefault);
    /// <summary>The runtime to use.</summary>
    [Argument(Format = "/Runtime:{value}")] public string Runtime => Get<string>(() => Runtime);
    /// <summary>The target framework to use.</summary>
    [Argument(Format = "/TargetFramework:{value}")] public string TargetFramework => Get<string>(() => TargetFramework);
    /// <summary>Print verbose output.</summary>
    [Argument(Format = "/Verbose:{value}")] public bool? Verbose => Get<bool?>(() => Verbose);
    /// <summary>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</summary>
    [Argument(Format = "/AllowNullableBodyParameters:{value}")] public bool? AllowNullableBodyParameters => Get<bool?>(() => AllowNullableBodyParameters);
    /// <summary>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</summary>
    [Argument(Format = "/AllowReferencesWithProperties:{value}")] public bool? AllowReferencesWithProperties => Get<bool?>(() => AllowReferencesWithProperties);
    /// <summary>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</summary>
    [Argument(Format = "/AspNetCoreEnvironment:{value}")] public string AspNetCoreEnvironment => Get<string>(() => AspNetCoreEnvironment);
    /// <summary>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/ContractResolver:{value}")] public string ContractResolver => Get<string>(() => ContractResolver);
    /// <summary>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</summary>
    [Argument(Format = "/CreateWebHostBuilderMethod:{value}")] public string CreateWebHostBuilderMethod => Get<string>(() => CreateWebHostBuilderMethod);
    /// <summary>The default reference type null handling of dictionary value types (NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultDictionaryValueReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultDictionaryValueReferenceTypeNullHandling);
    /// <summary>The default enum handling ('String' or 'Integer'), default: Integer.</summary>
    [Argument(Format = "/DefaultEnumHandling:{value}")] public EnumHandling DefaultEnumHandling => Get<EnumHandling>(() => DefaultEnumHandling);
    /// <summary>The default property name handling ('Default' or 'CamelCase').</summary>
    [Argument(Format = "/DefaultPropertyNameHandling:{value}")] public PropertyNameHandling DefaultPropertyNameHandling => Get<PropertyNameHandling>(() => DefaultPropertyNameHandling);
    /// <summary>The default reference type null handling (Null (default) or NotNull).</summary>
    [Argument(Format = "/DefaultReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultReferenceTypeNullHandling);
    /// <summary>The default response reference type null handling (default: NotNull (default) or Null).</summary>
    [Argument(Format = "/DefaultResponseReferenceTypeNullHandling:{value}")] public ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling => Get<ReferenceTypeNullHandling>(() => DefaultResponseReferenceTypeNullHandling);
    /// <summary>The document name to use in SwaggerDocumentProvider (default: v1).</summary>
    [Argument(Format = "/DocumentName:{value}")] public string DocumentName => Get<string>(() => DocumentName);
    /// <summary>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/DocumentProcessors:{value}")] public IReadOnlyList<string> DocumentProcessors => Get<List<string>>(() => DocumentProcessors);
    /// <summary>Specifies the Swagger document template (may be a path or JSON, default: none).</summary>
    [Argument(Format = "/DocumentTemplate:{value}")] public string DocumentTemplate => Get<string>(() => DocumentTemplate);
    /// <summary>The excluded type names (same as JsonSchemaIgnoreAttribute).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</summary>
    [Argument(Format = "/FlattenInheritanceHierarchy:{value}")] public bool? FlattenInheritanceHierarchy => Get<bool?>(() => FlattenInheritanceHierarchy);
    /// <summary>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</summary>
    [Argument(Format = "/GenerateAbstractProperties:{value}")] public bool? GenerateAbstractProperties => Get<bool?>(() => GenerateAbstractProperties);
    /// <summary>Generate the x-abstract flag on schemas (default: true).</summary>
    [Argument(Format = "/GenerateAbstractSchemas:{value}")] public bool? GenerateAbstractSchemas => Get<bool?>(() => GenerateAbstractSchemas);
    /// <summary>Generate a description with number to enum name mappings (for integer enums only, default: false).</summary>
    [Argument(Format = "/GenerateEnumMappingDescription:{value}")] public bool? GenerateEnumMappingDescription => Get<bool?>(() => GenerateEnumMappingDescription);
    /// <summary>Generate schemas for types in KnownTypeAttribute attributes (default: true).</summary>
    [Argument(Format = "/GenerateKnownTypes:{value}")] public bool? GenerateKnownTypes => Get<bool?>(() => GenerateKnownTypes);
    /// <summary>Generate xmlObject representation for definitions (default: false).</summary>
    [Argument(Format = "/GenerateXmlObjects:{value}")] public bool? GenerateXmlObjects => Get<bool?>(() => GenerateXmlObjects);
    /// <summary>Ignore properties with the ObsoleteAttribute (default: false).</summary>
    [Argument(Format = "/IgnoreObsoleteProperties:{value}")] public bool? IgnoreObsoleteProperties => Get<bool?>(() => IgnoreObsoleteProperties);
    /// <summary>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoDescription:{value}")] public string InfoDescription => Get<string>(() => InfoDescription);
    /// <summary>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoTitle:{value}")] public string InfoTitle => Get<string>(() => InfoTitle);
    /// <summary>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</summary>
    [Argument(Format = "/InfoVersion:{value}")] public string InfoVersion => Get<string>(() => InfoVersion);
    /// <summary>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/OperationProcessors:{value}")] public IReadOnlyList<string> OperationProcessors => Get<List<string>>(() => OperationProcessors);
    /// <summary>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SchemaNameGenerator:{value}")] public string SchemaNameGenerator => Get<string>(() => SchemaNameGenerator);
    /// <summary>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/SerializerSettings:{value}")] public string SerializerSettings => Get<string>(() => SerializerSettings);
    /// <summary>The basePath of the Swagger specification (optional).</summary>
    [Argument(Format = "/ServiceBasePath:{value}")] public string ServiceBasePath => Get<string>(() => ServiceBasePath);
    /// <summary>Overrides the service host of the web service (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</summary>
    [Argument(Format = "/Startup:{value}")] public string Startup => Get<string>(() => Startup);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</summary>
    [Argument(Format = "/UseDocumentProvider:{value}")] public bool? UseDocumentProvider => Get<bool?>(() => UseDocumentProvider);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
    /// <summary>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</summary>
    [Argument(Format = "/OutputType:{value}")] public SchemaType OutputType => Get<SchemaType>(() => OutputType);
    /// <summary>The path or paths to the .NET assemblies (comma separated).</summary>
    [Argument(Format = "/Assembly:{value}")] public IReadOnlyList<string> Assembly => Get<List<string>>(() => Assembly);
    /// <summary>The path to the assembly App.config or Web.config (optional).</summary>
    [Argument(Format = "/AssemblyConfig:{value}")] public string AssemblyConfig => Get<string>(() => AssemblyConfig);
    /// <summary>The paths to search for referenced assembly files (comma separated).</summary>
    [Argument(Format = "/ReferencePaths:{value}")] public IReadOnlyList<string> ReferencePaths => Get<List<string>>(() => ReferencePaths);
    /// <summary>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</summary>
    [Argument(Format = "/UseNuGetCache:{value}")] public bool? UseNuGetCache => Get<bool?>(() => UseNuGetCache);
}
#endregion
#region NSwagCreateDocumentSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagCreateDocument), Arguments = "new")]
public partial class NSwagCreateDocumentSettings : ToolOptions, IToolOptionsWithFramework
{
}
#endregion
#region NSwagExecuteDocumentSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagExecuteDocument), Arguments = "run")]
public partial class NSwagExecuteDocumentSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary></summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary></summary>
    [Argument(Format = "/Variables:{key}={value}")] public IReadOnlyDictionary<string, object> Variables => Get<Dictionary<string, object>>(() => Variables);
}
#endregion
#region NSwagJsonSchemaToCSharpSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagJsonSchemaToCSharp), Arguments = "jsonschema2csclient")]
public partial class NSwagJsonSchemaToCSharpSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The any .NET type (default: 'object').</summary>
    [Argument(Format = "/AnyType:{value}")] public string AnyType => Get<string>(() => AnyType);
    /// <summary>The generic array .NET instance type (default: empty = ArrayType).</summary>
    [Argument(Format = "/ArrayInstanceType:{value}")] public string ArrayInstanceType => Get<string>(() => ArrayInstanceType);
    /// <summary>The generic array .NET type (default: 'ObservableCollection').</summary>
    [Argument(Format = "/ArrayType:{value}")] public string ArrayType => Get<string>(() => ArrayType);
    /// <summary>The date time .NET type (default: 'DateTime').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public string DateTimeType => Get<string>(() => DateTimeType);
    /// <summary>The generic dictionary .NET instance type (default: empty = DictionaryType).</summary>
    [Argument(Format = "/DictionaryInstanceType:{value}")] public string DictionaryInstanceType => Get<string>(() => DictionaryInstanceType);
    /// <summary>The generic dictionary .NET type (default: 'Dictionary').</summary>
    [Argument(Format = "/DictionaryType:{value}")] public string DictionaryType => Get<string>(() => DictionaryType);
    /// <summary>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</summary>
    [Argument(Format = "/GenerateOptionalPropertiesAsNullable:{value}")] public bool? GenerateOptionalPropertiesAsNullable => Get<bool?>(() => GenerateOptionalPropertiesAsNullable);
    /// <summary>The class name of the root schema.</summary>
    [Argument(Format = "/Name:{value}")] public string Name => Get<string>(() => Name);
    /// <summary>The namespace of the generated classes.</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</summary>
    [Argument(Format = "/RequiredPropertiesMustBeDefined:{value}")] public bool? RequiredPropertiesMustBeDefined => Get<bool?>(() => RequiredPropertiesMustBeDefined);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagJsonSchemaToTypeScriptSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagJsonSchemaToTypeScript), Arguments = "jsonschema2tsclient")]
public partial class NSwagJsonSchemaToTypeScriptSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The type name of the root schema.</summary>
    [Argument(Format = "/Name:{value}")] public string Name => Get<string>(() => Name);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagOpenApiToCSharpClientSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagOpenApiToCSharpClient), Arguments = "openapi2csclient")]
public partial class NSwagOpenApiToCSharpClientSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The additional contract namespace usages.</summary>
    [Argument(Format = "/AdditionalContractNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalContractNamespaceUsages => Get<List<string>>(() => AdditionalContractNamespaceUsages);
    /// <summary>The additional namespace usages.</summary>
    [Argument(Format = "/AdditionalNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalNamespaceUsages => Get<List<string>>(() => AdditionalNamespaceUsages);
    /// <summary>The any .NET type (default: 'object').</summary>
    [Argument(Format = "/AnyType:{value}")] public string AnyType => Get<string>(() => AnyType);
    /// <summary>The generic array .NET type (default: 'Collection').</summary>
    [Argument(Format = "/ArrayBaseType:{value}")] public string ArrayBaseType => Get<string>(() => ArrayBaseType);
    /// <summary>The generic array .NET instance type (default: empty = ArrayType).</summary>
    [Argument(Format = "/ArrayInstanceType:{value}")] public string ArrayInstanceType => Get<string>(() => ArrayInstanceType);
    /// <summary>The generic array .NET type (default: 'ICollection').</summary>
    [Argument(Format = "/ArrayType:{value}")] public string ArrayType => Get<string>(() => ArrayType);
    /// <summary>The class name of the generated client.</summary>
    [Argument(Format = "/ClassName:{value}")] public string ClassName => Get<string>(() => ClassName);
    /// <summary>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</summary>
    [Argument(Format = "/ClassStyle:{value}")] public CSharpClassStyle ClassStyle => Get<CSharpClassStyle>(() => ClassStyle);
    /// <summary>The date time .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public string DateTimeType => Get<string>(() => DateTimeType);
    /// <summary>The date .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateType:{value}")] public string DateType => Get<string>(() => DateType);
    /// <summary>The generic dictionary .NET type (default: 'Dictionary').</summary>
    [Argument(Format = "/DictionaryBaseType:{value}")] public string DictionaryBaseType => Get<string>(() => DictionaryBaseType);
    /// <summary>The generic dictionary .NET instance type (default: empty = DictionaryType).</summary>
    [Argument(Format = "/DictionaryInstanceType:{value}")] public string DictionaryInstanceType => Get<string>(() => DictionaryInstanceType);
    /// <summary>The generic dictionary .NET type (default: 'IDictionary').</summary>
    [Argument(Format = "/DictionaryType:{value}")] public string DictionaryType => Get<string>(() => DictionaryType);
    /// <summary>Specifies whether enums should be always generated as bit flags (default: false).</summary>
    [Argument(Format = "/EnforceFlagEnums:{value}")] public bool? EnforceFlagEnums => Get<bool?>(() => EnforceFlagEnums);
    /// <summary>The globally excluded parameter names.</summary>
    [Argument(Format = "/ExcludedParameterNames:{value}")] public IReadOnlyList<string> ExcludedParameterNames => Get<List<string>>(() => ExcludedParameterNames);
    /// <summary>The excluded DTO type names (must be defined in an import or other namespace).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Specifies whether to generate data annotation attributes on DTO classes (default: true).</summary>
    [Argument(Format = "/GenerateDataAnnotations:{value}")] public bool? GenerateDataAnnotations => Get<bool?>(() => GenerateDataAnnotations);
    /// <summary>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</summary>
    [Argument(Format = "/GenerateDefaultValues:{value}")] public bool? GenerateDefaultValues => Get<bool?>(() => GenerateDefaultValues);
    /// <summary>Specifies whether to generate DTO classes.</summary>
    [Argument(Format = "/GenerateDtoTypes:{value}")] public bool? GenerateDtoTypes => Get<bool?>(() => GenerateDtoTypes);
    /// <summary>Specifies whether to remove the setter for non-nullable array properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableArrayProperties:{value}")] public bool? GenerateImmutableArrayProperties => Get<bool?>(() => GenerateImmutableArrayProperties);
    /// <summary>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableDictionaryProperties:{value}")] public bool? GenerateImmutableDictionaryProperties => Get<bool?>(() => GenerateImmutableDictionaryProperties);
    /// <summary>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</summary>
    [Argument(Format = "/GenerateJsonMethods:{value}")] public bool? GenerateJsonMethods => Get<bool?>(() => GenerateJsonMethods);
    /// <summary>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</summary>
    [Argument(Format = "/GenerateOptionalParameters:{value}")] public bool? GenerateOptionalParameters => Get<bool?>(() => GenerateOptionalParameters);
    /// <summary>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</summary>
    [Argument(Format = "/GenerateOptionalPropertiesAsNullable:{value}")] public bool? GenerateOptionalPropertiesAsNullable => Get<bool?>(() => GenerateOptionalPropertiesAsNullable);
    /// <summary>Specifies whether to generate response classes (default: true).</summary>
    [Argument(Format = "/GenerateResponseClasses:{value}")] public bool? GenerateResponseClasses => Get<bool?>(() => GenerateResponseClasses);
    /// <summary>Use preserve references handling (All) in the JSON serializer (default: false).</summary>
    [Argument(Format = "/HandleReferences:{value}")] public bool? HandleReferences => Get<bool?>(() => HandleReferences);
    /// <summary>Inline named any types (default: false).</summary>
    [Argument(Format = "/InlineNamedAny:{value}")] public bool? InlineNamedAny => Get<bool?>(() => InlineNamedAny);
    /// <summary>Inline named arrays (default: false).</summary>
    [Argument(Format = "/InlineNamedArrays:{value}")] public bool? InlineNamedArrays => Get<bool?>(() => InlineNamedArrays);
    /// <summary>Inline named dictionaries (default: false).</summary>
    [Argument(Format = "/InlineNamedDictionaries:{value}")] public bool? InlineNamedDictionaries => Get<bool?>(() => InlineNamedDictionaries);
    /// <summary>Inline named tuples (default: true).</summary>
    [Argument(Format = "/InlineNamedTuples:{value}")] public bool? InlineNamedTuples => Get<bool?>(() => InlineNamedTuples);
    /// <summary>Specifies the custom Json.NET converter types (optional, comma separated).</summary>
    [Argument(Format = "/JsonConverters:{value}")] public IReadOnlyList<string> JsonConverters => Get<List<string>>(() => JsonConverters);
    /// <summary>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</summary>
    [Argument(Format = "/JsonSerializerSettingsTransformationMethod:{value}")] public string JsonSerializerSettingsTransformationMethod => Get<string>(() => JsonSerializerSettingsTransformationMethod);
    /// <summary>The namespace of the generated classes.</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</summary>
    [Argument(Format = "/OperationGenerationMode:{value}")] public OperationGenerationMode OperationGenerationMode => Get<OperationGenerationMode>(() => OperationGenerationMode);
    /// <summary>The generic array .NET type of operation parameters (default: 'IEnumerable').</summary>
    [Argument(Format = "/ParameterArrayType:{value}")] public string ParameterArrayType => Get<string>(() => ParameterArrayType);
    /// <summary>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</summary>
    [Argument(Format = "/ParameterDictionaryType:{value}")] public string ParameterDictionaryType => Get<string>(() => ParameterDictionaryType);
    /// <summary>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</summary>
    [Argument(Format = "/RequiredPropertiesMustBeDefined:{value}")] public bool? RequiredPropertiesMustBeDefined => Get<bool?>(() => RequiredPropertiesMustBeDefined);
    /// <summary>The generic array .NET type of operation responses (default: 'ICollection').</summary>
    [Argument(Format = "/ResponseArrayType:{value}")] public string ResponseArrayType => Get<string>(() => ResponseArrayType);
    /// <summary>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ResponseClass:{value}")] public string ResponseClass => Get<string>(() => ResponseClass);
    /// <summary>The generic dictionary .NET type of operation responses (default: 'IDictionary').</summary>
    [Argument(Format = "/ResponseDictionaryType:{value}")] public string ResponseDictionaryType => Get<string>(() => ResponseDictionaryType);
    /// <summary>The time span .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeSpanType:{value}")] public string TimeSpanType => Get<string>(() => TimeSpanType);
    /// <summary>The time .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeType:{value}")] public string TimeType => Get<string>(() => TimeType);
    /// <summary>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</summary>
    [Argument(Format = "/WrapResponseMethods:{value}")] public IReadOnlyList<string> WrapResponseMethods => Get<List<string>>(() => WrapResponseMethods);
    /// <summary>Specifies whether to wrap success responses to allow full response access.</summary>
    [Argument(Format = "/WrapResponses:{value}")] public bool? WrapResponses => Get<bool?>(() => WrapResponses);
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagSwaggerToCSharpClientSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagSwaggerToCSharpClient), Arguments = "swagger2csclient")]
public partial class NSwagSwaggerToCSharpClientSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The client base class (empty for no base class).</summary>
    [Argument(Format = "/ClientBaseClass:{value}")] public string ClientBaseClass => Get<string>(() => ClientBaseClass);
    /// <summary>The client class access modifier (default: public).</summary>
    [Argument(Format = "/ClientClassAccessModifier:{value}")] public string ClientClassAccessModifier => Get<string>(() => ClientClassAccessModifier);
    /// <summary>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</summary>
    [Argument(Format = "/ConfigurationClass:{value}")] public string ConfigurationClass => Get<string>(() => ConfigurationClass);
    /// <summary>The contracts .NET namespace.</summary>
    [Argument(Format = "/ContractsNamespace:{value}")] public string ContractsNamespace => Get<string>(() => ContractsNamespace);
    /// <summary>The contracts output file path (optional, if no path is set then a single file with the implementation and contracts is generated).</summary>
    [Argument(Format = "/ContractsOutput:{value}")] public string ContractsOutput => Get<string>(() => ContractsOutput);
    /// <summary>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</summary>
    [Argument(Format = "/DisposeHttpClient:{value}")] public bool? DisposeHttpClient => Get<bool?>(() => DisposeHttpClient);
    /// <summary>The exception class (default 'SwaggerException', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ExceptionClass:{value}")] public string ExceptionClass => Get<string>(() => ExceptionClass);
    /// <summary>Specifies whether to expose the JsonSerializerSettings property (default: false).</summary>
    [Argument(Format = "/ExposeJsonSerializerSettings:{value}")] public bool? ExposeJsonSerializerSettings => Get<bool?>(() => ExposeJsonSerializerSettings);
    /// <summary>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</summary>
    [Argument(Format = "/GenerateBaseUrlProperty:{value}")] public bool? GenerateBaseUrlProperty => Get<bool?>(() => GenerateBaseUrlProperty);
    /// <summary>Specifies whether generate client classes.</summary>
    [Argument(Format = "/GenerateClientClasses:{value}")] public bool? GenerateClientClasses => Get<bool?>(() => GenerateClientClasses);
    /// <summary>Specifies whether generate interfaces for the client classes.</summary>
    [Argument(Format = "/GenerateClientInterfaces:{value}")] public bool? GenerateClientInterfaces => Get<bool?>(() => GenerateClientInterfaces);
    /// <summary>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</summary>
    [Argument(Format = "/GenerateContractsOutput:{value}")] public bool? GenerateContractsOutput => Get<bool?>(() => GenerateContractsOutput);
    /// <summary>Specifies whether to generate exception classes (default: true).</summary>
    [Argument(Format = "/GenerateExceptionClasses:{value}")] public bool? GenerateExceptionClasses => Get<bool?>(() => GenerateExceptionClasses);
    /// <summary>Specifies whether to generate synchronous methods (not recommended, default: false).</summary>
    [Argument(Format = "/GenerateSyncMethods:{value}")] public bool? GenerateSyncMethods => Get<bool?>(() => GenerateSyncMethods);
    /// <summary>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</summary>
    [Argument(Format = "/GenerateUpdateJsonSerializerSettingsMethod:{value}")] public bool? GenerateUpdateJsonSerializerSettingsMethod => Get<bool?>(() => GenerateUpdateJsonSerializerSettingsMethod);
    /// <summary>Specifies the HttpClient type. By default the 'System.Net.Http.HttpClient' is used.</summary>
    [Argument(Format = "/HttpClientType:{value}")] public string HttpClientType => Get<string>(() => HttpClientType);
    /// <summary>Specifies whether an HttpClient instance is injected (default: true).</summary>
    [Argument(Format = "/InjectHttpClient:{value}")] public bool? InjectHttpClient => Get<bool?>(() => InjectHttpClient);
    /// <summary>Specifies the format for Date type method parameters (default: yyyy-MM-dd).</summary>
    [Argument(Format = "/ParameterDateFormat:{value}")] public string ParameterDateFormat => Get<string>(() => ParameterDateFormat);
    /// <summary>Specifies the format for DateTime type method parameters (default: s).</summary>
    [Argument(Format = "/ParameterDateTimeFormat:{value}")] public string ParameterDateTimeFormat => Get<string>(() => ParameterDateTimeFormat);
    /// <summary>List of methods with a protected access modifier ('classname.methodname').</summary>
    [Argument(Format = "/ProtectedMethods:{value}")] public IReadOnlyList<string> ProtectedMethods => Get<List<string>>(() => ProtectedMethods);
    /// <summary>The null value used for query parameters which are null (default: '').</summary>
    [Argument(Format = "/QueryNullValue:{value}")] public string QueryNullValue => Get<string>(() => QueryNullValue);
    /// <summary>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</summary>
    [Argument(Format = "/SerializeTypeInformation:{value}")] public bool? SerializeTypeInformation => Get<bool?>(() => SerializeTypeInformation);
    /// <summary>The DTO class/enum access modifier (default: public).</summary>
    [Argument(Format = "/TypeAccessModifier:{value}")] public string TypeAccessModifier => Get<string>(() => TypeAccessModifier);
    /// <summary>Specifies whether to use and expose the base URL (default: true).</summary>
    [Argument(Format = "/UseBaseUrl:{value}")] public bool? UseBaseUrl => Get<bool?>(() => UseBaseUrl);
    /// <summary>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</summary>
    [Argument(Format = "/UseHttpClientCreationMethod:{value}")] public bool? UseHttpClientCreationMethod => Get<bool?>(() => UseHttpClientCreationMethod);
    /// <summary>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</summary>
    [Argument(Format = "/UseHttpRequestMessageCreationMethod:{value}")] public bool? UseHttpRequestMessageCreationMethod => Get<bool?>(() => UseHttpRequestMessageCreationMethod);
    /// <summary>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</summary>
    [Argument(Format = "/WrapDtoExceptions:{value}")] public bool? WrapDtoExceptions => Get<bool?>(() => WrapDtoExceptions);
    /// <summary>The additional contract namespace usages.</summary>
    [Argument(Format = "/AdditionalContractNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalContractNamespaceUsages => Get<List<string>>(() => AdditionalContractNamespaceUsages);
    /// <summary>The additional namespace usages.</summary>
    [Argument(Format = "/AdditionalNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalNamespaceUsages => Get<List<string>>(() => AdditionalNamespaceUsages);
    /// <summary>The any .NET type (default: 'object').</summary>
    [Argument(Format = "/AnyType:{value}")] public string AnyType => Get<string>(() => AnyType);
    /// <summary>The generic array .NET type (default: 'Collection').</summary>
    [Argument(Format = "/ArrayBaseType:{value}")] public string ArrayBaseType => Get<string>(() => ArrayBaseType);
    /// <summary>The generic array .NET instance type (default: empty = ArrayType).</summary>
    [Argument(Format = "/ArrayInstanceType:{value}")] public string ArrayInstanceType => Get<string>(() => ArrayInstanceType);
    /// <summary>The generic array .NET type (default: 'ICollection').</summary>
    [Argument(Format = "/ArrayType:{value}")] public string ArrayType => Get<string>(() => ArrayType);
    /// <summary>The class name of the generated client.</summary>
    [Argument(Format = "/ClassName:{value}")] public string ClassName => Get<string>(() => ClassName);
    /// <summary>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</summary>
    [Argument(Format = "/ClassStyle:{value}")] public CSharpClassStyle ClassStyle => Get<CSharpClassStyle>(() => ClassStyle);
    /// <summary>The date time .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public string DateTimeType => Get<string>(() => DateTimeType);
    /// <summary>The date .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateType:{value}")] public string DateType => Get<string>(() => DateType);
    /// <summary>The generic dictionary .NET type (default: 'Dictionary').</summary>
    [Argument(Format = "/DictionaryBaseType:{value}")] public string DictionaryBaseType => Get<string>(() => DictionaryBaseType);
    /// <summary>The generic dictionary .NET instance type (default: empty = DictionaryType).</summary>
    [Argument(Format = "/DictionaryInstanceType:{value}")] public string DictionaryInstanceType => Get<string>(() => DictionaryInstanceType);
    /// <summary>The generic dictionary .NET type (default: 'IDictionary').</summary>
    [Argument(Format = "/DictionaryType:{value}")] public string DictionaryType => Get<string>(() => DictionaryType);
    /// <summary>Specifies whether enums should be always generated as bit flags (default: false).</summary>
    [Argument(Format = "/EnforceFlagEnums:{value}")] public bool? EnforceFlagEnums => Get<bool?>(() => EnforceFlagEnums);
    /// <summary>The globally excluded parameter names.</summary>
    [Argument(Format = "/ExcludedParameterNames:{value}")] public IReadOnlyList<string> ExcludedParameterNames => Get<List<string>>(() => ExcludedParameterNames);
    /// <summary>The excluded DTO type names (must be defined in an import or other namespace).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Specifies whether to generate data annotation attributes on DTO classes (default: true).</summary>
    [Argument(Format = "/GenerateDataAnnotations:{value}")] public bool? GenerateDataAnnotations => Get<bool?>(() => GenerateDataAnnotations);
    /// <summary>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</summary>
    [Argument(Format = "/GenerateDefaultValues:{value}")] public bool? GenerateDefaultValues => Get<bool?>(() => GenerateDefaultValues);
    /// <summary>Specifies whether to generate DTO classes.</summary>
    [Argument(Format = "/GenerateDtoTypes:{value}")] public bool? GenerateDtoTypes => Get<bool?>(() => GenerateDtoTypes);
    /// <summary>Specifies whether to remove the setter for non-nullable array properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableArrayProperties:{value}")] public bool? GenerateImmutableArrayProperties => Get<bool?>(() => GenerateImmutableArrayProperties);
    /// <summary>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableDictionaryProperties:{value}")] public bool? GenerateImmutableDictionaryProperties => Get<bool?>(() => GenerateImmutableDictionaryProperties);
    /// <summary>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</summary>
    [Argument(Format = "/GenerateJsonMethods:{value}")] public bool? GenerateJsonMethods => Get<bool?>(() => GenerateJsonMethods);
    /// <summary>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</summary>
    [Argument(Format = "/GenerateOptionalParameters:{value}")] public bool? GenerateOptionalParameters => Get<bool?>(() => GenerateOptionalParameters);
    /// <summary>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</summary>
    [Argument(Format = "/GenerateOptionalPropertiesAsNullable:{value}")] public bool? GenerateOptionalPropertiesAsNullable => Get<bool?>(() => GenerateOptionalPropertiesAsNullable);
    /// <summary>Specifies whether to generate response classes (default: true).</summary>
    [Argument(Format = "/GenerateResponseClasses:{value}")] public bool? GenerateResponseClasses => Get<bool?>(() => GenerateResponseClasses);
    /// <summary>Use preserve references handling (All) in the JSON serializer (default: false).</summary>
    [Argument(Format = "/HandleReferences:{value}")] public bool? HandleReferences => Get<bool?>(() => HandleReferences);
    /// <summary>Inline named any types (default: false).</summary>
    [Argument(Format = "/InlineNamedAny:{value}")] public bool? InlineNamedAny => Get<bool?>(() => InlineNamedAny);
    /// <summary>Inline named arrays (default: false).</summary>
    [Argument(Format = "/InlineNamedArrays:{value}")] public bool? InlineNamedArrays => Get<bool?>(() => InlineNamedArrays);
    /// <summary>Inline named dictionaries (default: false).</summary>
    [Argument(Format = "/InlineNamedDictionaries:{value}")] public bool? InlineNamedDictionaries => Get<bool?>(() => InlineNamedDictionaries);
    /// <summary>Inline named tuples (default: true).</summary>
    [Argument(Format = "/InlineNamedTuples:{value}")] public bool? InlineNamedTuples => Get<bool?>(() => InlineNamedTuples);
    /// <summary>Specifies the custom Json.NET converter types (optional, comma separated).</summary>
    [Argument(Format = "/JsonConverters:{value}")] public IReadOnlyList<string> JsonConverters => Get<List<string>>(() => JsonConverters);
    /// <summary>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</summary>
    [Argument(Format = "/JsonSerializerSettingsTransformationMethod:{value}")] public string JsonSerializerSettingsTransformationMethod => Get<string>(() => JsonSerializerSettingsTransformationMethod);
    /// <summary>The namespace of the generated classes.</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</summary>
    [Argument(Format = "/OperationGenerationMode:{value}")] public OperationGenerationMode OperationGenerationMode => Get<OperationGenerationMode>(() => OperationGenerationMode);
    /// <summary>The generic array .NET type of operation parameters (default: 'IEnumerable').</summary>
    [Argument(Format = "/ParameterArrayType:{value}")] public string ParameterArrayType => Get<string>(() => ParameterArrayType);
    /// <summary>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</summary>
    [Argument(Format = "/ParameterDictionaryType:{value}")] public string ParameterDictionaryType => Get<string>(() => ParameterDictionaryType);
    /// <summary>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</summary>
    [Argument(Format = "/RequiredPropertiesMustBeDefined:{value}")] public bool? RequiredPropertiesMustBeDefined => Get<bool?>(() => RequiredPropertiesMustBeDefined);
    /// <summary>The generic array .NET type of operation responses (default: 'ICollection').</summary>
    [Argument(Format = "/ResponseArrayType:{value}")] public string ResponseArrayType => Get<string>(() => ResponseArrayType);
    /// <summary>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ResponseClass:{value}")] public string ResponseClass => Get<string>(() => ResponseClass);
    /// <summary>The generic dictionary .NET type of operation responses (default: 'IDictionary').</summary>
    [Argument(Format = "/ResponseDictionaryType:{value}")] public string ResponseDictionaryType => Get<string>(() => ResponseDictionaryType);
    /// <summary>The time span .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeSpanType:{value}")] public string TimeSpanType => Get<string>(() => TimeSpanType);
    /// <summary>The time .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeType:{value}")] public string TimeType => Get<string>(() => TimeType);
    /// <summary>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</summary>
    [Argument(Format = "/WrapResponseMethods:{value}")] public IReadOnlyList<string> WrapResponseMethods => Get<List<string>>(() => WrapResponseMethods);
    /// <summary>Specifies whether to wrap success responses to allow full response access.</summary>
    [Argument(Format = "/WrapResponses:{value}")] public bool? WrapResponses => Get<bool?>(() => WrapResponses);
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagOpenApiToCSharpControllerSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagOpenApiToCSharpController), Arguments = "openapi2cscontroller")]
public partial class NSwagOpenApiToCSharpControllerSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The additional contract namespace usages.</summary>
    [Argument(Format = "/AdditionalContractNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalContractNamespaceUsages => Get<List<string>>(() => AdditionalContractNamespaceUsages);
    /// <summary>The additional namespace usages.</summary>
    [Argument(Format = "/AdditionalNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalNamespaceUsages => Get<List<string>>(() => AdditionalNamespaceUsages);
    /// <summary>The any .NET type (default: 'object').</summary>
    [Argument(Format = "/AnyType:{value}")] public string AnyType => Get<string>(() => AnyType);
    /// <summary>The generic array .NET type (default: 'Collection').</summary>
    [Argument(Format = "/ArrayBaseType:{value}")] public string ArrayBaseType => Get<string>(() => ArrayBaseType);
    /// <summary>The generic array .NET instance type (default: empty = ArrayType).</summary>
    [Argument(Format = "/ArrayInstanceType:{value}")] public string ArrayInstanceType => Get<string>(() => ArrayInstanceType);
    /// <summary>The generic array .NET type (default: 'ICollection').</summary>
    [Argument(Format = "/ArrayType:{value}")] public string ArrayType => Get<string>(() => ArrayType);
    /// <summary>The class name of the generated client.</summary>
    [Argument(Format = "/ClassName:{value}")] public string ClassName => Get<string>(() => ClassName);
    /// <summary>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</summary>
    [Argument(Format = "/ClassStyle:{value}")] public CSharpClassStyle ClassStyle => Get<CSharpClassStyle>(() => ClassStyle);
    /// <summary>The date time .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public string DateTimeType => Get<string>(() => DateTimeType);
    /// <summary>The date .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateType:{value}")] public string DateType => Get<string>(() => DateType);
    /// <summary>The generic dictionary .NET type (default: 'Dictionary').</summary>
    [Argument(Format = "/DictionaryBaseType:{value}")] public string DictionaryBaseType => Get<string>(() => DictionaryBaseType);
    /// <summary>The generic dictionary .NET instance type (default: empty = DictionaryType).</summary>
    [Argument(Format = "/DictionaryInstanceType:{value}")] public string DictionaryInstanceType => Get<string>(() => DictionaryInstanceType);
    /// <summary>The generic dictionary .NET type (default: 'IDictionary').</summary>
    [Argument(Format = "/DictionaryType:{value}")] public string DictionaryType => Get<string>(() => DictionaryType);
    /// <summary>Specifies whether enums should be always generated as bit flags (default: false).</summary>
    [Argument(Format = "/EnforceFlagEnums:{value}")] public bool? EnforceFlagEnums => Get<bool?>(() => EnforceFlagEnums);
    /// <summary>The globally excluded parameter names.</summary>
    [Argument(Format = "/ExcludedParameterNames:{value}")] public IReadOnlyList<string> ExcludedParameterNames => Get<List<string>>(() => ExcludedParameterNames);
    /// <summary>The excluded DTO type names (must be defined in an import or other namespace).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Specifies whether to generate data annotation attributes on DTO classes (default: true).</summary>
    [Argument(Format = "/GenerateDataAnnotations:{value}")] public bool? GenerateDataAnnotations => Get<bool?>(() => GenerateDataAnnotations);
    /// <summary>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</summary>
    [Argument(Format = "/GenerateDefaultValues:{value}")] public bool? GenerateDefaultValues => Get<bool?>(() => GenerateDefaultValues);
    /// <summary>Specifies whether to generate DTO classes.</summary>
    [Argument(Format = "/GenerateDtoTypes:{value}")] public bool? GenerateDtoTypes => Get<bool?>(() => GenerateDtoTypes);
    /// <summary>Specifies whether to remove the setter for non-nullable array properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableArrayProperties:{value}")] public bool? GenerateImmutableArrayProperties => Get<bool?>(() => GenerateImmutableArrayProperties);
    /// <summary>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableDictionaryProperties:{value}")] public bool? GenerateImmutableDictionaryProperties => Get<bool?>(() => GenerateImmutableDictionaryProperties);
    /// <summary>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</summary>
    [Argument(Format = "/GenerateJsonMethods:{value}")] public bool? GenerateJsonMethods => Get<bool?>(() => GenerateJsonMethods);
    /// <summary>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</summary>
    [Argument(Format = "/GenerateOptionalParameters:{value}")] public bool? GenerateOptionalParameters => Get<bool?>(() => GenerateOptionalParameters);
    /// <summary>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</summary>
    [Argument(Format = "/GenerateOptionalPropertiesAsNullable:{value}")] public bool? GenerateOptionalPropertiesAsNullable => Get<bool?>(() => GenerateOptionalPropertiesAsNullable);
    /// <summary>Specifies whether to generate response classes (default: true).</summary>
    [Argument(Format = "/GenerateResponseClasses:{value}")] public bool? GenerateResponseClasses => Get<bool?>(() => GenerateResponseClasses);
    /// <summary>Use preserve references handling (All) in the JSON serializer (default: false).</summary>
    [Argument(Format = "/HandleReferences:{value}")] public bool? HandleReferences => Get<bool?>(() => HandleReferences);
    /// <summary>Inline named any types (default: false).</summary>
    [Argument(Format = "/InlineNamedAny:{value}")] public bool? InlineNamedAny => Get<bool?>(() => InlineNamedAny);
    /// <summary>Inline named arrays (default: false).</summary>
    [Argument(Format = "/InlineNamedArrays:{value}")] public bool? InlineNamedArrays => Get<bool?>(() => InlineNamedArrays);
    /// <summary>Inline named dictionaries (default: false).</summary>
    [Argument(Format = "/InlineNamedDictionaries:{value}")] public bool? InlineNamedDictionaries => Get<bool?>(() => InlineNamedDictionaries);
    /// <summary>Inline named tuples (default: true).</summary>
    [Argument(Format = "/InlineNamedTuples:{value}")] public bool? InlineNamedTuples => Get<bool?>(() => InlineNamedTuples);
    /// <summary>Specifies the custom Json.NET converter types (optional, comma separated).</summary>
    [Argument(Format = "/JsonConverters:{value}")] public IReadOnlyList<string> JsonConverters => Get<List<string>>(() => JsonConverters);
    /// <summary>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</summary>
    [Argument(Format = "/JsonSerializerSettingsTransformationMethod:{value}")] public string JsonSerializerSettingsTransformationMethod => Get<string>(() => JsonSerializerSettingsTransformationMethod);
    /// <summary>The namespace of the generated classes.</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</summary>
    [Argument(Format = "/OperationGenerationMode:{value}")] public OperationGenerationMode OperationGenerationMode => Get<OperationGenerationMode>(() => OperationGenerationMode);
    /// <summary>The generic array .NET type of operation parameters (default: 'IEnumerable').</summary>
    [Argument(Format = "/ParameterArrayType:{value}")] public string ParameterArrayType => Get<string>(() => ParameterArrayType);
    /// <summary>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</summary>
    [Argument(Format = "/ParameterDictionaryType:{value}")] public string ParameterDictionaryType => Get<string>(() => ParameterDictionaryType);
    /// <summary>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</summary>
    [Argument(Format = "/RequiredPropertiesMustBeDefined:{value}")] public bool? RequiredPropertiesMustBeDefined => Get<bool?>(() => RequiredPropertiesMustBeDefined);
    /// <summary>The generic array .NET type of operation responses (default: 'ICollection').</summary>
    [Argument(Format = "/ResponseArrayType:{value}")] public string ResponseArrayType => Get<string>(() => ResponseArrayType);
    /// <summary>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ResponseClass:{value}")] public string ResponseClass => Get<string>(() => ResponseClass);
    /// <summary>The generic dictionary .NET type of operation responses (default: 'IDictionary').</summary>
    [Argument(Format = "/ResponseDictionaryType:{value}")] public string ResponseDictionaryType => Get<string>(() => ResponseDictionaryType);
    /// <summary>The time span .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeSpanType:{value}")] public string TimeSpanType => Get<string>(() => TimeSpanType);
    /// <summary>The time .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeType:{value}")] public string TimeType => Get<string>(() => TimeType);
    /// <summary>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</summary>
    [Argument(Format = "/WrapResponseMethods:{value}")] public IReadOnlyList<string> WrapResponseMethods => Get<List<string>>(() => WrapResponseMethods);
    /// <summary>Specifies whether to wrap success responses to allow full response access.</summary>
    [Argument(Format = "/WrapResponses:{value}")] public bool? WrapResponses => Get<bool?>(() => WrapResponses);
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagSwaggerToCSharpControllerSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagSwaggerToCSharpController), Arguments = "swagger2cscontroller")]
public partial class NSwagSwaggerToCSharpControllerSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The Base path on which the API is served, which is relative to the Host</summary>
    [Argument(Format = "/BasePath:{value}")] public string BasePath => Get<string>(() => BasePath);
    /// <summary>The controller base class (empty for 'ApiController').</summary>
    [Argument(Format = "/ControllerBaseClass:{value}")] public string ControllerBaseClass => Get<string>(() => ControllerBaseClass);
    /// <summary>The controller generation style (partial, abstract; default: partial).</summary>
    [Argument(Format = "/ControllerStyle:{value}")] public CSharpControllerStyle ControllerStyle => Get<CSharpControllerStyle>(() => ControllerStyle);
    /// <summary>controller target framework (default: AspNetCore).</summary>
    [Argument(Format = "/ControllerTarget:{value}")] public CSharpControllerTarget ControllerTarget => Get<CSharpControllerTarget>(() => ControllerTarget);
    /// <summary>Add model validation attributes (default: false).</summary>
    [Argument(Format = "/GenerateModelValidationAttributes:{value}")] public bool? GenerateModelValidationAttributes => Get<bool?>(() => GenerateModelValidationAttributes);
    /// <summary>The strategy for naming controller routes (none, operationid; default: none).</summary>
    [Argument(Format = "/RouteNamingStrategy:{value}")] public CSharpControllerRouteNamingStrategy RouteNamingStrategy => Get<CSharpControllerRouteNamingStrategy>(() => RouteNamingStrategy);
    /// <summary>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</summary>
    [Argument(Format = "/UseActionResultType:{value}")] public bool? UseActionResultType => Get<bool?>(() => UseActionResultType);
    /// <summary>Add a cancellation token parameter (default: false).</summary>
    [Argument(Format = "/UseCancellationToken:{value}")] public bool? UseCancellationToken => Get<bool?>(() => UseCancellationToken);
    /// <summary>The additional contract namespace usages.</summary>
    [Argument(Format = "/AdditionalContractNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalContractNamespaceUsages => Get<List<string>>(() => AdditionalContractNamespaceUsages);
    /// <summary>The additional namespace usages.</summary>
    [Argument(Format = "/AdditionalNamespaceUsages:{value}")] public IReadOnlyList<string> AdditionalNamespaceUsages => Get<List<string>>(() => AdditionalNamespaceUsages);
    /// <summary>The any .NET type (default: 'object').</summary>
    [Argument(Format = "/AnyType:{value}")] public string AnyType => Get<string>(() => AnyType);
    /// <summary>The generic array .NET type (default: 'Collection').</summary>
    [Argument(Format = "/ArrayBaseType:{value}")] public string ArrayBaseType => Get<string>(() => ArrayBaseType);
    /// <summary>The generic array .NET instance type (default: empty = ArrayType).</summary>
    [Argument(Format = "/ArrayInstanceType:{value}")] public string ArrayInstanceType => Get<string>(() => ArrayInstanceType);
    /// <summary>The generic array .NET type (default: 'ICollection').</summary>
    [Argument(Format = "/ArrayType:{value}")] public string ArrayType => Get<string>(() => ArrayType);
    /// <summary>The class name of the generated client.</summary>
    [Argument(Format = "/ClassName:{value}")] public string ClassName => Get<string>(() => ClassName);
    /// <summary>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</summary>
    [Argument(Format = "/ClassStyle:{value}")] public CSharpClassStyle ClassStyle => Get<CSharpClassStyle>(() => ClassStyle);
    /// <summary>The date time .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public string DateTimeType => Get<string>(() => DateTimeType);
    /// <summary>The date .NET type (default: 'DateTimeOffset').</summary>
    [Argument(Format = "/DateType:{value}")] public string DateType => Get<string>(() => DateType);
    /// <summary>The generic dictionary .NET type (default: 'Dictionary').</summary>
    [Argument(Format = "/DictionaryBaseType:{value}")] public string DictionaryBaseType => Get<string>(() => DictionaryBaseType);
    /// <summary>The generic dictionary .NET instance type (default: empty = DictionaryType).</summary>
    [Argument(Format = "/DictionaryInstanceType:{value}")] public string DictionaryInstanceType => Get<string>(() => DictionaryInstanceType);
    /// <summary>The generic dictionary .NET type (default: 'IDictionary').</summary>
    [Argument(Format = "/DictionaryType:{value}")] public string DictionaryType => Get<string>(() => DictionaryType);
    /// <summary>Specifies whether enums should be always generated as bit flags (default: false).</summary>
    [Argument(Format = "/EnforceFlagEnums:{value}")] public bool? EnforceFlagEnums => Get<bool?>(() => EnforceFlagEnums);
    /// <summary>The globally excluded parameter names.</summary>
    [Argument(Format = "/ExcludedParameterNames:{value}")] public IReadOnlyList<string> ExcludedParameterNames => Get<List<string>>(() => ExcludedParameterNames);
    /// <summary>The excluded DTO type names (must be defined in an import or other namespace).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Specifies whether to generate data annotation attributes on DTO classes (default: true).</summary>
    [Argument(Format = "/GenerateDataAnnotations:{value}")] public bool? GenerateDataAnnotations => Get<bool?>(() => GenerateDataAnnotations);
    /// <summary>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</summary>
    [Argument(Format = "/GenerateDefaultValues:{value}")] public bool? GenerateDefaultValues => Get<bool?>(() => GenerateDefaultValues);
    /// <summary>Specifies whether to generate DTO classes.</summary>
    [Argument(Format = "/GenerateDtoTypes:{value}")] public bool? GenerateDtoTypes => Get<bool?>(() => GenerateDtoTypes);
    /// <summary>Specifies whether to remove the setter for non-nullable array properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableArrayProperties:{value}")] public bool? GenerateImmutableArrayProperties => Get<bool?>(() => GenerateImmutableArrayProperties);
    /// <summary>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</summary>
    [Argument(Format = "/GenerateImmutableDictionaryProperties:{value}")] public bool? GenerateImmutableDictionaryProperties => Get<bool?>(() => GenerateImmutableDictionaryProperties);
    /// <summary>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</summary>
    [Argument(Format = "/GenerateJsonMethods:{value}")] public bool? GenerateJsonMethods => Get<bool?>(() => GenerateJsonMethods);
    /// <summary>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</summary>
    [Argument(Format = "/GenerateOptionalParameters:{value}")] public bool? GenerateOptionalParameters => Get<bool?>(() => GenerateOptionalParameters);
    /// <summary>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</summary>
    [Argument(Format = "/GenerateOptionalPropertiesAsNullable:{value}")] public bool? GenerateOptionalPropertiesAsNullable => Get<bool?>(() => GenerateOptionalPropertiesAsNullable);
    /// <summary>Specifies whether to generate response classes (default: true).</summary>
    [Argument(Format = "/GenerateResponseClasses:{value}")] public bool? GenerateResponseClasses => Get<bool?>(() => GenerateResponseClasses);
    /// <summary>Use preserve references handling (All) in the JSON serializer (default: false).</summary>
    [Argument(Format = "/HandleReferences:{value}")] public bool? HandleReferences => Get<bool?>(() => HandleReferences);
    /// <summary>Inline named any types (default: false).</summary>
    [Argument(Format = "/InlineNamedAny:{value}")] public bool? InlineNamedAny => Get<bool?>(() => InlineNamedAny);
    /// <summary>Inline named arrays (default: false).</summary>
    [Argument(Format = "/InlineNamedArrays:{value}")] public bool? InlineNamedArrays => Get<bool?>(() => InlineNamedArrays);
    /// <summary>Inline named dictionaries (default: false).</summary>
    [Argument(Format = "/InlineNamedDictionaries:{value}")] public bool? InlineNamedDictionaries => Get<bool?>(() => InlineNamedDictionaries);
    /// <summary>Inline named tuples (default: true).</summary>
    [Argument(Format = "/InlineNamedTuples:{value}")] public bool? InlineNamedTuples => Get<bool?>(() => InlineNamedTuples);
    /// <summary>Specifies the custom Json.NET converter types (optional, comma separated).</summary>
    [Argument(Format = "/JsonConverters:{value}")] public IReadOnlyList<string> JsonConverters => Get<List<string>>(() => JsonConverters);
    /// <summary>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</summary>
    [Argument(Format = "/JsonSerializerSettingsTransformationMethod:{value}")] public string JsonSerializerSettingsTransformationMethod => Get<string>(() => JsonSerializerSettingsTransformationMethod);
    /// <summary>The namespace of the generated classes.</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</summary>
    [Argument(Format = "/OperationGenerationMode:{value}")] public OperationGenerationMode OperationGenerationMode => Get<OperationGenerationMode>(() => OperationGenerationMode);
    /// <summary>The generic array .NET type of operation parameters (default: 'IEnumerable').</summary>
    [Argument(Format = "/ParameterArrayType:{value}")] public string ParameterArrayType => Get<string>(() => ParameterArrayType);
    /// <summary>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</summary>
    [Argument(Format = "/ParameterDictionaryType:{value}")] public string ParameterDictionaryType => Get<string>(() => ParameterDictionaryType);
    /// <summary>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</summary>
    [Argument(Format = "/RequiredPropertiesMustBeDefined:{value}")] public bool? RequiredPropertiesMustBeDefined => Get<bool?>(() => RequiredPropertiesMustBeDefined);
    /// <summary>The generic array .NET type of operation responses (default: 'ICollection').</summary>
    [Argument(Format = "/ResponseArrayType:{value}")] public string ResponseArrayType => Get<string>(() => ResponseArrayType);
    /// <summary>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ResponseClass:{value}")] public string ResponseClass => Get<string>(() => ResponseClass);
    /// <summary>The generic dictionary .NET type of operation responses (default: 'IDictionary').</summary>
    [Argument(Format = "/ResponseDictionaryType:{value}")] public string ResponseDictionaryType => Get<string>(() => ResponseDictionaryType);
    /// <summary>The time span .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeSpanType:{value}")] public string TimeSpanType => Get<string>(() => TimeSpanType);
    /// <summary>The time .NET type (default: 'TimeSpan').</summary>
    [Argument(Format = "/TimeType:{value}")] public string TimeType => Get<string>(() => TimeType);
    /// <summary>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</summary>
    [Argument(Format = "/WrapResponseMethods:{value}")] public IReadOnlyList<string> WrapResponseMethods => Get<List<string>>(() => WrapResponseMethods);
    /// <summary>Specifies whether to wrap success responses to allow full response access.</summary>
    [Argument(Format = "/WrapResponses:{value}")] public bool? WrapResponses => Get<bool?>(() => WrapResponses);
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagOpenApiToTypeScriptClientSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagOpenApiToTypeScriptClient), Arguments = "openapi2tsclient")]
public partial class NSwagOpenApiToTypeScriptClientSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagSwaggerToTypeScriptClientSettings
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
[Command(Type = typeof(NSwagTasks), Command = nameof(NSwagTasks.NSwagSwaggerToTypeScriptClient), Arguments = "swagger2tsclient")]
public partial class NSwagSwaggerToTypeScriptClientSettings : ToolOptions, IToolOptionsWithFramework
{
    /// <summary>The token name for injecting the API base URL string (used in the Angular template, default: 'API_BASE_URL').</summary>
    [Argument(Format = "/BaseUrlTokenName:{value}")] public string BaseUrlTokenName => Get<string>(() => BaseUrlTokenName);
    /// <summary>The class name of the generated client.</summary>
    [Argument(Format = "/ClassName:{value}")] public string ClassName => Get<string>(() => ClassName);
    /// <summary>The type names which always generate plain TypeScript classes.</summary>
    [Argument(Format = "/ClassTypes:{value}")] public IReadOnlyList<string> ClassTypes => Get<List<string>>(() => ClassTypes);
    /// <summary>The base class of the generated client classes (optional, must be imported or implemented in the extension code).</summary>
    [Argument(Format = "/ClientBaseClass:{value}")] public string ClientBaseClass => Get<string>(() => ClientBaseClass);
    /// <summary>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</summary>
    [Argument(Format = "/ConfigurationClass:{value}")] public string ConfigurationClass => Get<string>(() => ConfigurationClass);
    /// <summary>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</summary>
    [Argument(Format = "/ConvertConstructorInterfaceData:{value}")] public bool? ConvertConstructorInterfaceData => Get<bool?>(() => ConvertConstructorInterfaceData);
    /// <summary>The date time type ('Date', 'MomentJS', 'OffsetMomentJS', 'string').</summary>
    [Argument(Format = "/DateTimeType:{value}")] public TypeScriptDateTimeType DateTimeType => Get<TypeScriptDateTimeType>(() => DateTimeType);
    /// <summary>The exception class (default 'ApiException').</summary>
    [Argument(Format = "/ExceptionClass:{value}")] public string ExceptionClass => Get<string>(() => ExceptionClass);
    /// <summary>The globally excluded parameter names.</summary>
    [Argument(Format = "/ExcludedParameterNames:{value}")] public IReadOnlyList<string> ExcludedParameterNames => Get<List<string>>(() => ExcludedParameterNames);
    /// <summary>The excluded DTO type names (must be defined in an import or other namespace).</summary>
    [Argument(Format = "/ExcludedTypeNames:{value}")] public IReadOnlyList<string> ExcludedTypeNames => Get<List<string>>(() => ExcludedTypeNames);
    /// <summary>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</summary>
    [Argument(Format = "/ExportTypes:{value}")] public bool? ExportTypes => Get<bool?>(() => ExportTypes);
    /// <summary>The list of extended classes.</summary>
    [Argument(Format = "/ExtendedClasses:{value}")] public IReadOnlyList<string> ExtendedClasses => Get<List<string>>(() => ExtendedClasses);
    /// <summary>The extension code (string or file path).</summary>
    [Argument(Format = "/ExtensionCode:{value}")] public string ExtensionCode => Get<string>(() => ExtensionCode);
    /// <summary>Specifies whether generate client classes.</summary>
    [Argument(Format = "/GenerateClientClasses:{value}")] public bool? GenerateClientClasses => Get<bool?>(() => GenerateClientClasses);
    /// <summary>Specifies whether generate interfaces for the client classes (default: false).</summary>
    [Argument(Format = "/GenerateClientInterfaces:{value}")] public bool? GenerateClientInterfaces => Get<bool?>(() => GenerateClientInterfaces);
    /// <summary>Specifies whether a clone() method should be generated in the DTO classes (default: false).</summary>
    [Argument(Format = "/GenerateCloneMethod:{value}")] public bool? GenerateCloneMethod => Get<bool?>(() => GenerateCloneMethod);
    /// <summary>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</summary>
    [Argument(Format = "/GenerateConstructorInterface:{value}")] public bool? GenerateConstructorInterface => Get<bool?>(() => GenerateConstructorInterface);
    /// <summary>Specifies whether to generate default values for properties (default: true).</summary>
    [Argument(Format = "/GenerateDefaultValues:{value}")] public bool? GenerateDefaultValues => Get<bool?>(() => GenerateDefaultValues);
    /// <summary>Specifies whether to generate DTO classes.</summary>
    [Argument(Format = "/GenerateDtoTypes:{value}")] public bool? GenerateDtoTypes => Get<bool?>(() => GenerateDtoTypes);
    /// <summary>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</summary>
    [Argument(Format = "/GenerateOptionalParameters:{value}")] public bool? GenerateOptionalParameters => Get<bool?>(() => GenerateOptionalParameters);
    /// <summary>Specifies whether to generate response classes (default: true).</summary>
    [Argument(Format = "/GenerateResponseClasses:{value}")] public bool? GenerateResponseClasses => Get<bool?>(() => GenerateResponseClasses);
    /// <summary>Handle JSON references (default: false).</summary>
    [Argument(Format = "/HandleReferences:{value}")] public bool? HandleReferences => Get<bool?>(() => HandleReferences);
    /// <summary>The Angular HTTP service class (default 'Http', 'HttpClient').</summary>
    [Argument(Format = "/HttpClass:{value}")] public HttpClass HttpClass => Get<HttpClass>(() => HttpClass);
    /// <summary>Specifies whether required types should be imported (default: true).</summary>
    [Argument(Format = "/ImportRequiredTypes:{value}")] public bool? ImportRequiredTypes => Get<bool?>(() => ImportRequiredTypes);
    /// <summary>The Angular injection token type (default 'InjectionToken', 'OpaqueToken').</summary>
    [Argument(Format = "/InjectionTokenType:{value}")] public InjectionTokenType InjectionTokenType => Get<InjectionTokenType>(() => InjectionTokenType);
    /// <summary>Inline named any types (default: false).</summary>
    [Argument(Format = "/InlineNamedAny:{value}")] public bool? InlineNamedAny => Get<bool?>(() => InlineNamedAny);
    /// <summary>Inline named dictionaries (default: false).</summary>
    [Argument(Format = "/InlineNamedDictionaries:{value}")] public bool? InlineNamedDictionaries => Get<bool?>(() => InlineNamedDictionaries);
    /// <summary>Specifies whether to mark optional properties with ? (default: false).</summary>
    [Argument(Format = "/MarkOptionalProperties:{value}")] public bool? MarkOptionalProperties => Get<bool?>(() => MarkOptionalProperties);
    /// <summary>The TypeScript module name (default: '', no module).</summary>
    [Argument(Format = "/ModuleName:{value}")] public string ModuleName => Get<string>(() => ModuleName);
    /// <summary>The TypeScript namespace (default: '', no namespace).</summary>
    [Argument(Format = "/Namespace:{value}")] public string Namespace => Get<string>(() => Namespace);
    /// <summary>The null value used in object initializers (default 'Undefined', 'Null').</summary>
    [Argument(Format = "/NullValue:{value}")] public TypeScriptNullValue NullValue => Get<TypeScriptNullValue>(() => NullValue);
    /// <summary>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</summary>
    [Argument(Format = "/OperationGenerationMode:{value}")] public OperationGenerationMode OperationGenerationMode => Get<OperationGenerationMode>(() => OperationGenerationMode);
    /// <summary>The promise type ('Promise' or 'QPromise').</summary>
    [Argument(Format = "/PromiseType:{value}")] public PromiseType PromiseType => Get<PromiseType>(() => PromiseType);
    /// <summary>List of methods with a protected access modifier ('classname.methodname').</summary>
    [Argument(Format = "/ProtectedMethods:{value}")] public IReadOnlyList<string> ProtectedMethods => Get<List<string>>(() => ProtectedMethods);
    /// <summary>The null value used for query parameters which are null (default: '').</summary>
    [Argument(Format = "/QueryNullValue:{value}")] public string QueryNullValue => Get<string>(() => QueryNullValue);
    /// <summary>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</summary>
    [Argument(Format = "/ResponseClass:{value}")] public string ResponseClass => Get<string>(() => ResponseClass);
    /// <summary>The target RxJs version (default: 6.0).</summary>
    [Argument(Format = "/RxJsVersion:{value}")] public decimal? RxJsVersion => Get<decimal?>(() => RxJsVersion);
    /// <summary>The type of the asynchronism handling ('JQueryCallbacks', 'JQueryPromises', 'AngularJS', 'Angular', 'Fetch', 'Aurelia').</summary>
    [Argument(Format = "/Template:{value}")] public TypeScriptTemplate Template => Get<TypeScriptTemplate>(() => Template);
    /// <summary>The target TypeScript version (default: 2.7).</summary>
    [Argument(Format = "/TypeScriptVersion:{value}")] public decimal? TypeScriptVersion => Get<decimal?>(() => TypeScriptVersion);
    /// <summary>The type style (default: Class).</summary>
    [Argument(Format = "/TypeStyle:{value}")] public TypeScriptTypeStyle TypeStyle => Get<TypeScriptTypeStyle>(() => TypeStyle);
    /// <summary>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</summary>
    [Argument(Format = "/UseGetBaseUrlMethod:{value}")] public bool? UseGetBaseUrlMethod => Get<bool?>(() => UseGetBaseUrlMethod);
    /// <summary>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</summary>
    [Argument(Format = "/UseSingletonProvider:{value}")] public bool? UseSingletonProvider => Get<bool?>(() => UseSingletonProvider);
    /// <summary>Call 'transformOptions' on the base class or extension class (default: false).</summary>
    [Argument(Format = "/UseTransformOptionsMethod:{value}")] public bool? UseTransformOptionsMethod => Get<bool?>(() => UseTransformOptionsMethod);
    /// <summary>Call 'transformResult' on the base class or extension class (default: false).</summary>
    [Argument(Format = "/UseTransformResultMethod:{value}")] public bool? UseTransformResultMethod => Get<bool?>(() => UseTransformResultMethod);
    /// <summary>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</summary>
    [Argument(Format = "/WrapDtoExceptions:{value}")] public bool? WrapDtoExceptions => Get<bool?>(() => WrapDtoExceptions);
    /// <summary>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</summary>
    [Argument(Format = "/WrapResponseMethods:{value}")] public IReadOnlyList<string> WrapResponseMethods => Get<List<string>>(() => WrapResponseMethods);
    /// <summary>Specifies whether to wrap success responses to allow full response access (experimental).</summary>
    [Argument(Format = "/WrapResponses:{value}")] public bool? WrapResponses => Get<bool?>(() => WrapResponses);
    /// <summary>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/EnumNameGeneratorType:{value}")] public string EnumNameGeneratorType => Get<string>(() => EnumNameGeneratorType);
    /// <summary>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/PropertyNameGeneratorType:{value}")] public string PropertyNameGeneratorType => Get<string>(() => PropertyNameGeneratorType);
    /// <summary>The Liquid template directory (experimental).</summary>
    [Argument(Format = "/TemplateDirectory:{value}")] public string TemplateDirectory => Get<string>(() => TemplateDirectory);
    /// <summary>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</summary>
    [Argument(Format = "/TypeNameGenerator:{value}")] public string TypeNameGenerator => Get<string>(() => TypeNameGenerator);
    /// <summary>A file path or URL to the data or the JSON data itself.</summary>
    [Argument(Format = "/Input:{value}")] public string Input => Get<string>(() => Input);
    /// <summary>Overrides the service host of the web document (optional, use '.' to remove the hostname).</summary>
    [Argument(Format = "/ServiceHost:{value}")] public string ServiceHost => Get<string>(() => ServiceHost);
    /// <summary>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</summary>
    [Argument(Format = "/ServiceSchemes:{value}")] public IReadOnlyList<string> ServiceSchemes => Get<List<string>>(() => ServiceSchemes);
    /// <summary>The output file path (optional).</summary>
    [Argument(Format = "/Output:{value}")] public string Output => Get<string>(() => Output);
}
#endregion
#region NSwagVersionSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagVersionSettingsExtensions
{
}
#endregion
#region NSwagListTypesSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagListTypesSettingsExtensions
{
    #region File
    /// <inheritdoc cref="NSwagListTypesSettings.File"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="NSwagListTypesSettings.File"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.File))]
    public static T ResetFile<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region Variables
    /// <inheritdoc cref="NSwagListTypesSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Variables))]
    public static T SetVariables<T>(this T o, IDictionary<string, object> v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.Variables, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="NSwagListTypesSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Variables))]
    public static T SetVariable<T>(this T o, string k, object v) where T : NSwagListTypesSettings => o.Modify(b => b.SetDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Variables))]
    public static T AddVariable<T>(this T o, string k, object v) where T : NSwagListTypesSettings => o.Modify(b => b.AddDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Variables))]
    public static T RemoveVariable<T>(this T o, string k) where T : NSwagListTypesSettings => o.Modify(b => b.RemoveDictionary(() => o.Variables, k));
    /// <inheritdoc cref="NSwagListTypesSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Variables))]
    public static T ClearVariables<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.ClearDictionary(() => o.Variables));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListTypesSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagListTypesSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagListTypesSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagListTypesSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListTypesSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListTypesSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagListTypesSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagListTypesSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagListTypesSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagListTypesSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagListTypesSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListTypesSettings), Property = nameof(NSwagListTypesSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagListTypesSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagListWebApiControllersSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagListWebApiControllersSettingsExtensions
{
    #region File
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.File"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.File))]
    public static T SetFile<T>(this T o, string v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.File, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.File"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.File))]
    public static T ResetFile<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Remove(() => o.File));
    #endregion
    #region Variables
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Variables))]
    public static T SetVariables<T>(this T o, IDictionary<string, object> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.Variables, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Variables))]
    public static T SetVariable<T>(this T o, string k, object v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.SetDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Variables))]
    public static T AddVariable<T>(this T o, string k, object v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.AddDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Variables))]
    public static T RemoveVariable<T>(this T o, string k) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.RemoveDictionary(() => o.Variables, k));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Variables))]
    public static T ClearVariables<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.ClearDictionary(() => o.Variables));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagListWebApiControllersSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagListWebApiControllersSettings), Property = nameof(NSwagListWebApiControllersSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagListWebApiControllersSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagTypesToOpenApiSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagTypesToOpenApiSettingsExtensions
{
    #region Output
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToOpenApiSettings), Property = nameof(NSwagTypesToOpenApiSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagTypesToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagTypesToSwaggerSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagTypesToSwaggerSettingsExtensions
{
    #region AllowReferencesWithProperties
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AllowReferencesWithProperties))]
    public static T SetAllowReferencesWithProperties<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ResetAllowReferencesWithProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.AllowReferencesWithProperties));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AllowReferencesWithProperties))]
    public static T EnableAllowReferencesWithProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AllowReferencesWithProperties))]
    public static T DisableAllowReferencesWithProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ToggleAllowReferencesWithProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, !o.AllowReferencesWithProperties));
    #endregion
    #region ClassNames
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T SetClassNames<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T SetClassNames<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T AddClassNames<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T AddClassNames<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T RemoveClassNames<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T RemoveClassNames<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ClassNames, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ClassNames"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ClassNames))]
    public static T ClearClassNames<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ClassNames));
    #endregion
    #region DefaultDictionaryValueReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T SetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultDictionaryValueReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T ResetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultDictionaryValueReferenceTypeNullHandling));
    #endregion
    #region DefaultEnumHandling
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultEnumHandling))]
    public static T SetDefaultEnumHandling<T>(this T o, EnumHandling v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultEnumHandling, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultEnumHandling))]
    public static T ResetDefaultEnumHandling<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultEnumHandling));
    #endregion
    #region DefaultPropertyNameHandling
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T SetDefaultPropertyNameHandling<T>(this T o, PropertyNameHandling v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultPropertyNameHandling, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T ResetDefaultPropertyNameHandling<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultPropertyNameHandling));
    #endregion
    #region DefaultReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T SetDefaultReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T ResetDefaultReferenceTypeNullHandling<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultReferenceTypeNullHandling));
    #endregion
    #region FlattenInheritanceHierarchy
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T SetFlattenInheritanceHierarchy<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ResetFlattenInheritanceHierarchy<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.FlattenInheritanceHierarchy));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T EnableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T DisableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ToggleFlattenInheritanceHierarchy<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, !o.FlattenInheritanceHierarchy));
    #endregion
    #region GenerateKnownTypes
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateKnownTypes))]
    public static T SetGenerateKnownTypes<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateKnownTypes))]
    public static T ResetGenerateKnownTypes<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateKnownTypes));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateKnownTypes))]
    public static T EnableGenerateKnownTypes<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateKnownTypes))]
    public static T DisableGenerateKnownTypes<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateKnownTypes))]
    public static T ToggleGenerateKnownTypes<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, !o.GenerateKnownTypes));
    #endregion
    #region GenerateXmlObjects
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateXmlObjects))]
    public static T SetGenerateXmlObjects<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateXmlObjects))]
    public static T ResetGenerateXmlObjects<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateXmlObjects));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateXmlObjects))]
    public static T EnableGenerateXmlObjects<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateXmlObjects))]
    public static T DisableGenerateXmlObjects<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.GenerateXmlObjects))]
    public static T ToggleGenerateXmlObjects<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, !o.GenerateXmlObjects));
    #endregion
    #region IgnoreObsoleteProperties
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T SetIgnoreObsoleteProperties<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ResetIgnoreObsoleteProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.IgnoreObsoleteProperties));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T EnableIgnoreObsoleteProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T DisableIgnoreObsoleteProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ToggleIgnoreObsoleteProperties<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, !o.IgnoreObsoleteProperties));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagTypesToSwaggerSettings), Property = nameof(NSwagTypesToSwaggerSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagTypesToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagWebApiToOpenApiSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagWebApiToOpenApiSettingsExtensions
{
    #region AllowNullableBodyParameters
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters))]
    public static T SetAllowNullableBodyParameters<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters))]
    public static T ResetAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.AllowNullableBodyParameters));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters))]
    public static T EnableAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters))]
    public static T DisableAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters))]
    public static T ToggleAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, !o.AllowNullableBodyParameters));
    #endregion
    #region AllowReferencesWithProperties
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties))]
    public static T SetAllowReferencesWithProperties<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties))]
    public static T ResetAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.AllowReferencesWithProperties));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties))]
    public static T EnableAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties))]
    public static T DisableAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties))]
    public static T ToggleAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, !o.AllowReferencesWithProperties));
    #endregion
    #region AspNetCoreEnvironment
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment))]
    public static T SetAspNetCoreEnvironment<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AspNetCoreEnvironment, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment))]
    public static T ResetAspNetCoreEnvironment<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.AspNetCoreEnvironment));
    #endregion
    #region ContractResolver
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ContractResolver))]
    public static T SetContractResolver<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ContractResolver, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ContractResolver))]
    public static T ResetContractResolver<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.ContractResolver));
    #endregion
    #region CreateWebHostBuilderMethod
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod))]
    public static T SetCreateWebHostBuilderMethod<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.CreateWebHostBuilderMethod, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod))]
    public static T ResetCreateWebHostBuilderMethod<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.CreateWebHostBuilderMethod));
    #endregion
    #region DefaultDictionaryValueReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T SetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultDictionaryValueReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T ResetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultDictionaryValueReferenceTypeNullHandling));
    #endregion
    #region DefaultEnumHandling
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultEnumHandling))]
    public static T SetDefaultEnumHandling<T>(this T o, EnumHandling v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultEnumHandling, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultEnumHandling))]
    public static T ResetDefaultEnumHandling<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultEnumHandling));
    #endregion
    #region DefaultPropertyNameHandling
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling))]
    public static T SetDefaultPropertyNameHandling<T>(this T o, PropertyNameHandling v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultPropertyNameHandling, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling))]
    public static T ResetDefaultPropertyNameHandling<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultPropertyNameHandling));
    #endregion
    #region DefaultReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling))]
    public static T SetDefaultReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling))]
    public static T ResetDefaultReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultReferenceTypeNullHandling));
    #endregion
    #region DefaultResponseReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T SetDefaultResponseReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultResponseReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T ResetDefaultResponseReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultResponseReferenceTypeNullHandling));
    #endregion
    #region DocumentName
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentName))]
    public static T SetDocumentName<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentName, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentName))]
    public static T ResetDocumentName<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DocumentName));
    #endregion
    #region DocumentProcessors
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentProcessors))]
    public static T ClearDocumentProcessors<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.DocumentProcessors));
    #endregion
    #region DocumentTemplate
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentTemplate))]
    public static T SetDocumentTemplate<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentTemplate, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.DocumentTemplate))]
    public static T ResetDocumentTemplate<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.DocumentTemplate));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region FlattenInheritanceHierarchy
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T SetFlattenInheritanceHierarchy<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T ResetFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.FlattenInheritanceHierarchy));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T EnableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T DisableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T ToggleFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, !o.FlattenInheritanceHierarchy));
    #endregion
    #region GenerateAbstractProperties
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractProperties))]
    public static T SetGenerateAbstractProperties<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractProperties))]
    public static T ResetGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractProperties));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractProperties))]
    public static T EnableGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractProperties))]
    public static T DisableGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractProperties))]
    public static T ToggleGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, !o.GenerateAbstractProperties));
    #endregion
    #region GenerateAbstractSchemas
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas))]
    public static T SetGenerateAbstractSchemas<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas))]
    public static T ResetGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractSchemas));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas))]
    public static T EnableGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas))]
    public static T DisableGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas))]
    public static T ToggleGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, !o.GenerateAbstractSchemas));
    #endregion
    #region GenerateEnumMappingDescription
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T SetGenerateEnumMappingDescription<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T ResetGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateEnumMappingDescription));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T EnableGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T DisableGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T ToggleGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, !o.GenerateEnumMappingDescription));
    #endregion
    #region GenerateKnownTypes
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateKnownTypes))]
    public static T SetGenerateKnownTypes<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateKnownTypes))]
    public static T ResetGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateKnownTypes));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateKnownTypes))]
    public static T EnableGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateKnownTypes))]
    public static T DisableGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateKnownTypes))]
    public static T ToggleGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, !o.GenerateKnownTypes));
    #endregion
    #region GenerateXmlObjects
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateXmlObjects))]
    public static T SetGenerateXmlObjects<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateXmlObjects))]
    public static T ResetGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateXmlObjects));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateXmlObjects))]
    public static T EnableGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateXmlObjects))]
    public static T DisableGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.GenerateXmlObjects))]
    public static T ToggleGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, !o.GenerateXmlObjects));
    #endregion
    #region IgnoreObsoleteProperties
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T SetIgnoreObsoleteProperties<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T ResetIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.IgnoreObsoleteProperties));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T EnableIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T DisableIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T ToggleIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, !o.IgnoreObsoleteProperties));
    #endregion
    #region InfoDescription
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoDescription))]
    public static T SetInfoDescription<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoDescription, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoDescription))]
    public static T ResetInfoDescription<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoDescription));
    #endregion
    #region InfoTitle
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoTitle))]
    public static T SetInfoTitle<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoTitle, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoTitle))]
    public static T ResetInfoTitle<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoTitle));
    #endregion
    #region InfoVersion
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoVersion))]
    public static T SetInfoVersion<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoVersion, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.InfoVersion))]
    public static T ResetInfoVersion<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoVersion));
    #endregion
    #region OperationProcessors
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OperationProcessors))]
    public static T ClearOperationProcessors<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.OperationProcessors));
    #endregion
    #region SchemaNameGenerator
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.SchemaNameGenerator))]
    public static T SetSchemaNameGenerator<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.SchemaNameGenerator, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.SchemaNameGenerator))]
    public static T ResetSchemaNameGenerator<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.SchemaNameGenerator));
    #endregion
    #region SerializerSettings
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.SerializerSettings))]
    public static T SetSerializerSettings<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.SerializerSettings, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.SerializerSettings))]
    public static T ResetSerializerSettings<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.SerializerSettings));
    #endregion
    #region ServiceBasePath
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceBasePath))]
    public static T SetServiceBasePath<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceBasePath, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceBasePath))]
    public static T ResetServiceBasePath<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.ServiceBasePath));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Startup
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Startup))]
    public static T SetStartup<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.Startup, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Startup))]
    public static T ResetStartup<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.Startup));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region UseDocumentProvider
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseDocumentProvider))]
    public static T SetUseDocumentProvider<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseDocumentProvider))]
    public static T ResetUseDocumentProvider<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.UseDocumentProvider));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseDocumentProvider))]
    public static T EnableUseDocumentProvider<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseDocumentProvider))]
    public static T DisableUseDocumentProvider<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseDocumentProvider))]
    public static T ToggleUseDocumentProvider<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, !o.UseDocumentProvider));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToOpenApiSettings), Property = nameof(NSwagWebApiToOpenApiSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagWebApiToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagWebApiToSwaggerSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagWebApiToSwaggerSettingsExtensions
{
    #region AddMissingPathParameters
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AddMissingPathParameters))]
    public static T SetAddMissingPathParameters<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AddMissingPathParameters, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AddMissingPathParameters))]
    public static T ResetAddMissingPathParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AddMissingPathParameters));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AddMissingPathParameters))]
    public static T EnableAddMissingPathParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AddMissingPathParameters, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AddMissingPathParameters))]
    public static T DisableAddMissingPathParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AddMissingPathParameters, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AddMissingPathParameters))]
    public static T ToggleAddMissingPathParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AddMissingPathParameters, !o.AddMissingPathParameters));
    #endregion
    #region AspNetCore
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCore"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCore))]
    public static T SetAspNetCore<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCore, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCore"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCore))]
    public static T ResetAspNetCore<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AspNetCore));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCore"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCore))]
    public static T EnableAspNetCore<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCore, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCore"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCore))]
    public static T DisableAspNetCore<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCore, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCore"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCore))]
    public static T ToggleAspNetCore<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCore, !o.AspNetCore));
    #endregion
    #region Controller
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controller"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controller))]
    public static T SetController<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Controller, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controller"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controller))]
    public static T ResetController<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.Controller));
    #endregion
    #region Controllers
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T SetControllers<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T SetControllers<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T AddControllers<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T AddControllers<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T RemoveControllers<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T RemoveControllers<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Controllers, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Controllers"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Controllers))]
    public static T ClearControllers<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.Controllers));
    #endregion
    #region DefaultUrlTemplate
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultUrlTemplate))]
    public static T SetDefaultUrlTemplate<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultUrlTemplate, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultUrlTemplate))]
    public static T ResetDefaultUrlTemplate<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultUrlTemplate));
    #endregion
    #region IncludedVersions
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T SetIncludedVersions<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T SetIncludedVersions<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T AddIncludedVersions<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T AddIncludedVersions<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T RemoveIncludedVersions<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T RemoveIncludedVersions<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.IncludedVersions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IncludedVersions))]
    public static T ClearIncludedVersions<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.IncludedVersions));
    #endregion
    #region ResolveJsonOptions
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ResolveJsonOptions))]
    public static T SetResolveJsonOptions<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ResolveJsonOptions, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ResolveJsonOptions))]
    public static T ResetResolveJsonOptions<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.ResolveJsonOptions));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ResolveJsonOptions))]
    public static T EnableResolveJsonOptions<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ResolveJsonOptions, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ResolveJsonOptions))]
    public static T DisableResolveJsonOptions<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ResolveJsonOptions, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ResolveJsonOptions))]
    public static T ToggleResolveJsonOptions<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ResolveJsonOptions, !o.ResolveJsonOptions));
    #endregion
    #region AllowNullableBodyParameters
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters))]
    public static T SetAllowNullableBodyParameters<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters))]
    public static T ResetAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AllowNullableBodyParameters));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters))]
    public static T EnableAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters))]
    public static T DisableAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters))]
    public static T ToggleAllowNullableBodyParameters<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, !o.AllowNullableBodyParameters));
    #endregion
    #region AllowReferencesWithProperties
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties))]
    public static T SetAllowReferencesWithProperties<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ResetAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AllowReferencesWithProperties));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties))]
    public static T EnableAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties))]
    public static T DisableAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ToggleAllowReferencesWithProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, !o.AllowReferencesWithProperties));
    #endregion
    #region AspNetCoreEnvironment
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment))]
    public static T SetAspNetCoreEnvironment<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCoreEnvironment, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment))]
    public static T ResetAspNetCoreEnvironment<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AspNetCoreEnvironment));
    #endregion
    #region ContractResolver
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ContractResolver))]
    public static T SetContractResolver<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ContractResolver, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ContractResolver))]
    public static T ResetContractResolver<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.ContractResolver));
    #endregion
    #region CreateWebHostBuilderMethod
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod))]
    public static T SetCreateWebHostBuilderMethod<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.CreateWebHostBuilderMethod, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod))]
    public static T ResetCreateWebHostBuilderMethod<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.CreateWebHostBuilderMethod));
    #endregion
    #region DefaultDictionaryValueReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T SetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultDictionaryValueReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T ResetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultDictionaryValueReferenceTypeNullHandling));
    #endregion
    #region DefaultEnumHandling
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultEnumHandling))]
    public static T SetDefaultEnumHandling<T>(this T o, EnumHandling v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultEnumHandling, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultEnumHandling))]
    public static T ResetDefaultEnumHandling<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultEnumHandling));
    #endregion
    #region DefaultPropertyNameHandling
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T SetDefaultPropertyNameHandling<T>(this T o, PropertyNameHandling v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultPropertyNameHandling, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T ResetDefaultPropertyNameHandling<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultPropertyNameHandling));
    #endregion
    #region DefaultReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T SetDefaultReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T ResetDefaultReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultReferenceTypeNullHandling));
    #endregion
    #region DefaultResponseReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T SetDefaultResponseReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultResponseReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T ResetDefaultResponseReferenceTypeNullHandling<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultResponseReferenceTypeNullHandling));
    #endregion
    #region DocumentName
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentName))]
    public static T SetDocumentName<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentName, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentName))]
    public static T ResetDocumentName<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DocumentName));
    #endregion
    #region DocumentProcessors
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentProcessors))]
    public static T ClearDocumentProcessors<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.DocumentProcessors));
    #endregion
    #region DocumentTemplate
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentTemplate))]
    public static T SetDocumentTemplate<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentTemplate, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.DocumentTemplate))]
    public static T ResetDocumentTemplate<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.DocumentTemplate));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region FlattenInheritanceHierarchy
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T SetFlattenInheritanceHierarchy<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ResetFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.FlattenInheritanceHierarchy));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T EnableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T DisableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ToggleFlattenInheritanceHierarchy<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, !o.FlattenInheritanceHierarchy));
    #endregion
    #region GenerateAbstractProperties
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractProperties))]
    public static T SetGenerateAbstractProperties<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractProperties))]
    public static T ResetGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractProperties));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractProperties))]
    public static T EnableGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractProperties))]
    public static T DisableGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractProperties))]
    public static T ToggleGenerateAbstractProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, !o.GenerateAbstractProperties));
    #endregion
    #region GenerateAbstractSchemas
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas))]
    public static T SetGenerateAbstractSchemas<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas))]
    public static T ResetGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractSchemas));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas))]
    public static T EnableGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas))]
    public static T DisableGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas))]
    public static T ToggleGenerateAbstractSchemas<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, !o.GenerateAbstractSchemas));
    #endregion
    #region GenerateEnumMappingDescription
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T SetGenerateEnumMappingDescription<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T ResetGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateEnumMappingDescription));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T EnableGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T DisableGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T ToggleGenerateEnumMappingDescription<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, !o.GenerateEnumMappingDescription));
    #endregion
    #region GenerateKnownTypes
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateKnownTypes))]
    public static T SetGenerateKnownTypes<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateKnownTypes))]
    public static T ResetGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateKnownTypes));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateKnownTypes))]
    public static T EnableGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateKnownTypes))]
    public static T DisableGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateKnownTypes))]
    public static T ToggleGenerateKnownTypes<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, !o.GenerateKnownTypes));
    #endregion
    #region GenerateXmlObjects
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateXmlObjects))]
    public static T SetGenerateXmlObjects<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateXmlObjects))]
    public static T ResetGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateXmlObjects));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateXmlObjects))]
    public static T EnableGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateXmlObjects))]
    public static T DisableGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.GenerateXmlObjects))]
    public static T ToggleGenerateXmlObjects<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, !o.GenerateXmlObjects));
    #endregion
    #region IgnoreObsoleteProperties
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T SetIgnoreObsoleteProperties<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ResetIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.IgnoreObsoleteProperties));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T EnableIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T DisableIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ToggleIgnoreObsoleteProperties<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, !o.IgnoreObsoleteProperties));
    #endregion
    #region InfoDescription
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoDescription))]
    public static T SetInfoDescription<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoDescription, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoDescription))]
    public static T ResetInfoDescription<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoDescription));
    #endregion
    #region InfoTitle
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoTitle))]
    public static T SetInfoTitle<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoTitle, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoTitle))]
    public static T ResetInfoTitle<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoTitle));
    #endregion
    #region InfoVersion
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoVersion))]
    public static T SetInfoVersion<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoVersion, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.InfoVersion))]
    public static T ResetInfoVersion<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoVersion));
    #endregion
    #region OperationProcessors
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OperationProcessors))]
    public static T ClearOperationProcessors<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.OperationProcessors));
    #endregion
    #region SchemaNameGenerator
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.SchemaNameGenerator))]
    public static T SetSchemaNameGenerator<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.SchemaNameGenerator, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.SchemaNameGenerator))]
    public static T ResetSchemaNameGenerator<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.SchemaNameGenerator));
    #endregion
    #region SerializerSettings
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.SerializerSettings))]
    public static T SetSerializerSettings<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.SerializerSettings, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.SerializerSettings))]
    public static T ResetSerializerSettings<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.SerializerSettings));
    #endregion
    #region ServiceBasePath
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceBasePath))]
    public static T SetServiceBasePath<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceBasePath, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceBasePath))]
    public static T ResetServiceBasePath<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.ServiceBasePath));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Startup
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Startup))]
    public static T SetStartup<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Startup, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Startup))]
    public static T ResetStartup<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.Startup));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region UseDocumentProvider
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseDocumentProvider))]
    public static T SetUseDocumentProvider<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseDocumentProvider))]
    public static T ResetUseDocumentProvider<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.UseDocumentProvider));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseDocumentProvider))]
    public static T EnableUseDocumentProvider<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseDocumentProvider))]
    public static T DisableUseDocumentProvider<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseDocumentProvider))]
    public static T ToggleUseDocumentProvider<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, !o.UseDocumentProvider));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagWebApiToSwaggerSettings), Property = nameof(NSwagWebApiToSwaggerSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagWebApiToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagAspNetCoreToOpenApiSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagAspNetCoreToOpenApiSettingsExtensions
{
    #region AllowNullableBodyParameters
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters))]
    public static T SetAllowNullableBodyParameters<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters))]
    public static T ResetAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.AllowNullableBodyParameters));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters))]
    public static T EnableAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters))]
    public static T DisableAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters))]
    public static T ToggleAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, !o.AllowNullableBodyParameters));
    #endregion
    #region AllowReferencesWithProperties
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties))]
    public static T SetAllowReferencesWithProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties))]
    public static T ResetAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.AllowReferencesWithProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties))]
    public static T EnableAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties))]
    public static T DisableAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties))]
    public static T ToggleAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, !o.AllowReferencesWithProperties));
    #endregion
    #region AspNetCoreEnvironment
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment))]
    public static T SetAspNetCoreEnvironment<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AspNetCoreEnvironment, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment))]
    public static T ResetAspNetCoreEnvironment<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.AspNetCoreEnvironment));
    #endregion
    #region ContractResolver
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ContractResolver))]
    public static T SetContractResolver<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ContractResolver, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ContractResolver))]
    public static T ResetContractResolver<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.ContractResolver));
    #endregion
    #region CreateWebHostBuilderMethod
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod))]
    public static T SetCreateWebHostBuilderMethod<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.CreateWebHostBuilderMethod, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod))]
    public static T ResetCreateWebHostBuilderMethod<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.CreateWebHostBuilderMethod));
    #endregion
    #region DefaultDictionaryValueReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T SetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultDictionaryValueReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T ResetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultDictionaryValueReferenceTypeNullHandling));
    #endregion
    #region DefaultEnumHandling
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling))]
    public static T SetDefaultEnumHandling<T>(this T o, EnumHandling v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultEnumHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling))]
    public static T ResetDefaultEnumHandling<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultEnumHandling));
    #endregion
    #region DefaultPropertyNameHandling
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling))]
    public static T SetDefaultPropertyNameHandling<T>(this T o, PropertyNameHandling v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultPropertyNameHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling))]
    public static T ResetDefaultPropertyNameHandling<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultPropertyNameHandling));
    #endregion
    #region DefaultReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling))]
    public static T SetDefaultReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling))]
    public static T ResetDefaultReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultReferenceTypeNullHandling));
    #endregion
    #region DefaultResponseReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T SetDefaultResponseReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DefaultResponseReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T ResetDefaultResponseReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DefaultResponseReferenceTypeNullHandling));
    #endregion
    #region DocumentName
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentName))]
    public static T SetDocumentName<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentName, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentName))]
    public static T ResetDocumentName<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DocumentName));
    #endregion
    #region DocumentProcessors
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentProcessors))]
    public static T ClearDocumentProcessors<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.DocumentProcessors));
    #endregion
    #region DocumentTemplate
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentTemplate))]
    public static T SetDocumentTemplate<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.DocumentTemplate, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.DocumentTemplate))]
    public static T ResetDocumentTemplate<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.DocumentTemplate));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region FlattenInheritanceHierarchy
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T SetFlattenInheritanceHierarchy<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T ResetFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.FlattenInheritanceHierarchy));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T EnableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T DisableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy))]
    public static T ToggleFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, !o.FlattenInheritanceHierarchy));
    #endregion
    #region GenerateAbstractProperties
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties))]
    public static T SetGenerateAbstractProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties))]
    public static T ResetGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties))]
    public static T EnableGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties))]
    public static T DisableGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties))]
    public static T ToggleGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, !o.GenerateAbstractProperties));
    #endregion
    #region GenerateAbstractSchemas
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas))]
    public static T SetGenerateAbstractSchemas<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas))]
    public static T ResetGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractSchemas));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas))]
    public static T EnableGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas))]
    public static T DisableGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas))]
    public static T ToggleGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, !o.GenerateAbstractSchemas));
    #endregion
    #region GenerateEnumMappingDescription
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T SetGenerateEnumMappingDescription<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T ResetGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateEnumMappingDescription));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T EnableGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T DisableGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription))]
    public static T ToggleGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, !o.GenerateEnumMappingDescription));
    #endregion
    #region GenerateKnownTypes
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes))]
    public static T SetGenerateKnownTypes<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes))]
    public static T ResetGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateKnownTypes));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes))]
    public static T EnableGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes))]
    public static T DisableGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes))]
    public static T ToggleGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, !o.GenerateKnownTypes));
    #endregion
    #region GenerateXmlObjects
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects))]
    public static T SetGenerateXmlObjects<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects))]
    public static T ResetGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.GenerateXmlObjects));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects))]
    public static T EnableGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects))]
    public static T DisableGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects))]
    public static T ToggleGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, !o.GenerateXmlObjects));
    #endregion
    #region IgnoreObsoleteProperties
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T SetIgnoreObsoleteProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T ResetIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.IgnoreObsoleteProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T EnableIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T DisableIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties))]
    public static T ToggleIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, !o.IgnoreObsoleteProperties));
    #endregion
    #region InfoDescription
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoDescription))]
    public static T SetInfoDescription<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoDescription, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoDescription))]
    public static T ResetInfoDescription<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoDescription));
    #endregion
    #region InfoTitle
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoTitle))]
    public static T SetInfoTitle<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoTitle, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoTitle))]
    public static T ResetInfoTitle<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoTitle));
    #endregion
    #region InfoVersion
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoVersion))]
    public static T SetInfoVersion<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.InfoVersion, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.InfoVersion))]
    public static T ResetInfoVersion<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.InfoVersion));
    #endregion
    #region OperationProcessors
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OperationProcessors))]
    public static T ClearOperationProcessors<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.OperationProcessors));
    #endregion
    #region SchemaNameGenerator
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator))]
    public static T SetSchemaNameGenerator<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.SchemaNameGenerator, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator))]
    public static T ResetSchemaNameGenerator<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.SchemaNameGenerator));
    #endregion
    #region SerializerSettings
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.SerializerSettings))]
    public static T SetSerializerSettings<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.SerializerSettings, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.SerializerSettings))]
    public static T ResetSerializerSettings<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.SerializerSettings));
    #endregion
    #region ServiceBasePath
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceBasePath))]
    public static T SetServiceBasePath<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceBasePath, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceBasePath))]
    public static T ResetServiceBasePath<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.ServiceBasePath));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Startup
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Startup))]
    public static T SetStartup<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.Startup, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Startup))]
    public static T ResetStartup<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.Startup));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region UseDocumentProvider
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider))]
    public static T SetUseDocumentProvider<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider))]
    public static T ResetUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.UseDocumentProvider));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider))]
    public static T EnableUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider))]
    public static T DisableUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider))]
    public static T ToggleUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, !o.UseDocumentProvider));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToOpenApiSettings), Property = nameof(NSwagAspNetCoreToOpenApiSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToOpenApiSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagAspNetCoreToSwaggerSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagAspNetCoreToSwaggerSettingsExtensions
{
    #region ApiGroupNames
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T SetApiGroupNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T SetApiGroupNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T AddApiGroupNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T AddApiGroupNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T RemoveApiGroupNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T RemoveApiGroupNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ApiGroupNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ApiGroupNames))]
    public static T ClearApiGroupNames<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ApiGroupNames));
    #endregion
    #region Configuration
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Configuration))]
    public static T SetConfiguration<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Configuration, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Configuration))]
    public static T ResetConfiguration<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Configuration));
    #endregion
    #region MSBuildProjectExtensionsPath
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath))]
    public static T SetMSBuildProjectExtensionsPath<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.MSBuildProjectExtensionsPath, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath))]
    public static T ResetMSBuildProjectExtensionsPath<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.MSBuildProjectExtensionsPath));
    #endregion
    #region NoBuild
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NoBuild))]
    public static T SetNoBuild<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.NoBuild, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NoBuild))]
    public static T ResetNoBuild<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.NoBuild));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NoBuild))]
    public static T EnableNoBuild<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.NoBuild, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NoBuild))]
    public static T DisableNoBuild<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.NoBuild, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NoBuild))]
    public static T ToggleNoBuild<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.NoBuild, !o.NoBuild));
    #endregion
    #region NSwagWorkingDirectory
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory))]
    public static T SetNSwagWorkingDirectory<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.NSwagWorkingDirectory, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory))]
    public static T ResetNSwagWorkingDirectory<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.NSwagWorkingDirectory));
    #endregion
    #region Project
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Project"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Project))]
    public static T SetProject<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Project, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Project"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Project))]
    public static T ResetProject<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Project));
    #endregion
    #region RequireParametersWithoutDefault
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault))]
    public static T SetRequireParametersWithoutDefault<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.RequireParametersWithoutDefault, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault))]
    public static T ResetRequireParametersWithoutDefault<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.RequireParametersWithoutDefault));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault))]
    public static T EnableRequireParametersWithoutDefault<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.RequireParametersWithoutDefault, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault))]
    public static T DisableRequireParametersWithoutDefault<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.RequireParametersWithoutDefault, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault))]
    public static T ToggleRequireParametersWithoutDefault<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.RequireParametersWithoutDefault, !o.RequireParametersWithoutDefault));
    #endregion
    #region Runtime
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Runtime))]
    public static T SetRuntime<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Runtime, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Runtime))]
    public static T ResetRuntime<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Runtime));
    #endregion
    #region TargetFramework
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.TargetFramework))]
    public static T SetTargetFramework<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.TargetFramework, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.TargetFramework))]
    public static T ResetTargetFramework<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.TargetFramework));
    #endregion
    #region Verbose
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Verbose))]
    public static T SetVerbose<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Verbose, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Verbose))]
    public static T ResetVerbose<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Verbose));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Verbose))]
    public static T EnableVerbose<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Verbose, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Verbose))]
    public static T DisableVerbose<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Verbose, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Verbose))]
    public static T ToggleVerbose<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Verbose, !o.Verbose));
    #endregion
    #region AllowNullableBodyParameters
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters))]
    public static T SetAllowNullableBodyParameters<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters))]
    public static T ResetAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.AllowNullableBodyParameters));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters))]
    public static T EnableAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters))]
    public static T DisableAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters))]
    public static T ToggleAllowNullableBodyParameters<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowNullableBodyParameters, !o.AllowNullableBodyParameters));
    #endregion
    #region AllowReferencesWithProperties
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties))]
    public static T SetAllowReferencesWithProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ResetAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.AllowReferencesWithProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties))]
    public static T EnableAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties))]
    public static T DisableAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties))]
    public static T ToggleAllowReferencesWithProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AllowReferencesWithProperties, !o.AllowReferencesWithProperties));
    #endregion
    #region AspNetCoreEnvironment
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment))]
    public static T SetAspNetCoreEnvironment<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AspNetCoreEnvironment, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment))]
    public static T ResetAspNetCoreEnvironment<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.AspNetCoreEnvironment));
    #endregion
    #region ContractResolver
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ContractResolver))]
    public static T SetContractResolver<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ContractResolver, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ContractResolver))]
    public static T ResetContractResolver<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.ContractResolver));
    #endregion
    #region CreateWebHostBuilderMethod
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod))]
    public static T SetCreateWebHostBuilderMethod<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.CreateWebHostBuilderMethod, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod))]
    public static T ResetCreateWebHostBuilderMethod<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.CreateWebHostBuilderMethod));
    #endregion
    #region DefaultDictionaryValueReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T SetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultDictionaryValueReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling))]
    public static T ResetDefaultDictionaryValueReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultDictionaryValueReferenceTypeNullHandling));
    #endregion
    #region DefaultEnumHandling
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling))]
    public static T SetDefaultEnumHandling<T>(this T o, EnumHandling v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultEnumHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling))]
    public static T ResetDefaultEnumHandling<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultEnumHandling));
    #endregion
    #region DefaultPropertyNameHandling
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T SetDefaultPropertyNameHandling<T>(this T o, PropertyNameHandling v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultPropertyNameHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling))]
    public static T ResetDefaultPropertyNameHandling<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultPropertyNameHandling));
    #endregion
    #region DefaultReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T SetDefaultReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling))]
    public static T ResetDefaultReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultReferenceTypeNullHandling));
    #endregion
    #region DefaultResponseReferenceTypeNullHandling
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T SetDefaultResponseReferenceTypeNullHandling<T>(this T o, ReferenceTypeNullHandling v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DefaultResponseReferenceTypeNullHandling, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling))]
    public static T ResetDefaultResponseReferenceTypeNullHandling<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DefaultResponseReferenceTypeNullHandling));
    #endregion
    #region DocumentName
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentName))]
    public static T SetDocumentName<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentName, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentName))]
    public static T ResetDocumentName<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DocumentName));
    #endregion
    #region DocumentProcessors
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T SetDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T AddDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T RemoveDocumentProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.DocumentProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentProcessors))]
    public static T ClearDocumentProcessors<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.DocumentProcessors));
    #endregion
    #region DocumentTemplate
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentTemplate))]
    public static T SetDocumentTemplate<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.DocumentTemplate, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.DocumentTemplate))]
    public static T ResetDocumentTemplate<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.DocumentTemplate));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region FlattenInheritanceHierarchy
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T SetFlattenInheritanceHierarchy<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ResetFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.FlattenInheritanceHierarchy));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T EnableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T DisableFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy))]
    public static T ToggleFlattenInheritanceHierarchy<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.FlattenInheritanceHierarchy, !o.FlattenInheritanceHierarchy));
    #endregion
    #region GenerateAbstractProperties
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties))]
    public static T SetGenerateAbstractProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties))]
    public static T ResetGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties))]
    public static T EnableGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties))]
    public static T DisableGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties))]
    public static T ToggleGenerateAbstractProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractProperties, !o.GenerateAbstractProperties));
    #endregion
    #region GenerateAbstractSchemas
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas))]
    public static T SetGenerateAbstractSchemas<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas))]
    public static T ResetGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateAbstractSchemas));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas))]
    public static T EnableGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas))]
    public static T DisableGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas))]
    public static T ToggleGenerateAbstractSchemas<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateAbstractSchemas, !o.GenerateAbstractSchemas));
    #endregion
    #region GenerateEnumMappingDescription
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T SetGenerateEnumMappingDescription<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T ResetGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateEnumMappingDescription));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T EnableGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T DisableGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription))]
    public static T ToggleGenerateEnumMappingDescription<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateEnumMappingDescription, !o.GenerateEnumMappingDescription));
    #endregion
    #region GenerateKnownTypes
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes))]
    public static T SetGenerateKnownTypes<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes))]
    public static T ResetGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateKnownTypes));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes))]
    public static T EnableGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes))]
    public static T DisableGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes))]
    public static T ToggleGenerateKnownTypes<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateKnownTypes, !o.GenerateKnownTypes));
    #endregion
    #region GenerateXmlObjects
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects))]
    public static T SetGenerateXmlObjects<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects))]
    public static T ResetGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.GenerateXmlObjects));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects))]
    public static T EnableGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects))]
    public static T DisableGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects))]
    public static T ToggleGenerateXmlObjects<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.GenerateXmlObjects, !o.GenerateXmlObjects));
    #endregion
    #region IgnoreObsoleteProperties
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T SetIgnoreObsoleteProperties<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ResetIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.IgnoreObsoleteProperties));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T EnableIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T DisableIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties))]
    public static T ToggleIgnoreObsoleteProperties<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.IgnoreObsoleteProperties, !o.IgnoreObsoleteProperties));
    #endregion
    #region InfoDescription
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoDescription))]
    public static T SetInfoDescription<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoDescription, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoDescription))]
    public static T ResetInfoDescription<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoDescription));
    #endregion
    #region InfoTitle
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoTitle))]
    public static T SetInfoTitle<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoTitle, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoTitle))]
    public static T ResetInfoTitle<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoTitle));
    #endregion
    #region InfoVersion
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoVersion))]
    public static T SetInfoVersion<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.InfoVersion, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.InfoVersion))]
    public static T ResetInfoVersion<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.InfoVersion));
    #endregion
    #region OperationProcessors
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T SetOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T AddOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T RemoveOperationProcessors<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.OperationProcessors, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OperationProcessors))]
    public static T ClearOperationProcessors<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.OperationProcessors));
    #endregion
    #region SchemaNameGenerator
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator))]
    public static T SetSchemaNameGenerator<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.SchemaNameGenerator, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator))]
    public static T ResetSchemaNameGenerator<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.SchemaNameGenerator));
    #endregion
    #region SerializerSettings
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.SerializerSettings))]
    public static T SetSerializerSettings<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.SerializerSettings, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.SerializerSettings))]
    public static T ResetSerializerSettings<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.SerializerSettings));
    #endregion
    #region ServiceBasePath
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceBasePath))]
    public static T SetServiceBasePath<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceBasePath, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceBasePath))]
    public static T ResetServiceBasePath<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.ServiceBasePath));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Startup
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Startup))]
    public static T SetStartup<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Startup, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Startup"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Startup))]
    public static T ResetStartup<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Startup));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region UseDocumentProvider
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider))]
    public static T SetUseDocumentProvider<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider))]
    public static T ResetUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.UseDocumentProvider));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider))]
    public static T EnableUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider))]
    public static T DisableUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider))]
    public static T ToggleUseDocumentProvider<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseDocumentProvider, !o.UseDocumentProvider));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
    #region OutputType
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OutputType))]
    public static T SetOutputType<T>(this T o, SchemaType v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.OutputType, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.OutputType))]
    public static T ResetOutputType<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.OutputType));
    #endregion
    #region Assembly
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T SetAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T AddAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T RemoveAssembly<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.Assembly, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.Assembly))]
    public static T ClearAssembly<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.Assembly));
    #endregion
    #region AssemblyConfig
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AssemblyConfig))]
    public static T SetAssemblyConfig<T>(this T o, string v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.AssemblyConfig, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.AssemblyConfig))]
    public static T ResetAssemblyConfig<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.AssemblyConfig));
    #endregion
    #region ReferencePaths
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T SetReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T AddReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.AddCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, params string[] v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T RemoveReferencePaths<T>(this T o, IEnumerable<string> v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.RemoveCollection(() => o.ReferencePaths, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.ReferencePaths))]
    public static T ClearReferencePaths<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.ClearCollection(() => o.ReferencePaths));
    #endregion
    #region UseNuGetCache
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseNuGetCache))]
    public static T SetUseNuGetCache<T>(this T o, bool? v) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, v));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseNuGetCache))]
    public static T ResetUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Remove(() => o.UseNuGetCache));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseNuGetCache))]
    public static T EnableUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, true));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseNuGetCache))]
    public static T DisableUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, false));
    /// <inheritdoc cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/>
    [Pure] [Builder(Type = typeof(NSwagAspNetCoreToSwaggerSettings), Property = nameof(NSwagAspNetCoreToSwaggerSettings.UseNuGetCache))]
    public static T ToggleUseNuGetCache<T>(this T o) where T : NSwagAspNetCoreToSwaggerSettings => o.Modify(b => b.Set(() => o.UseNuGetCache, !o.UseNuGetCache));
    #endregion
}
#endregion
#region NSwagCreateDocumentSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagCreateDocumentSettingsExtensions
{
}
#endregion
#region NSwagExecuteDocumentSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagExecuteDocumentSettingsExtensions
{
    #region Input
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region Variables
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Variables))]
    public static T SetVariables<T>(this T o, IDictionary<string, object> v) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.Set(() => o.Variables, v.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)));
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Variables))]
    public static T SetVariable<T>(this T o, string k, object v) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.SetDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Variables))]
    public static T AddVariable<T>(this T o, string k, object v) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.AddDictionary(() => o.Variables, k, v));
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Variables))]
    public static T RemoveVariable<T>(this T o, string k) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.RemoveDictionary(() => o.Variables, k));
    /// <inheritdoc cref="NSwagExecuteDocumentSettings.Variables"/>
    [Pure] [Builder(Type = typeof(NSwagExecuteDocumentSettings), Property = nameof(NSwagExecuteDocumentSettings.Variables))]
    public static T ClearVariables<T>(this T o) where T : NSwagExecuteDocumentSettings => o.Modify(b => b.ClearDictionary(() => o.Variables));
    #endregion
}
#endregion
#region NSwagJsonSchemaToCSharpSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagJsonSchemaToCSharpSettingsExtensions
{
    #region AnyType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.AnyType))]
    public static T SetAnyType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.AnyType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.AnyType))]
    public static T ResetAnyType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.AnyType));
    #endregion
    #region ArrayInstanceType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ArrayInstanceType))]
    public static T SetArrayInstanceType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.ArrayInstanceType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ArrayInstanceType))]
    public static T ResetArrayInstanceType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.ArrayInstanceType));
    #endregion
    #region ArrayType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ArrayType))]
    public static T SetArrayType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.ArrayType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ArrayType))]
    public static T ResetArrayType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.ArrayType));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region DictionaryInstanceType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType))]
    public static T SetDictionaryInstanceType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.DictionaryInstanceType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType))]
    public static T ResetDictionaryInstanceType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.DictionaryInstanceType));
    #endregion
    #region DictionaryType
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DictionaryType))]
    public static T SetDictionaryType<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.DictionaryType, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.DictionaryType))]
    public static T ResetDictionaryType<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.DictionaryType));
    #endregion
    #region GenerateOptionalPropertiesAsNullable
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable))]
    public static T SetGenerateOptionalPropertiesAsNullable<T>(this T o, bool? v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ResetGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalPropertiesAsNullable));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable))]
    public static T EnableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, true));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable))]
    public static T DisableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, false));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ToggleGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, !o.GenerateOptionalPropertiesAsNullable));
    #endregion
    #region Name
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Name"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Name"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Name))]
    public static T ResetName<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region RequiredPropertiesMustBeDefined
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined))]
    public static T SetRequiredPropertiesMustBeDefined<T>(this T o, bool? v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined))]
    public static T ResetRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.RequiredPropertiesMustBeDefined));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined))]
    public static T EnableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, true));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined))]
    public static T DisableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, false));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined))]
    public static T ToggleRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, !o.RequiredPropertiesMustBeDefined));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagJsonSchemaToCSharpSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToCSharpSettings), Property = nameof(NSwagJsonSchemaToCSharpSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagJsonSchemaToCSharpSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagJsonSchemaToTypeScriptSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagJsonSchemaToTypeScriptSettingsExtensions
{
    #region Name
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Name"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Name))]
    public static T SetName<T>(this T o, string v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.Name, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Name"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Name))]
    public static T ResetName<T>(this T o) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Remove(() => o.Name));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagJsonSchemaToTypeScriptSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagJsonSchemaToTypeScriptSettings), Property = nameof(NSwagJsonSchemaToTypeScriptSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagJsonSchemaToTypeScriptSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagOpenApiToCSharpClientSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagOpenApiToCSharpClientSettingsExtensions
{
    #region AdditionalContractNamespaceUsages
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T ClearAdditionalContractNamespaceUsages<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalContractNamespaceUsages));
    #endregion
    #region AdditionalNamespaceUsages
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T ClearAdditionalNamespaceUsages<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalNamespaceUsages));
    #endregion
    #region AnyType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AnyType))]
    public static T SetAnyType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.AnyType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.AnyType))]
    public static T ResetAnyType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.AnyType));
    #endregion
    #region ArrayBaseType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayBaseType))]
    public static T SetArrayBaseType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayBaseType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayBaseType))]
    public static T ResetArrayBaseType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayBaseType));
    #endregion
    #region ArrayInstanceType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayInstanceType))]
    public static T SetArrayInstanceType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayInstanceType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayInstanceType))]
    public static T ResetArrayInstanceType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayInstanceType));
    #endregion
    #region ArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayType))]
    public static T SetArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ArrayType))]
    public static T ResetArrayType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayType));
    #endregion
    #region ClassName
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ClassName))]
    public static T SetClassName<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClassName, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ClassName))]
    public static T ResetClassName<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClassName));
    #endregion
    #region ClassStyle
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ClassStyle))]
    public static T SetClassStyle<T>(this T o, CSharpClassStyle v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClassStyle, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ClassStyle))]
    public static T ResetClassStyle<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClassStyle));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region DateType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DateType))]
    public static T SetDateType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.DateType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DateType))]
    public static T ResetDateType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DateType));
    #endregion
    #region DictionaryBaseType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryBaseType))]
    public static T SetDictionaryBaseType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryBaseType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryBaseType))]
    public static T ResetDictionaryBaseType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryBaseType));
    #endregion
    #region DictionaryInstanceType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType))]
    public static T SetDictionaryInstanceType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryInstanceType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType))]
    public static T ResetDictionaryInstanceType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryInstanceType));
    #endregion
    #region DictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryType))]
    public static T SetDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.DictionaryType))]
    public static T ResetDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryType));
    #endregion
    #region EnforceFlagEnums
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums))]
    public static T SetEnforceFlagEnums<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums))]
    public static T ResetEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.EnforceFlagEnums));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums))]
    public static T EnableEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums))]
    public static T DisableEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums))]
    public static T ToggleEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, !o.EnforceFlagEnums));
    #endregion
    #region ExcludedParameterNames
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames))]
    public static T ClearExcludedParameterNames<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedParameterNames));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region GenerateDataAnnotations
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations))]
    public static T SetGenerateDataAnnotations<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations))]
    public static T ResetGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDataAnnotations));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations))]
    public static T EnableGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations))]
    public static T DisableGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations))]
    public static T ToggleGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, !o.GenerateDataAnnotations));
    #endregion
    #region GenerateDefaultValues
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues))]
    public static T SetGenerateDefaultValues<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues))]
    public static T ResetGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDefaultValues));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues))]
    public static T EnableGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues))]
    public static T DisableGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues))]
    public static T ToggleGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, !o.GenerateDefaultValues));
    #endregion
    #region GenerateDtoTypes
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes))]
    public static T SetGenerateDtoTypes<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes))]
    public static T ResetGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDtoTypes));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes))]
    public static T EnableGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes))]
    public static T DisableGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes))]
    public static T ToggleGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, !o.GenerateDtoTypes));
    #endregion
    #region GenerateImmutableArrayProperties
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T SetGenerateImmutableArrayProperties<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T ResetGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableArrayProperties));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T EnableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T DisableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T ToggleGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, !o.GenerateImmutableArrayProperties));
    #endregion
    #region GenerateImmutableDictionaryProperties
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T SetGenerateImmutableDictionaryProperties<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T ResetGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableDictionaryProperties));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T EnableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T DisableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T ToggleGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, !o.GenerateImmutableDictionaryProperties));
    #endregion
    #region GenerateJsonMethods
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods))]
    public static T SetGenerateJsonMethods<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods))]
    public static T ResetGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateJsonMethods));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods))]
    public static T EnableGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods))]
    public static T DisableGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods))]
    public static T ToggleGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, !o.GenerateJsonMethods));
    #endregion
    #region GenerateOptionalParameters
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters))]
    public static T SetGenerateOptionalParameters<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters))]
    public static T ResetGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalParameters));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters))]
    public static T EnableGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters))]
    public static T DisableGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters))]
    public static T ToggleGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, !o.GenerateOptionalParameters));
    #endregion
    #region GenerateOptionalPropertiesAsNullable
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T SetGenerateOptionalPropertiesAsNullable<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ResetGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalPropertiesAsNullable));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T EnableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T DisableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ToggleGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, !o.GenerateOptionalPropertiesAsNullable));
    #endregion
    #region GenerateResponseClasses
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses))]
    public static T SetGenerateResponseClasses<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses))]
    public static T ResetGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateResponseClasses));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses))]
    public static T EnableGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses))]
    public static T DisableGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses))]
    public static T ToggleGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, !o.GenerateResponseClasses));
    #endregion
    #region HandleReferences
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.HandleReferences))]
    public static T SetHandleReferences<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.HandleReferences))]
    public static T ResetHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.HandleReferences));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.HandleReferences))]
    public static T EnableHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.HandleReferences))]
    public static T DisableHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.HandleReferences))]
    public static T ToggleHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, !o.HandleReferences));
    #endregion
    #region InlineNamedAny
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedAny))]
    public static T SetInlineNamedAny<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedAny))]
    public static T ResetInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedAny));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedAny))]
    public static T EnableInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedAny))]
    public static T DisableInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedAny))]
    public static T ToggleInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, !o.InlineNamedAny));
    #endregion
    #region InlineNamedArrays
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedArrays))]
    public static T SetInlineNamedArrays<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedArrays))]
    public static T ResetInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedArrays));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedArrays))]
    public static T EnableInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedArrays))]
    public static T DisableInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedArrays))]
    public static T ToggleInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, !o.InlineNamedArrays));
    #endregion
    #region InlineNamedDictionaries
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries))]
    public static T SetInlineNamedDictionaries<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries))]
    public static T ResetInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedDictionaries));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries))]
    public static T EnableInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries))]
    public static T DisableInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries))]
    public static T ToggleInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, !o.InlineNamedDictionaries));
    #endregion
    #region InlineNamedTuples
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedTuples))]
    public static T SetInlineNamedTuples<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedTuples))]
    public static T ResetInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedTuples));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedTuples))]
    public static T EnableInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedTuples))]
    public static T DisableInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.InlineNamedTuples))]
    public static T ToggleInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, !o.InlineNamedTuples));
    #endregion
    #region JsonConverters
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonConverters))]
    public static T ClearJsonConverters<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.JsonConverters));
    #endregion
    #region JsonSerializerSettingsTransformationMethod
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod))]
    public static T SetJsonSerializerSettingsTransformationMethod<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonSerializerSettingsTransformationMethod, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod))]
    public static T ResetJsonSerializerSettingsTransformationMethod<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.JsonSerializerSettingsTransformationMethod));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region OperationGenerationMode
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.OperationGenerationMode))]
    public static T SetOperationGenerationMode<T>(this T o, OperationGenerationMode v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.OperationGenerationMode, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.OperationGenerationMode))]
    public static T ResetOperationGenerationMode<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.OperationGenerationMode));
    #endregion
    #region ParameterArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ParameterArrayType))]
    public static T SetParameterArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ParameterArrayType))]
    public static T ResetParameterArrayType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterArrayType));
    #endregion
    #region ParameterDictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType))]
    public static T SetParameterDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterDictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType))]
    public static T ResetParameterDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterDictionaryType));
    #endregion
    #region RequiredPropertiesMustBeDefined
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T SetRequiredPropertiesMustBeDefined<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T ResetRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.RequiredPropertiesMustBeDefined));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T EnableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T DisableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T ToggleRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, !o.RequiredPropertiesMustBeDefined));
    #endregion
    #region ResponseArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseArrayType))]
    public static T SetResponseArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseArrayType))]
    public static T ResetResponseArrayType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseArrayType));
    #endregion
    #region ResponseClass
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseClass))]
    public static T SetResponseClass<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseClass, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseClass))]
    public static T ResetResponseClass<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseClass));
    #endregion
    #region ResponseDictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType))]
    public static T SetResponseDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseDictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType))]
    public static T ResetResponseDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseDictionaryType));
    #endregion
    #region TimeSpanType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TimeSpanType))]
    public static T SetTimeSpanType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.TimeSpanType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TimeSpanType))]
    public static T ResetTimeSpanType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TimeSpanType));
    #endregion
    #region TimeType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TimeType))]
    public static T SetTimeType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.TimeType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TimeType))]
    public static T ResetTimeType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TimeType));
    #endregion
    #region WrapResponseMethods
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponseMethods))]
    public static T ClearWrapResponseMethods<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.WrapResponseMethods));
    #endregion
    #region WrapResponses
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponses))]
    public static T SetWrapResponses<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponses))]
    public static T ResetWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.WrapResponses));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponses))]
    public static T EnableWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponses))]
    public static T DisableWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.WrapResponses))]
    public static T ToggleWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, !o.WrapResponses));
    #endregion
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpClientSettings), Property = nameof(NSwagOpenApiToCSharpClientSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagOpenApiToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagSwaggerToCSharpClientSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagSwaggerToCSharpClientSettingsExtensions
{
    #region ClientBaseClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClientBaseClass))]
    public static T SetClientBaseClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClientBaseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClientBaseClass))]
    public static T ResetClientBaseClass<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClientBaseClass));
    #endregion
    #region ClientClassAccessModifier
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier))]
    public static T SetClientClassAccessModifier<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClientClassAccessModifier, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier))]
    public static T ResetClientClassAccessModifier<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClientClassAccessModifier));
    #endregion
    #region ConfigurationClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ConfigurationClass))]
    public static T SetConfigurationClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ConfigurationClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ConfigurationClass))]
    public static T ResetConfigurationClass<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ConfigurationClass));
    #endregion
    #region ContractsNamespace
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ContractsNamespace))]
    public static T SetContractsNamespace<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ContractsNamespace, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ContractsNamespace))]
    public static T ResetContractsNamespace<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ContractsNamespace));
    #endregion
    #region ContractsOutput
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ContractsOutput))]
    public static T SetContractsOutput<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ContractsOutput, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ContractsOutput))]
    public static T ResetContractsOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ContractsOutput));
    #endregion
    #region DisposeHttpClient
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DisposeHttpClient))]
    public static T SetDisposeHttpClient<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DisposeHttpClient, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DisposeHttpClient))]
    public static T ResetDisposeHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DisposeHttpClient));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DisposeHttpClient))]
    public static T EnableDisposeHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DisposeHttpClient, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DisposeHttpClient))]
    public static T DisableDisposeHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DisposeHttpClient, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DisposeHttpClient))]
    public static T ToggleDisposeHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DisposeHttpClient, !o.DisposeHttpClient));
    #endregion
    #region ExceptionClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExceptionClass))]
    public static T SetExceptionClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExceptionClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExceptionClass))]
    public static T ResetExceptionClass<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ExceptionClass));
    #endregion
    #region ExposeJsonSerializerSettings
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings))]
    public static T SetExposeJsonSerializerSettings<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExposeJsonSerializerSettings, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings))]
    public static T ResetExposeJsonSerializerSettings<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ExposeJsonSerializerSettings));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings))]
    public static T EnableExposeJsonSerializerSettings<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExposeJsonSerializerSettings, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings))]
    public static T DisableExposeJsonSerializerSettings<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExposeJsonSerializerSettings, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings))]
    public static T ToggleExposeJsonSerializerSettings<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExposeJsonSerializerSettings, !o.ExposeJsonSerializerSettings));
    #endregion
    #region GenerateBaseUrlProperty
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty))]
    public static T SetGenerateBaseUrlProperty<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateBaseUrlProperty, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty))]
    public static T ResetGenerateBaseUrlProperty<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateBaseUrlProperty));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty))]
    public static T EnableGenerateBaseUrlProperty<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateBaseUrlProperty, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty))]
    public static T DisableGenerateBaseUrlProperty<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateBaseUrlProperty, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty))]
    public static T ToggleGenerateBaseUrlProperty<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateBaseUrlProperty, !o.GenerateBaseUrlProperty));
    #endregion
    #region GenerateClientClasses
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientClasses))]
    public static T SetGenerateClientClasses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientClasses))]
    public static T ResetGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateClientClasses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientClasses))]
    public static T EnableGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientClasses))]
    public static T DisableGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientClasses))]
    public static T ToggleGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, !o.GenerateClientClasses));
    #endregion
    #region GenerateClientInterfaces
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces))]
    public static T SetGenerateClientInterfaces<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces))]
    public static T ResetGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateClientInterfaces));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces))]
    public static T EnableGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces))]
    public static T DisableGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces))]
    public static T ToggleGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, !o.GenerateClientInterfaces));
    #endregion
    #region GenerateContractsOutput
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput))]
    public static T SetGenerateContractsOutput<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateContractsOutput, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput))]
    public static T ResetGenerateContractsOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateContractsOutput));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput))]
    public static T EnableGenerateContractsOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateContractsOutput, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput))]
    public static T DisableGenerateContractsOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateContractsOutput, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput))]
    public static T ToggleGenerateContractsOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateContractsOutput, !o.GenerateContractsOutput));
    #endregion
    #region GenerateExceptionClasses
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses))]
    public static T SetGenerateExceptionClasses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateExceptionClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses))]
    public static T ResetGenerateExceptionClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateExceptionClasses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses))]
    public static T EnableGenerateExceptionClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateExceptionClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses))]
    public static T DisableGenerateExceptionClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateExceptionClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses))]
    public static T ToggleGenerateExceptionClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateExceptionClasses, !o.GenerateExceptionClasses));
    #endregion
    #region GenerateSyncMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods))]
    public static T SetGenerateSyncMethods<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateSyncMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods))]
    public static T ResetGenerateSyncMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateSyncMethods));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods))]
    public static T EnableGenerateSyncMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateSyncMethods, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods))]
    public static T DisableGenerateSyncMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateSyncMethods, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods))]
    public static T ToggleGenerateSyncMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateSyncMethods, !o.GenerateSyncMethods));
    #endregion
    #region GenerateUpdateJsonSerializerSettingsMethod
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod))]
    public static T SetGenerateUpdateJsonSerializerSettingsMethod<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateUpdateJsonSerializerSettingsMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod))]
    public static T ResetGenerateUpdateJsonSerializerSettingsMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateUpdateJsonSerializerSettingsMethod));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod))]
    public static T EnableGenerateUpdateJsonSerializerSettingsMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateUpdateJsonSerializerSettingsMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod))]
    public static T DisableGenerateUpdateJsonSerializerSettingsMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateUpdateJsonSerializerSettingsMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod))]
    public static T ToggleGenerateUpdateJsonSerializerSettingsMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateUpdateJsonSerializerSettingsMethod, !o.GenerateUpdateJsonSerializerSettingsMethod));
    #endregion
    #region HttpClientType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HttpClientType))]
    public static T SetHttpClientType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.HttpClientType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HttpClientType))]
    public static T ResetHttpClientType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.HttpClientType));
    #endregion
    #region InjectHttpClient
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InjectHttpClient))]
    public static T SetInjectHttpClient<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InjectHttpClient, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InjectHttpClient))]
    public static T ResetInjectHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InjectHttpClient));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InjectHttpClient))]
    public static T EnableInjectHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InjectHttpClient, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InjectHttpClient))]
    public static T DisableInjectHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InjectHttpClient, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InjectHttpClient))]
    public static T ToggleInjectHttpClient<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InjectHttpClient, !o.InjectHttpClient));
    #endregion
    #region ParameterDateFormat
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDateFormat))]
    public static T SetParameterDateFormat<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterDateFormat, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDateFormat))]
    public static T ResetParameterDateFormat<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterDateFormat));
    #endregion
    #region ParameterDateTimeFormat
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat))]
    public static T SetParameterDateTimeFormat<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterDateTimeFormat, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat))]
    public static T ResetParameterDateTimeFormat<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterDateTimeFormat));
    #endregion
    #region ProtectedMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T SetProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T SetProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T AddProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T AddProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T RemoveProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T RemoveProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ProtectedMethods))]
    public static T ClearProtectedMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ProtectedMethods));
    #endregion
    #region QueryNullValue
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.QueryNullValue))]
    public static T SetQueryNullValue<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.QueryNullValue, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.QueryNullValue))]
    public static T ResetQueryNullValue<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.QueryNullValue));
    #endregion
    #region SerializeTypeInformation
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation))]
    public static T SetSerializeTypeInformation<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.SerializeTypeInformation, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation))]
    public static T ResetSerializeTypeInformation<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.SerializeTypeInformation));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation))]
    public static T EnableSerializeTypeInformation<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.SerializeTypeInformation, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation))]
    public static T DisableSerializeTypeInformation<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.SerializeTypeInformation, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation))]
    public static T ToggleSerializeTypeInformation<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.SerializeTypeInformation, !o.SerializeTypeInformation));
    #endregion
    #region TypeAccessModifier
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TypeAccessModifier))]
    public static T SetTypeAccessModifier<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.TypeAccessModifier, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TypeAccessModifier))]
    public static T ResetTypeAccessModifier<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TypeAccessModifier));
    #endregion
    #region UseBaseUrl
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseBaseUrl))]
    public static T SetUseBaseUrl<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseBaseUrl, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseBaseUrl))]
    public static T ResetUseBaseUrl<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.UseBaseUrl));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseBaseUrl))]
    public static T EnableUseBaseUrl<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseBaseUrl, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseBaseUrl))]
    public static T DisableUseBaseUrl<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseBaseUrl, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseBaseUrl))]
    public static T ToggleUseBaseUrl<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseBaseUrl, !o.UseBaseUrl));
    #endregion
    #region UseHttpClientCreationMethod
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod))]
    public static T SetUseHttpClientCreationMethod<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpClientCreationMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod))]
    public static T ResetUseHttpClientCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.UseHttpClientCreationMethod));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod))]
    public static T EnableUseHttpClientCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpClientCreationMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod))]
    public static T DisableUseHttpClientCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpClientCreationMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod))]
    public static T ToggleUseHttpClientCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpClientCreationMethod, !o.UseHttpClientCreationMethod));
    #endregion
    #region UseHttpRequestMessageCreationMethod
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod))]
    public static T SetUseHttpRequestMessageCreationMethod<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpRequestMessageCreationMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod))]
    public static T ResetUseHttpRequestMessageCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.UseHttpRequestMessageCreationMethod));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod))]
    public static T EnableUseHttpRequestMessageCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpRequestMessageCreationMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod))]
    public static T DisableUseHttpRequestMessageCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpRequestMessageCreationMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod))]
    public static T ToggleUseHttpRequestMessageCreationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.UseHttpRequestMessageCreationMethod, !o.UseHttpRequestMessageCreationMethod));
    #endregion
    #region WrapDtoExceptions
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions))]
    public static T SetWrapDtoExceptions<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions))]
    public static T ResetWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.WrapDtoExceptions));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions))]
    public static T EnableWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions))]
    public static T DisableWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions))]
    public static T ToggleWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, !o.WrapDtoExceptions));
    #endregion
    #region AdditionalContractNamespaceUsages
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages))]
    public static T ClearAdditionalContractNamespaceUsages<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalContractNamespaceUsages));
    #endregion
    #region AdditionalNamespaceUsages
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages))]
    public static T ClearAdditionalNamespaceUsages<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalNamespaceUsages));
    #endregion
    #region AnyType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AnyType))]
    public static T SetAnyType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.AnyType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.AnyType))]
    public static T ResetAnyType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.AnyType));
    #endregion
    #region ArrayBaseType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayBaseType))]
    public static T SetArrayBaseType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayBaseType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayBaseType))]
    public static T ResetArrayBaseType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayBaseType));
    #endregion
    #region ArrayInstanceType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayInstanceType))]
    public static T SetArrayInstanceType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayInstanceType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayInstanceType))]
    public static T ResetArrayInstanceType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayInstanceType));
    #endregion
    #region ArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayType))]
    public static T SetArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ArrayType))]
    public static T ResetArrayType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ArrayType));
    #endregion
    #region ClassName
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClassName))]
    public static T SetClassName<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClassName, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClassName))]
    public static T ResetClassName<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClassName));
    #endregion
    #region ClassStyle
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClassStyle))]
    public static T SetClassStyle<T>(this T o, CSharpClassStyle v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ClassStyle, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ClassStyle))]
    public static T ResetClassStyle<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ClassStyle));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region DateType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DateType))]
    public static T SetDateType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DateType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DateType))]
    public static T ResetDateType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DateType));
    #endregion
    #region DictionaryBaseType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryBaseType))]
    public static T SetDictionaryBaseType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryBaseType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryBaseType))]
    public static T ResetDictionaryBaseType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryBaseType));
    #endregion
    #region DictionaryInstanceType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType))]
    public static T SetDictionaryInstanceType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryInstanceType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType))]
    public static T ResetDictionaryInstanceType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryInstanceType));
    #endregion
    #region DictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryType))]
    public static T SetDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.DictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.DictionaryType))]
    public static T ResetDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.DictionaryType));
    #endregion
    #region EnforceFlagEnums
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums))]
    public static T SetEnforceFlagEnums<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums))]
    public static T ResetEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.EnforceFlagEnums));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums))]
    public static T EnableEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums))]
    public static T DisableEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums))]
    public static T ToggleEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, !o.EnforceFlagEnums));
    #endregion
    #region ExcludedParameterNames
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames))]
    public static T ClearExcludedParameterNames<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedParameterNames));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region GenerateDataAnnotations
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations))]
    public static T SetGenerateDataAnnotations<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations))]
    public static T ResetGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDataAnnotations));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations))]
    public static T EnableGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations))]
    public static T DisableGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations))]
    public static T ToggleGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, !o.GenerateDataAnnotations));
    #endregion
    #region GenerateDefaultValues
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues))]
    public static T SetGenerateDefaultValues<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues))]
    public static T ResetGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDefaultValues));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues))]
    public static T EnableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues))]
    public static T DisableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues))]
    public static T ToggleGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, !o.GenerateDefaultValues));
    #endregion
    #region GenerateDtoTypes
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes))]
    public static T SetGenerateDtoTypes<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes))]
    public static T ResetGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateDtoTypes));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes))]
    public static T EnableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes))]
    public static T DisableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes))]
    public static T ToggleGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, !o.GenerateDtoTypes));
    #endregion
    #region GenerateImmutableArrayProperties
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T SetGenerateImmutableArrayProperties<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T ResetGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableArrayProperties));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T EnableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T DisableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties))]
    public static T ToggleGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, !o.GenerateImmutableArrayProperties));
    #endregion
    #region GenerateImmutableDictionaryProperties
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T SetGenerateImmutableDictionaryProperties<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T ResetGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableDictionaryProperties));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T EnableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T DisableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties))]
    public static T ToggleGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, !o.GenerateImmutableDictionaryProperties));
    #endregion
    #region GenerateJsonMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods))]
    public static T SetGenerateJsonMethods<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods))]
    public static T ResetGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateJsonMethods));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods))]
    public static T EnableGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods))]
    public static T DisableGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods))]
    public static T ToggleGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, !o.GenerateJsonMethods));
    #endregion
    #region GenerateOptionalParameters
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters))]
    public static T SetGenerateOptionalParameters<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters))]
    public static T ResetGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalParameters));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters))]
    public static T EnableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters))]
    public static T DisableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters))]
    public static T ToggleGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, !o.GenerateOptionalParameters));
    #endregion
    #region GenerateOptionalPropertiesAsNullable
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T SetGenerateOptionalPropertiesAsNullable<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ResetGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalPropertiesAsNullable));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T EnableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T DisableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ToggleGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, !o.GenerateOptionalPropertiesAsNullable));
    #endregion
    #region GenerateResponseClasses
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses))]
    public static T SetGenerateResponseClasses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses))]
    public static T ResetGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.GenerateResponseClasses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses))]
    public static T EnableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses))]
    public static T DisableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses))]
    public static T ToggleGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, !o.GenerateResponseClasses));
    #endregion
    #region HandleReferences
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HandleReferences))]
    public static T SetHandleReferences<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HandleReferences))]
    public static T ResetHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.HandleReferences));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HandleReferences))]
    public static T EnableHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HandleReferences))]
    public static T DisableHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.HandleReferences))]
    public static T ToggleHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, !o.HandleReferences));
    #endregion
    #region InlineNamedAny
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedAny))]
    public static T SetInlineNamedAny<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedAny))]
    public static T ResetInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedAny));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedAny))]
    public static T EnableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedAny))]
    public static T DisableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedAny))]
    public static T ToggleInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, !o.InlineNamedAny));
    #endregion
    #region InlineNamedArrays
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedArrays))]
    public static T SetInlineNamedArrays<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedArrays))]
    public static T ResetInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedArrays));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedArrays))]
    public static T EnableInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedArrays))]
    public static T DisableInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedArrays))]
    public static T ToggleInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, !o.InlineNamedArrays));
    #endregion
    #region InlineNamedDictionaries
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries))]
    public static T SetInlineNamedDictionaries<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries))]
    public static T ResetInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedDictionaries));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries))]
    public static T EnableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries))]
    public static T DisableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries))]
    public static T ToggleInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, !o.InlineNamedDictionaries));
    #endregion
    #region InlineNamedTuples
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedTuples))]
    public static T SetInlineNamedTuples<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedTuples))]
    public static T ResetInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedTuples));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedTuples))]
    public static T EnableInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedTuples))]
    public static T DisableInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.InlineNamedTuples))]
    public static T ToggleInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, !o.InlineNamedTuples));
    #endregion
    #region JsonConverters
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonConverters))]
    public static T ClearJsonConverters<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.JsonConverters));
    #endregion
    #region JsonSerializerSettingsTransformationMethod
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod))]
    public static T SetJsonSerializerSettingsTransformationMethod<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.JsonSerializerSettingsTransformationMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod))]
    public static T ResetJsonSerializerSettingsTransformationMethod<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.JsonSerializerSettingsTransformationMethod));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region OperationGenerationMode
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.OperationGenerationMode))]
    public static T SetOperationGenerationMode<T>(this T o, OperationGenerationMode v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.OperationGenerationMode, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.OperationGenerationMode))]
    public static T ResetOperationGenerationMode<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.OperationGenerationMode));
    #endregion
    #region ParameterArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterArrayType))]
    public static T SetParameterArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterArrayType))]
    public static T ResetParameterArrayType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterArrayType));
    #endregion
    #region ParameterDictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType))]
    public static T SetParameterDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ParameterDictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType))]
    public static T ResetParameterDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ParameterDictionaryType));
    #endregion
    #region RequiredPropertiesMustBeDefined
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T SetRequiredPropertiesMustBeDefined<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T ResetRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.RequiredPropertiesMustBeDefined));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T EnableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T DisableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined))]
    public static T ToggleRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, !o.RequiredPropertiesMustBeDefined));
    #endregion
    #region ResponseArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseArrayType))]
    public static T SetResponseArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseArrayType))]
    public static T ResetResponseArrayType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseArrayType));
    #endregion
    #region ResponseClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseClass))]
    public static T SetResponseClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseClass))]
    public static T ResetResponseClass<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseClass));
    #endregion
    #region ResponseDictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType))]
    public static T SetResponseDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ResponseDictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType))]
    public static T ResetResponseDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ResponseDictionaryType));
    #endregion
    #region TimeSpanType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TimeSpanType))]
    public static T SetTimeSpanType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.TimeSpanType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TimeSpanType))]
    public static T ResetTimeSpanType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TimeSpanType));
    #endregion
    #region TimeType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TimeType))]
    public static T SetTimeType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.TimeType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TimeType))]
    public static T ResetTimeType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TimeType));
    #endregion
    #region WrapResponseMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponseMethods))]
    public static T ClearWrapResponseMethods<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.WrapResponseMethods));
    #endregion
    #region WrapResponses
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponses))]
    public static T SetWrapResponses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponses))]
    public static T ResetWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.WrapResponses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponses))]
    public static T EnableWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponses))]
    public static T DisableWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.WrapResponses))]
    public static T ToggleWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, !o.WrapResponses));
    #endregion
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpClientSettings), Property = nameof(NSwagSwaggerToCSharpClientSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagSwaggerToCSharpClientSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagOpenApiToCSharpControllerSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagOpenApiToCSharpControllerSettingsExtensions
{
    #region AdditionalContractNamespaceUsages
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T ClearAdditionalContractNamespaceUsages<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalContractNamespaceUsages));
    #endregion
    #region AdditionalNamespaceUsages
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T ClearAdditionalNamespaceUsages<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalNamespaceUsages));
    #endregion
    #region AnyType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AnyType))]
    public static T SetAnyType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AnyType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.AnyType))]
    public static T ResetAnyType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.AnyType));
    #endregion
    #region ArrayBaseType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayBaseType))]
    public static T SetArrayBaseType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayBaseType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayBaseType))]
    public static T ResetArrayBaseType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayBaseType));
    #endregion
    #region ArrayInstanceType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType))]
    public static T SetArrayInstanceType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayInstanceType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType))]
    public static T ResetArrayInstanceType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayInstanceType));
    #endregion
    #region ArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayType))]
    public static T SetArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ArrayType))]
    public static T ResetArrayType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayType));
    #endregion
    #region ClassName
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ClassName))]
    public static T SetClassName<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ClassName, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ClassName))]
    public static T ResetClassName<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ClassName));
    #endregion
    #region ClassStyle
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ClassStyle))]
    public static T SetClassStyle<T>(this T o, CSharpClassStyle v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ClassStyle, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ClassStyle))]
    public static T ResetClassStyle<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ClassStyle));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region DateType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DateType))]
    public static T SetDateType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DateType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DateType))]
    public static T ResetDateType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DateType));
    #endregion
    #region DictionaryBaseType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType))]
    public static T SetDictionaryBaseType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryBaseType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType))]
    public static T ResetDictionaryBaseType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryBaseType));
    #endregion
    #region DictionaryInstanceType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType))]
    public static T SetDictionaryInstanceType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryInstanceType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType))]
    public static T ResetDictionaryInstanceType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryInstanceType));
    #endregion
    #region DictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryType))]
    public static T SetDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.DictionaryType))]
    public static T ResetDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryType));
    #endregion
    #region EnforceFlagEnums
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums))]
    public static T SetEnforceFlagEnums<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums))]
    public static T ResetEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.EnforceFlagEnums));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums))]
    public static T EnableEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums))]
    public static T DisableEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums))]
    public static T ToggleEnforceFlagEnums<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, !o.EnforceFlagEnums));
    #endregion
    #region ExcludedParameterNames
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames))]
    public static T ClearExcludedParameterNames<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedParameterNames));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region GenerateDataAnnotations
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T SetGenerateDataAnnotations<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T ResetGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDataAnnotations));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T EnableGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T DisableGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T ToggleGenerateDataAnnotations<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, !o.GenerateDataAnnotations));
    #endregion
    #region GenerateDefaultValues
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues))]
    public static T SetGenerateDefaultValues<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues))]
    public static T ResetGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDefaultValues));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues))]
    public static T EnableGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues))]
    public static T DisableGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues))]
    public static T ToggleGenerateDefaultValues<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, !o.GenerateDefaultValues));
    #endregion
    #region GenerateDtoTypes
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes))]
    public static T SetGenerateDtoTypes<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes))]
    public static T ResetGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDtoTypes));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes))]
    public static T EnableGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes))]
    public static T DisableGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes))]
    public static T ToggleGenerateDtoTypes<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, !o.GenerateDtoTypes));
    #endregion
    #region GenerateImmutableArrayProperties
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T SetGenerateImmutableArrayProperties<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T ResetGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableArrayProperties));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T EnableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T DisableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T ToggleGenerateImmutableArrayProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, !o.GenerateImmutableArrayProperties));
    #endregion
    #region GenerateImmutableDictionaryProperties
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T SetGenerateImmutableDictionaryProperties<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T ResetGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableDictionaryProperties));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T EnableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T DisableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T ToggleGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, !o.GenerateImmutableDictionaryProperties));
    #endregion
    #region GenerateJsonMethods
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods))]
    public static T SetGenerateJsonMethods<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods))]
    public static T ResetGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateJsonMethods));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods))]
    public static T EnableGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods))]
    public static T DisableGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods))]
    public static T ToggleGenerateJsonMethods<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, !o.GenerateJsonMethods));
    #endregion
    #region GenerateOptionalParameters
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T SetGenerateOptionalParameters<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T ResetGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalParameters));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T EnableGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T DisableGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T ToggleGenerateOptionalParameters<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, !o.GenerateOptionalParameters));
    #endregion
    #region GenerateOptionalPropertiesAsNullable
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T SetGenerateOptionalPropertiesAsNullable<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ResetGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalPropertiesAsNullable));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T EnableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T DisableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ToggleGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, !o.GenerateOptionalPropertiesAsNullable));
    #endregion
    #region GenerateResponseClasses
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses))]
    public static T SetGenerateResponseClasses<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses))]
    public static T ResetGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateResponseClasses));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses))]
    public static T EnableGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses))]
    public static T DisableGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses))]
    public static T ToggleGenerateResponseClasses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, !o.GenerateResponseClasses));
    #endregion
    #region HandleReferences
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.HandleReferences))]
    public static T SetHandleReferences<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.HandleReferences))]
    public static T ResetHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.HandleReferences));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.HandleReferences))]
    public static T EnableHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.HandleReferences))]
    public static T DisableHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.HandleReferences))]
    public static T ToggleHandleReferences<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, !o.HandleReferences));
    #endregion
    #region InlineNamedAny
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedAny))]
    public static T SetInlineNamedAny<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedAny))]
    public static T ResetInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedAny));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedAny))]
    public static T EnableInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedAny))]
    public static T DisableInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedAny))]
    public static T ToggleInlineNamedAny<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, !o.InlineNamedAny));
    #endregion
    #region InlineNamedArrays
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays))]
    public static T SetInlineNamedArrays<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays))]
    public static T ResetInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedArrays));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays))]
    public static T EnableInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays))]
    public static T DisableInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays))]
    public static T ToggleInlineNamedArrays<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, !o.InlineNamedArrays));
    #endregion
    #region InlineNamedDictionaries
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T SetInlineNamedDictionaries<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T ResetInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedDictionaries));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T EnableInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T DisableInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T ToggleInlineNamedDictionaries<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, !o.InlineNamedDictionaries));
    #endregion
    #region InlineNamedTuples
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples))]
    public static T SetInlineNamedTuples<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples))]
    public static T ResetInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedTuples));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples))]
    public static T EnableInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples))]
    public static T DisableInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples))]
    public static T ToggleInlineNamedTuples<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, !o.InlineNamedTuples));
    #endregion
    #region JsonConverters
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonConverters))]
    public static T ClearJsonConverters<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.JsonConverters));
    #endregion
    #region JsonSerializerSettingsTransformationMethod
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod))]
    public static T SetJsonSerializerSettingsTransformationMethod<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonSerializerSettingsTransformationMethod, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod))]
    public static T ResetJsonSerializerSettingsTransformationMethod<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.JsonSerializerSettingsTransformationMethod));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region OperationGenerationMode
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode))]
    public static T SetOperationGenerationMode<T>(this T o, OperationGenerationMode v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.OperationGenerationMode, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode))]
    public static T ResetOperationGenerationMode<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.OperationGenerationMode));
    #endregion
    #region ParameterArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ParameterArrayType))]
    public static T SetParameterArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ParameterArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ParameterArrayType))]
    public static T ResetParameterArrayType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ParameterArrayType));
    #endregion
    #region ParameterDictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType))]
    public static T SetParameterDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ParameterDictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType))]
    public static T ResetParameterDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ParameterDictionaryType));
    #endregion
    #region RequiredPropertiesMustBeDefined
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T SetRequiredPropertiesMustBeDefined<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T ResetRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.RequiredPropertiesMustBeDefined));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T EnableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T DisableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T ToggleRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, !o.RequiredPropertiesMustBeDefined));
    #endregion
    #region ResponseArrayType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseArrayType))]
    public static T SetResponseArrayType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseArrayType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseArrayType))]
    public static T ResetResponseArrayType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseArrayType));
    #endregion
    #region ResponseClass
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseClass))]
    public static T SetResponseClass<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseClass, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseClass))]
    public static T ResetResponseClass<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseClass));
    #endregion
    #region ResponseDictionaryType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType))]
    public static T SetResponseDictionaryType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseDictionaryType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType))]
    public static T ResetResponseDictionaryType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseDictionaryType));
    #endregion
    #region TimeSpanType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TimeSpanType))]
    public static T SetTimeSpanType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TimeSpanType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TimeSpanType))]
    public static T ResetTimeSpanType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TimeSpanType));
    #endregion
    #region TimeType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TimeType))]
    public static T SetTimeType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TimeType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TimeType))]
    public static T ResetTimeType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TimeType));
    #endregion
    #region WrapResponseMethods
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods))]
    public static T ClearWrapResponseMethods<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.WrapResponseMethods));
    #endregion
    #region WrapResponses
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponses))]
    public static T SetWrapResponses<T>(this T o, bool? v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponses))]
    public static T ResetWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.WrapResponses));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponses))]
    public static T EnableWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, true));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponses))]
    public static T DisableWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, false));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.WrapResponses))]
    public static T ToggleWrapResponses<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, !o.WrapResponses));
    #endregion
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagOpenApiToCSharpControllerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToCSharpControllerSettings), Property = nameof(NSwagOpenApiToCSharpControllerSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagOpenApiToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagSwaggerToCSharpControllerSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagSwaggerToCSharpControllerSettingsExtensions
{
    #region BasePath
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.BasePath))]
    public static T SetBasePath<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.BasePath, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.BasePath))]
    public static T ResetBasePath<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.BasePath));
    #endregion
    #region ControllerBaseClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass))]
    public static T SetControllerBaseClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ControllerBaseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass))]
    public static T ResetControllerBaseClass<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ControllerBaseClass));
    #endregion
    #region ControllerStyle
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerStyle))]
    public static T SetControllerStyle<T>(this T o, CSharpControllerStyle v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ControllerStyle, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerStyle))]
    public static T ResetControllerStyle<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ControllerStyle));
    #endregion
    #region ControllerTarget
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerTarget))]
    public static T SetControllerTarget<T>(this T o, CSharpControllerTarget v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ControllerTarget, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ControllerTarget))]
    public static T ResetControllerTarget<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ControllerTarget));
    #endregion
    #region GenerateModelValidationAttributes
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes))]
    public static T SetGenerateModelValidationAttributes<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateModelValidationAttributes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes))]
    public static T ResetGenerateModelValidationAttributes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateModelValidationAttributes));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes))]
    public static T EnableGenerateModelValidationAttributes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateModelValidationAttributes, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes))]
    public static T DisableGenerateModelValidationAttributes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateModelValidationAttributes, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes))]
    public static T ToggleGenerateModelValidationAttributes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateModelValidationAttributes, !o.GenerateModelValidationAttributes));
    #endregion
    #region RouteNamingStrategy
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy))]
    public static T SetRouteNamingStrategy<T>(this T o, CSharpControllerRouteNamingStrategy v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RouteNamingStrategy, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy))]
    public static T ResetRouteNamingStrategy<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.RouteNamingStrategy));
    #endregion
    #region UseActionResultType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseActionResultType))]
    public static T SetUseActionResultType<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseActionResultType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseActionResultType))]
    public static T ResetUseActionResultType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.UseActionResultType));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseActionResultType))]
    public static T EnableUseActionResultType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseActionResultType, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseActionResultType))]
    public static T DisableUseActionResultType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseActionResultType, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseActionResultType))]
    public static T ToggleUseActionResultType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseActionResultType, !o.UseActionResultType));
    #endregion
    #region UseCancellationToken
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseCancellationToken))]
    public static T SetUseCancellationToken<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseCancellationToken, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseCancellationToken))]
    public static T ResetUseCancellationToken<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.UseCancellationToken));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseCancellationToken))]
    public static T EnableUseCancellationToken<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseCancellationToken, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseCancellationToken))]
    public static T DisableUseCancellationToken<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseCancellationToken, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.UseCancellationToken))]
    public static T ToggleUseCancellationToken<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.UseCancellationToken, !o.UseCancellationToken));
    #endregion
    #region AdditionalContractNamespaceUsages
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T SetAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T AddAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T RemoveAdditionalContractNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalContractNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages))]
    public static T ClearAdditionalContractNamespaceUsages<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalContractNamespaceUsages));
    #endregion
    #region AdditionalNamespaceUsages
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T SetAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T AddAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T RemoveAdditionalNamespaceUsages<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.AdditionalNamespaceUsages, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages))]
    public static T ClearAdditionalNamespaceUsages<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.AdditionalNamespaceUsages));
    #endregion
    #region AnyType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AnyType))]
    public static T SetAnyType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.AnyType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.AnyType))]
    public static T ResetAnyType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.AnyType));
    #endregion
    #region ArrayBaseType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayBaseType))]
    public static T SetArrayBaseType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayBaseType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayBaseType))]
    public static T ResetArrayBaseType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayBaseType));
    #endregion
    #region ArrayInstanceType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType))]
    public static T SetArrayInstanceType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayInstanceType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType))]
    public static T ResetArrayInstanceType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayInstanceType));
    #endregion
    #region ArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayType))]
    public static T SetArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ArrayType))]
    public static T ResetArrayType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ArrayType));
    #endregion
    #region ClassName
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ClassName))]
    public static T SetClassName<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ClassName, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ClassName))]
    public static T ResetClassName<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ClassName));
    #endregion
    #region ClassStyle
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ClassStyle))]
    public static T SetClassStyle<T>(this T o, CSharpClassStyle v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ClassStyle, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ClassStyle))]
    public static T ResetClassStyle<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ClassStyle));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region DateType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DateType))]
    public static T SetDateType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DateType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DateType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DateType))]
    public static T ResetDateType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DateType));
    #endregion
    #region DictionaryBaseType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType))]
    public static T SetDictionaryBaseType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryBaseType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType))]
    public static T ResetDictionaryBaseType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryBaseType));
    #endregion
    #region DictionaryInstanceType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType))]
    public static T SetDictionaryInstanceType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryInstanceType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType))]
    public static T ResetDictionaryInstanceType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryInstanceType));
    #endregion
    #region DictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryType))]
    public static T SetDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.DictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.DictionaryType))]
    public static T ResetDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.DictionaryType));
    #endregion
    #region EnforceFlagEnums
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums))]
    public static T SetEnforceFlagEnums<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums))]
    public static T ResetEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.EnforceFlagEnums));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums))]
    public static T EnableEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums))]
    public static T DisableEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums))]
    public static T ToggleEnforceFlagEnums<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnforceFlagEnums, !o.EnforceFlagEnums));
    #endregion
    #region ExcludedParameterNames
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames))]
    public static T ClearExcludedParameterNames<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedParameterNames));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region GenerateDataAnnotations
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T SetGenerateDataAnnotations<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T ResetGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDataAnnotations));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T EnableGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T DisableGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations))]
    public static T ToggleGenerateDataAnnotations<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDataAnnotations, !o.GenerateDataAnnotations));
    #endregion
    #region GenerateDefaultValues
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues))]
    public static T SetGenerateDefaultValues<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues))]
    public static T ResetGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDefaultValues));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues))]
    public static T EnableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues))]
    public static T DisableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues))]
    public static T ToggleGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, !o.GenerateDefaultValues));
    #endregion
    #region GenerateDtoTypes
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes))]
    public static T SetGenerateDtoTypes<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes))]
    public static T ResetGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateDtoTypes));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes))]
    public static T EnableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes))]
    public static T DisableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes))]
    public static T ToggleGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, !o.GenerateDtoTypes));
    #endregion
    #region GenerateImmutableArrayProperties
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T SetGenerateImmutableArrayProperties<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T ResetGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableArrayProperties));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T EnableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T DisableGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties))]
    public static T ToggleGenerateImmutableArrayProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableArrayProperties, !o.GenerateImmutableArrayProperties));
    #endregion
    #region GenerateImmutableDictionaryProperties
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T SetGenerateImmutableDictionaryProperties<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T ResetGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateImmutableDictionaryProperties));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T EnableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T DisableGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties))]
    public static T ToggleGenerateImmutableDictionaryProperties<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateImmutableDictionaryProperties, !o.GenerateImmutableDictionaryProperties));
    #endregion
    #region GenerateJsonMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods))]
    public static T SetGenerateJsonMethods<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods))]
    public static T ResetGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateJsonMethods));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods))]
    public static T EnableGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods))]
    public static T DisableGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods))]
    public static T ToggleGenerateJsonMethods<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateJsonMethods, !o.GenerateJsonMethods));
    #endregion
    #region GenerateOptionalParameters
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T SetGenerateOptionalParameters<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T ResetGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalParameters));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T EnableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T DisableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters))]
    public static T ToggleGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, !o.GenerateOptionalParameters));
    #endregion
    #region GenerateOptionalPropertiesAsNullable
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T SetGenerateOptionalPropertiesAsNullable<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ResetGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalPropertiesAsNullable));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T EnableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T DisableGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable))]
    public static T ToggleGenerateOptionalPropertiesAsNullable<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateOptionalPropertiesAsNullable, !o.GenerateOptionalPropertiesAsNullable));
    #endregion
    #region GenerateResponseClasses
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses))]
    public static T SetGenerateResponseClasses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses))]
    public static T ResetGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.GenerateResponseClasses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses))]
    public static T EnableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses))]
    public static T DisableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses))]
    public static T ToggleGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, !o.GenerateResponseClasses));
    #endregion
    #region HandleReferences
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.HandleReferences))]
    public static T SetHandleReferences<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.HandleReferences))]
    public static T ResetHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.HandleReferences));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.HandleReferences))]
    public static T EnableHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.HandleReferences))]
    public static T DisableHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.HandleReferences))]
    public static T ToggleHandleReferences<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.HandleReferences, !o.HandleReferences));
    #endregion
    #region InlineNamedAny
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedAny))]
    public static T SetInlineNamedAny<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedAny))]
    public static T ResetInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedAny));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedAny))]
    public static T EnableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedAny))]
    public static T DisableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedAny))]
    public static T ToggleInlineNamedAny<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, !o.InlineNamedAny));
    #endregion
    #region InlineNamedArrays
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays))]
    public static T SetInlineNamedArrays<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays))]
    public static T ResetInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedArrays));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays))]
    public static T EnableInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays))]
    public static T DisableInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays))]
    public static T ToggleInlineNamedArrays<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedArrays, !o.InlineNamedArrays));
    #endregion
    #region InlineNamedDictionaries
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T SetInlineNamedDictionaries<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T ResetInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedDictionaries));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T EnableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T DisableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries))]
    public static T ToggleInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, !o.InlineNamedDictionaries));
    #endregion
    #region InlineNamedTuples
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples))]
    public static T SetInlineNamedTuples<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples))]
    public static T ResetInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.InlineNamedTuples));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples))]
    public static T EnableInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples))]
    public static T DisableInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples))]
    public static T ToggleInlineNamedTuples<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.InlineNamedTuples, !o.InlineNamedTuples));
    #endregion
    #region JsonConverters
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T SetJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T AddJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T RemoveJsonConverters<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.JsonConverters, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonConverters))]
    public static T ClearJsonConverters<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.JsonConverters));
    #endregion
    #region JsonSerializerSettingsTransformationMethod
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod))]
    public static T SetJsonSerializerSettingsTransformationMethod<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.JsonSerializerSettingsTransformationMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod))]
    public static T ResetJsonSerializerSettingsTransformationMethod<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.JsonSerializerSettingsTransformationMethod));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region OperationGenerationMode
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode))]
    public static T SetOperationGenerationMode<T>(this T o, OperationGenerationMode v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.OperationGenerationMode, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode))]
    public static T ResetOperationGenerationMode<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.OperationGenerationMode));
    #endregion
    #region ParameterArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ParameterArrayType))]
    public static T SetParameterArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ParameterArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ParameterArrayType))]
    public static T ResetParameterArrayType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ParameterArrayType));
    #endregion
    #region ParameterDictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType))]
    public static T SetParameterDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ParameterDictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType))]
    public static T ResetParameterDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ParameterDictionaryType));
    #endregion
    #region RequiredPropertiesMustBeDefined
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T SetRequiredPropertiesMustBeDefined<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T ResetRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.RequiredPropertiesMustBeDefined));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T EnableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T DisableRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined))]
    public static T ToggleRequiredPropertiesMustBeDefined<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.RequiredPropertiesMustBeDefined, !o.RequiredPropertiesMustBeDefined));
    #endregion
    #region ResponseArrayType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseArrayType))]
    public static T SetResponseArrayType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseArrayType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseArrayType))]
    public static T ResetResponseArrayType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseArrayType));
    #endregion
    #region ResponseClass
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseClass))]
    public static T SetResponseClass<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseClass))]
    public static T ResetResponseClass<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseClass));
    #endregion
    #region ResponseDictionaryType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType))]
    public static T SetResponseDictionaryType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ResponseDictionaryType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType))]
    public static T ResetResponseDictionaryType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ResponseDictionaryType));
    #endregion
    #region TimeSpanType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TimeSpanType))]
    public static T SetTimeSpanType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TimeSpanType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TimeSpanType))]
    public static T ResetTimeSpanType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TimeSpanType));
    #endregion
    #region TimeType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TimeType))]
    public static T SetTimeType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TimeType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TimeType))]
    public static T ResetTimeType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TimeType));
    #endregion
    #region WrapResponseMethods
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods))]
    public static T ClearWrapResponseMethods<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.WrapResponseMethods));
    #endregion
    #region WrapResponses
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponses))]
    public static T SetWrapResponses<T>(this T o, bool? v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponses))]
    public static T ResetWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.WrapResponses));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponses))]
    public static T EnableWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, true));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponses))]
    public static T DisableWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, false));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.WrapResponses))]
    public static T ToggleWrapResponses<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.WrapResponses, !o.WrapResponses));
    #endregion
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagSwaggerToCSharpControllerSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToCSharpControllerSettings), Property = nameof(NSwagSwaggerToCSharpControllerSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagSwaggerToCSharpControllerSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagOpenApiToTypeScriptClientSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagOpenApiToTypeScriptClientSettingsExtensions
{
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagOpenApiToTypeScriptClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagOpenApiToTypeScriptClientSettings), Property = nameof(NSwagOpenApiToTypeScriptClientSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagOpenApiToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region NSwagSwaggerToTypeScriptClientSettingsExtensions
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[ExcludeFromCodeCoverage]
public static partial class NSwagSwaggerToTypeScriptClientSettingsExtensions
{
    #region BaseUrlTokenName
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName))]
    public static T SetBaseUrlTokenName<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.BaseUrlTokenName, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName))]
    public static T ResetBaseUrlTokenName<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.BaseUrlTokenName));
    #endregion
    #region ClassName
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassName))]
    public static T SetClassName<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ClassName, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassName))]
    public static T ResetClassName<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ClassName));
    #endregion
    #region ClassTypes
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T SetClassTypes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T SetClassTypes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T AddClassTypes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T AddClassTypes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T RemoveClassTypes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T RemoveClassTypes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ClassTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClassTypes))]
    public static T ClearClassTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ClassTypes));
    #endregion
    #region ClientBaseClass
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass))]
    public static T SetClientBaseClass<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ClientBaseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass))]
    public static T ResetClientBaseClass<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ClientBaseClass));
    #endregion
    #region ConfigurationClass
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass))]
    public static T SetConfigurationClass<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ConfigurationClass, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass))]
    public static T ResetConfigurationClass<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ConfigurationClass));
    #endregion
    #region ConvertConstructorInterfaceData
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData))]
    public static T SetConvertConstructorInterfaceData<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ConvertConstructorInterfaceData, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData))]
    public static T ResetConvertConstructorInterfaceData<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ConvertConstructorInterfaceData));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData))]
    public static T EnableConvertConstructorInterfaceData<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ConvertConstructorInterfaceData, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData))]
    public static T DisableConvertConstructorInterfaceData<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ConvertConstructorInterfaceData, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData))]
    public static T ToggleConvertConstructorInterfaceData<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ConvertConstructorInterfaceData, !o.ConvertConstructorInterfaceData));
    #endregion
    #region DateTimeType
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.DateTimeType))]
    public static T SetDateTimeType<T>(this T o, TypeScriptDateTimeType v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.DateTimeType, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.DateTimeType))]
    public static T ResetDateTimeType<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.DateTimeType));
    #endregion
    #region ExceptionClass
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExceptionClass))]
    public static T SetExceptionClass<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExceptionClass, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExceptionClass))]
    public static T ResetExceptionClass<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ExceptionClass));
    #endregion
    #region ExcludedParameterNames
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T SetExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T AddExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T RemoveExcludedParameterNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedParameterNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames))]
    public static T ClearExcludedParameterNames<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedParameterNames));
    #endregion
    #region ExcludedTypeNames
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T SetExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T AddExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T RemoveExcludedTypeNames<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExcludedTypeNames, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames))]
    public static T ClearExcludedTypeNames<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ExcludedTypeNames));
    #endregion
    #region ExportTypes
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExportTypes))]
    public static T SetExportTypes<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExportTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExportTypes))]
    public static T ResetExportTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ExportTypes));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExportTypes))]
    public static T EnableExportTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExportTypes, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExportTypes))]
    public static T DisableExportTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExportTypes, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExportTypes))]
    public static T ToggleExportTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExportTypes, !o.ExportTypes));
    #endregion
    #region ExtendedClasses
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T SetExtendedClasses<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T SetExtendedClasses<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T AddExtendedClasses<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T AddExtendedClasses<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T RemoveExtendedClasses<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T RemoveExtendedClasses<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ExtendedClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses))]
    public static T ClearExtendedClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ExtendedClasses));
    #endregion
    #region ExtensionCode
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtensionCode))]
    public static T SetExtensionCode<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ExtensionCode, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ExtensionCode))]
    public static T ResetExtensionCode<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ExtensionCode));
    #endregion
    #region GenerateClientClasses
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses))]
    public static T SetGenerateClientClasses<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses))]
    public static T ResetGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateClientClasses));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses))]
    public static T EnableGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses))]
    public static T DisableGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses))]
    public static T ToggleGenerateClientClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientClasses, !o.GenerateClientClasses));
    #endregion
    #region GenerateClientInterfaces
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces))]
    public static T SetGenerateClientInterfaces<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces))]
    public static T ResetGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateClientInterfaces));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces))]
    public static T EnableGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces))]
    public static T DisableGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces))]
    public static T ToggleGenerateClientInterfaces<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateClientInterfaces, !o.GenerateClientInterfaces));
    #endregion
    #region GenerateCloneMethod
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod))]
    public static T SetGenerateCloneMethod<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateCloneMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod))]
    public static T ResetGenerateCloneMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateCloneMethod));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod))]
    public static T EnableGenerateCloneMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateCloneMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod))]
    public static T DisableGenerateCloneMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateCloneMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod))]
    public static T ToggleGenerateCloneMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateCloneMethod, !o.GenerateCloneMethod));
    #endregion
    #region GenerateConstructorInterface
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface))]
    public static T SetGenerateConstructorInterface<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateConstructorInterface, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface))]
    public static T ResetGenerateConstructorInterface<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateConstructorInterface));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface))]
    public static T EnableGenerateConstructorInterface<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateConstructorInterface, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface))]
    public static T DisableGenerateConstructorInterface<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateConstructorInterface, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface))]
    public static T ToggleGenerateConstructorInterface<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateConstructorInterface, !o.GenerateConstructorInterface));
    #endregion
    #region GenerateDefaultValues
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues))]
    public static T SetGenerateDefaultValues<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues))]
    public static T ResetGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateDefaultValues));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues))]
    public static T EnableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues))]
    public static T DisableGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues))]
    public static T ToggleGenerateDefaultValues<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDefaultValues, !o.GenerateDefaultValues));
    #endregion
    #region GenerateDtoTypes
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes))]
    public static T SetGenerateDtoTypes<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes))]
    public static T ResetGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateDtoTypes));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes))]
    public static T EnableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes))]
    public static T DisableGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes))]
    public static T ToggleGenerateDtoTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateDtoTypes, !o.GenerateDtoTypes));
    #endregion
    #region GenerateOptionalParameters
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters))]
    public static T SetGenerateOptionalParameters<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters))]
    public static T ResetGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateOptionalParameters));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters))]
    public static T EnableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters))]
    public static T DisableGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters))]
    public static T ToggleGenerateOptionalParameters<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateOptionalParameters, !o.GenerateOptionalParameters));
    #endregion
    #region GenerateResponseClasses
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses))]
    public static T SetGenerateResponseClasses<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses))]
    public static T ResetGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.GenerateResponseClasses));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses))]
    public static T EnableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses))]
    public static T DisableGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses))]
    public static T ToggleGenerateResponseClasses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.GenerateResponseClasses, !o.GenerateResponseClasses));
    #endregion
    #region HandleReferences
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HandleReferences))]
    public static T SetHandleReferences<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HandleReferences))]
    public static T ResetHandleReferences<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.HandleReferences));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HandleReferences))]
    public static T EnableHandleReferences<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HandleReferences))]
    public static T DisableHandleReferences<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HandleReferences))]
    public static T ToggleHandleReferences<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.HandleReferences, !o.HandleReferences));
    #endregion
    #region HttpClass
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HttpClass))]
    public static T SetHttpClass<T>(this T o, HttpClass v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.HttpClass, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.HttpClass))]
    public static T ResetHttpClass<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.HttpClass));
    #endregion
    #region ImportRequiredTypes
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes))]
    public static T SetImportRequiredTypes<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ImportRequiredTypes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes))]
    public static T ResetImportRequiredTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ImportRequiredTypes));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes))]
    public static T EnableImportRequiredTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ImportRequiredTypes, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes))]
    public static T DisableImportRequiredTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ImportRequiredTypes, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes))]
    public static T ToggleImportRequiredTypes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ImportRequiredTypes, !o.ImportRequiredTypes));
    #endregion
    #region InjectionTokenType
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType))]
    public static T SetInjectionTokenType<T>(this T o, InjectionTokenType v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InjectionTokenType, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType))]
    public static T ResetInjectionTokenType<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.InjectionTokenType));
    #endregion
    #region InlineNamedAny
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny))]
    public static T SetInlineNamedAny<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny))]
    public static T ResetInlineNamedAny<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedAny));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny))]
    public static T EnableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny))]
    public static T DisableInlineNamedAny<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny))]
    public static T ToggleInlineNamedAny<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedAny, !o.InlineNamedAny));
    #endregion
    #region InlineNamedDictionaries
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries))]
    public static T SetInlineNamedDictionaries<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries))]
    public static T ResetInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.InlineNamedDictionaries));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries))]
    public static T EnableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries))]
    public static T DisableInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries))]
    public static T ToggleInlineNamedDictionaries<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.InlineNamedDictionaries, !o.InlineNamedDictionaries));
    #endregion
    #region MarkOptionalProperties
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties))]
    public static T SetMarkOptionalProperties<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.MarkOptionalProperties, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties))]
    public static T ResetMarkOptionalProperties<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.MarkOptionalProperties));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties))]
    public static T EnableMarkOptionalProperties<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.MarkOptionalProperties, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties))]
    public static T DisableMarkOptionalProperties<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.MarkOptionalProperties, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties))]
    public static T ToggleMarkOptionalProperties<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.MarkOptionalProperties, !o.MarkOptionalProperties));
    #endregion
    #region ModuleName
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ModuleName))]
    public static T SetModuleName<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ModuleName, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ModuleName))]
    public static T ResetModuleName<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ModuleName));
    #endregion
    #region Namespace
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Namespace))]
    public static T SetNamespace<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Namespace, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Namespace))]
    public static T ResetNamespace<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Namespace));
    #endregion
    #region NullValue
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.NullValue))]
    public static T SetNullValue<T>(this T o, TypeScriptNullValue v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.NullValue, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.NullValue))]
    public static T ResetNullValue<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.NullValue));
    #endregion
    #region OperationGenerationMode
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode))]
    public static T SetOperationGenerationMode<T>(this T o, OperationGenerationMode v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.OperationGenerationMode, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode))]
    public static T ResetOperationGenerationMode<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.OperationGenerationMode));
    #endregion
    #region PromiseType
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.PromiseType))]
    public static T SetPromiseType<T>(this T o, PromiseType v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.PromiseType, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.PromiseType))]
    public static T ResetPromiseType<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.PromiseType));
    #endregion
    #region ProtectedMethods
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T SetProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T SetProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T AddProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T AddProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T RemoveProtectedMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T RemoveProtectedMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ProtectedMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods))]
    public static T ClearProtectedMethods<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ProtectedMethods));
    #endregion
    #region QueryNullValue
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.QueryNullValue))]
    public static T SetQueryNullValue<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.QueryNullValue, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.QueryNullValue))]
    public static T ResetQueryNullValue<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.QueryNullValue));
    #endregion
    #region ResponseClass
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ResponseClass))]
    public static T SetResponseClass<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ResponseClass, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ResponseClass))]
    public static T ResetResponseClass<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ResponseClass));
    #endregion
    #region RxJsVersion
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.RxJsVersion))]
    public static T SetRxJsVersion<T>(this T o, decimal? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.RxJsVersion, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.RxJsVersion))]
    public static T ResetRxJsVersion<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.RxJsVersion));
    #endregion
    #region Template
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Template"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Template))]
    public static T SetTemplate<T>(this T o, TypeScriptTemplate v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Template, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Template"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Template))]
    public static T ResetTemplate<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Template));
    #endregion
    #region TypeScriptVersion
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion))]
    public static T SetTypeScriptVersion<T>(this T o, decimal? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TypeScriptVersion, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion))]
    public static T ResetTypeScriptVersion<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TypeScriptVersion));
    #endregion
    #region TypeStyle
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeStyle))]
    public static T SetTypeStyle<T>(this T o, TypeScriptTypeStyle v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TypeStyle, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeStyle))]
    public static T ResetTypeStyle<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TypeStyle));
    #endregion
    #region UseGetBaseUrlMethod
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod))]
    public static T SetUseGetBaseUrlMethod<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseGetBaseUrlMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod))]
    public static T ResetUseGetBaseUrlMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.UseGetBaseUrlMethod));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod))]
    public static T EnableUseGetBaseUrlMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseGetBaseUrlMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod))]
    public static T DisableUseGetBaseUrlMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseGetBaseUrlMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod))]
    public static T ToggleUseGetBaseUrlMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseGetBaseUrlMethod, !o.UseGetBaseUrlMethod));
    #endregion
    #region UseSingletonProvider
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider))]
    public static T SetUseSingletonProvider<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseSingletonProvider, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider))]
    public static T ResetUseSingletonProvider<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.UseSingletonProvider));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider))]
    public static T EnableUseSingletonProvider<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseSingletonProvider, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider))]
    public static T DisableUseSingletonProvider<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseSingletonProvider, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider))]
    public static T ToggleUseSingletonProvider<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseSingletonProvider, !o.UseSingletonProvider));
    #endregion
    #region UseTransformOptionsMethod
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod))]
    public static T SetUseTransformOptionsMethod<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformOptionsMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod))]
    public static T ResetUseTransformOptionsMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.UseTransformOptionsMethod));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod))]
    public static T EnableUseTransformOptionsMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformOptionsMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod))]
    public static T DisableUseTransformOptionsMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformOptionsMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod))]
    public static T ToggleUseTransformOptionsMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformOptionsMethod, !o.UseTransformOptionsMethod));
    #endregion
    #region UseTransformResultMethod
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod))]
    public static T SetUseTransformResultMethod<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformResultMethod, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod))]
    public static T ResetUseTransformResultMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.UseTransformResultMethod));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod))]
    public static T EnableUseTransformResultMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformResultMethod, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod))]
    public static T DisableUseTransformResultMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformResultMethod, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod))]
    public static T ToggleUseTransformResultMethod<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.UseTransformResultMethod, !o.UseTransformResultMethod));
    #endregion
    #region WrapDtoExceptions
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions))]
    public static T SetWrapDtoExceptions<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions))]
    public static T ResetWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.WrapDtoExceptions));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions))]
    public static T EnableWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions))]
    public static T DisableWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions))]
    public static T ToggleWrapDtoExceptions<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapDtoExceptions, !o.WrapDtoExceptions));
    #endregion
    #region WrapResponseMethods
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T SetWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T AddWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T RemoveWrapResponseMethods<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.WrapResponseMethods, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods))]
    public static T ClearWrapResponseMethods<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.WrapResponseMethods));
    #endregion
    #region WrapResponses
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponses))]
    public static T SetWrapResponses<T>(this T o, bool? v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponses))]
    public static T ResetWrapResponses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.WrapResponses));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponses))]
    public static T EnableWrapResponses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, true));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponses))]
    public static T DisableWrapResponses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, false));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.WrapResponses))]
    public static T ToggleWrapResponses<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.WrapResponses, !o.WrapResponses));
    #endregion
    #region EnumNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType))]
    public static T SetEnumNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.EnumNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType))]
    public static T ResetEnumNameGeneratorType<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.EnumNameGeneratorType));
    #endregion
    #region PropertyNameGeneratorType
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType))]
    public static T SetPropertyNameGeneratorType<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.PropertyNameGeneratorType, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType))]
    public static T ResetPropertyNameGeneratorType<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.PropertyNameGeneratorType));
    #endregion
    #region TemplateDirectory
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory))]
    public static T SetTemplateDirectory<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TemplateDirectory, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory))]
    public static T ResetTemplateDirectory<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TemplateDirectory));
    #endregion
    #region TypeNameGenerator
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator))]
    public static T SetTypeNameGenerator<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.TypeNameGenerator, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator))]
    public static T ResetTypeNameGenerator<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.TypeNameGenerator));
    #endregion
    #region Input
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Input))]
    public static T SetInput<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Input, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Input"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Input))]
    public static T ResetInput<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Input));
    #endregion
    #region ServiceHost
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceHost))]
    public static T SetServiceHost<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceHost, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceHost))]
    public static T ResetServiceHost<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.ServiceHost));
    #endregion
    #region ServiceSchemes
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T SetServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T AddServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.AddCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, params string[] v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T RemoveServiceSchemes<T>(this T o, IEnumerable<string> v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.RemoveCollection(() => o.ServiceSchemes, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes))]
    public static T ClearServiceSchemes<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.ClearCollection(() => o.ServiceSchemes));
    #endregion
    #region Output
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Output))]
    public static T SetOutput<T>(this T o, string v) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Set(() => o.Output, v));
    /// <inheritdoc cref="NSwagSwaggerToTypeScriptClientSettings.Output"/>
    [Pure] [Builder(Type = typeof(NSwagSwaggerToTypeScriptClientSettings), Property = nameof(NSwagSwaggerToTypeScriptClientSettings.Output))]
    public static T ResetOutput<T>(this T o) where T : NSwagSwaggerToTypeScriptClientSettings => o.Modify(b => b.Remove(() => o.Output));
    #endregion
}
#endregion
#region SchemaType
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<SchemaType>))]
public partial class SchemaType : Enumeration
{
    public static SchemaType JsonSchema = (SchemaType) "JsonSchema";
    public static SchemaType Swagger2 = (SchemaType) "Swagger2";
    public static SchemaType OpenApi3 = (SchemaType) "OpenApi3";
    public static implicit operator SchemaType(string value)
    {
        return new SchemaType { Value = value };
    }
}
#endregion
#region PropertyNameHandling
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<PropertyNameHandling>))]
public partial class PropertyNameHandling : Enumeration
{
    public static PropertyNameHandling Default = (PropertyNameHandling) "Default";
    public static PropertyNameHandling CamelCase = (PropertyNameHandling) "CamelCase";
    public static PropertyNameHandling SnakeCase = (PropertyNameHandling) "SnakeCase";
    public static implicit operator PropertyNameHandling(string value)
    {
        return new PropertyNameHandling { Value = value };
    }
}
#endregion
#region ReferenceTypeNullHandling
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<ReferenceTypeNullHandling>))]
public partial class ReferenceTypeNullHandling : Enumeration
{
    public static ReferenceTypeNullHandling Null = (ReferenceTypeNullHandling) "Null";
    public static ReferenceTypeNullHandling NotNull = (ReferenceTypeNullHandling) "NotNull";
    public static implicit operator ReferenceTypeNullHandling(string value)
    {
        return new ReferenceTypeNullHandling { Value = value };
    }
}
#endregion
#region EnumHandling
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<EnumHandling>))]
public partial class EnumHandling : Enumeration
{
    public static EnumHandling Integer = (EnumHandling) "Integer";
    public static EnumHandling String = (EnumHandling) "String";
    public static EnumHandling CamelCaseString = (EnumHandling) "CamelCaseString";
    public static implicit operator EnumHandling(string value)
    {
        return new EnumHandling { Value = value };
    }
}
#endregion
#region OperationGenerationMode
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<OperationGenerationMode>))]
public partial class OperationGenerationMode : Enumeration
{
    public static OperationGenerationMode MultipleClientsFromOperationId = (OperationGenerationMode) "MultipleClientsFromOperationId";
    public static OperationGenerationMode MultipleClientsFromPathSegments = (OperationGenerationMode) "MultipleClientsFromPathSegments";
    public static OperationGenerationMode MultipleClientsFromFirstTagAndPathSegments = (OperationGenerationMode) "MultipleClientsFromFirstTagAndPathSegments";
    public static OperationGenerationMode MultipleClientsFromFirstTagAndOperationId = (OperationGenerationMode) "MultipleClientsFromFirstTagAndOperationId";
    public static OperationGenerationMode SingleClientFromOperationId = (OperationGenerationMode) "SingleClientFromOperationId";
    public static OperationGenerationMode SingleClientFromPathSegments = (OperationGenerationMode) "SingleClientFromPathSegments";
    public static implicit operator OperationGenerationMode(string value)
    {
        return new OperationGenerationMode { Value = value };
    }
}
#endregion
#region CSharpClassStyle
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<CSharpClassStyle>))]
public partial class CSharpClassStyle : Enumeration
{
    public static CSharpClassStyle Poco = (CSharpClassStyle) "Poco";
    public static CSharpClassStyle Inpc = (CSharpClassStyle) "Inpc";
    public static CSharpClassStyle Prism = (CSharpClassStyle) "Prism";
    public static CSharpClassStyle Record = (CSharpClassStyle) "Record";
    public static implicit operator CSharpClassStyle(string value)
    {
        return new CSharpClassStyle { Value = value };
    }
}
#endregion
#region CSharpControllerStyle
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<CSharpControllerStyle>))]
public partial class CSharpControllerStyle : Enumeration
{
    public static CSharpControllerStyle Partial = (CSharpControllerStyle) "Partial";
    public static CSharpControllerStyle Abstract = (CSharpControllerStyle) "Abstract";
    public static implicit operator CSharpControllerStyle(string value)
    {
        return new CSharpControllerStyle { Value = value };
    }
}
#endregion
#region CSharpControllerTarget
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<CSharpControllerTarget>))]
public partial class CSharpControllerTarget : Enumeration
{
    public static CSharpControllerTarget AspNet = (CSharpControllerTarget) "AspNet";
    public static CSharpControllerTarget AspNetCore = (CSharpControllerTarget) "AspNetCore";
    public static implicit operator CSharpControllerTarget(string value)
    {
        return new CSharpControllerTarget { Value = value };
    }
}
#endregion
#region CSharpControllerRouteNamingStrategy
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<CSharpControllerRouteNamingStrategy>))]
public partial class CSharpControllerRouteNamingStrategy : Enumeration
{
    public static CSharpControllerRouteNamingStrategy None = (CSharpControllerRouteNamingStrategy) "None";
    public static CSharpControllerRouteNamingStrategy OperationId = (CSharpControllerRouteNamingStrategy) "OperationId";
    public static implicit operator CSharpControllerRouteNamingStrategy(string value)
    {
        return new CSharpControllerRouteNamingStrategy { Value = value };
    }
}
#endregion
#region TypeScriptTemplate
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<TypeScriptTemplate>))]
public partial class TypeScriptTemplate : Enumeration
{
    public static TypeScriptTemplate JQueryCallbacks = (TypeScriptTemplate) "JQueryCallbacks";
    public static TypeScriptTemplate JQueryPromises = (TypeScriptTemplate) "JQueryPromises";
    public static TypeScriptTemplate AngularJS = (TypeScriptTemplate) "AngularJS";
    public static TypeScriptTemplate Angular = (TypeScriptTemplate) "Angular";
    public static TypeScriptTemplate Fetch = (TypeScriptTemplate) "Fetch";
    public static TypeScriptTemplate Aurelia = (TypeScriptTemplate) "Aurelia";
    public static TypeScriptTemplate Axios = (TypeScriptTemplate) "Axios";
    public static implicit operator TypeScriptTemplate(string value)
    {
        return new TypeScriptTemplate { Value = value };
    }
}
#endregion
#region PromiseType
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<PromiseType>))]
public partial class PromiseType : Enumeration
{
    public static PromiseType Promise = (PromiseType) "Promise";
    public static PromiseType QPromise = (PromiseType) "QPromise";
    public static implicit operator PromiseType(string value)
    {
        return new PromiseType { Value = value };
    }
}
#endregion
#region HttpClass
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<HttpClass>))]
public partial class HttpClass : Enumeration
{
    public static HttpClass Http = (HttpClass) "Http";
    public static HttpClass HttpClient = (HttpClass) "HttpClient";
    public static implicit operator HttpClass(string value)
    {
        return new HttpClass { Value = value };
    }
}
#endregion
#region InjectionTokenType
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<InjectionTokenType>))]
public partial class InjectionTokenType : Enumeration
{
    public static InjectionTokenType OpaqueToken = (InjectionTokenType) "OpaqueToken";
    public static InjectionTokenType InjectionToken = (InjectionTokenType) "InjectionToken";
    public static implicit operator InjectionTokenType(string value)
    {
        return new InjectionTokenType { Value = value };
    }
}
#endregion
#region TypeScriptDateTimeType
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<TypeScriptDateTimeType>))]
public partial class TypeScriptDateTimeType : Enumeration
{
    public static TypeScriptDateTimeType Date = (TypeScriptDateTimeType) "Date";
    public static TypeScriptDateTimeType MomentJS = (TypeScriptDateTimeType) "MomentJS";
    public static TypeScriptDateTimeType String = (TypeScriptDateTimeType) "String";
    public static TypeScriptDateTimeType OffsetMomentJS = (TypeScriptDateTimeType) "OffsetMomentJS";
    public static implicit operator TypeScriptDateTimeType(string value)
    {
        return new TypeScriptDateTimeType { Value = value };
    }
}
#endregion
#region TypeScriptNullValue
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<TypeScriptNullValue>))]
public partial class TypeScriptNullValue : Enumeration
{
    public static TypeScriptNullValue Null = (TypeScriptNullValue) "Null";
    public static TypeScriptNullValue Undefined = (TypeScriptNullValue) "Undefined";
    public static implicit operator TypeScriptNullValue(string value)
    {
        return new TypeScriptNullValue { Value = value };
    }
}
#endregion
#region TypeScriptTypeStyle
/// <summary>Used within <see cref="NSwagTasks"/>.</summary>
[PublicAPI]
[Serializable]
[ExcludeFromCodeCoverage]
[TypeConverter(typeof(TypeConverter<TypeScriptTypeStyle>))]
public partial class TypeScriptTypeStyle : Enumeration
{
    public static TypeScriptTypeStyle Interface = (TypeScriptTypeStyle) "Interface";
    public static TypeScriptTypeStyle Class = (TypeScriptTypeStyle) "Class";
    public static TypeScriptTypeStyle KnockoutClass = (TypeScriptTypeStyle) "KnockoutClass";
    public static implicit operator TypeScriptTypeStyle(string value)
    {
        return new TypeScriptTypeStyle { Value = value };
    }
}
#endregion
