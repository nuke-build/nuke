// Copyright Matthias Koch, Sebastian Karasek 2018.
// Distributed under the MIT License.
// https://github.com/nuke-build/nuke/blob/master/LICENSE

// Generated with Nuke.CodeGeneration, LOCAL VERSION.
// Generated from https://github.com/nuke-build/tools/blob/master/metadata/ReportGenerator.json.

using JetBrains.Annotations;
using Nuke.Common.Tools;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.ReportGenerator
{
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class ReportGeneratorTasks
    {
        /// <summary><p>Path to the ReportGenerator executable.</p></summary>
        public static string ReportGeneratorPath => ToolPathResolver.GetPackageExecutable("ReportGenerator", "ReportGenerator.exe");
        static partial void PreProcess(ReportGeneratorSettings toolSettings);
        static partial void PostProcess(ReportGeneratorSettings toolSettings);
        /// <summary><p>ReportGenerator converts XML reports generated by OpenCover, PartCover, dotCover, Visual Studio, NCover or Cobertura into human readable reports in various formats.</p><p>The reports do not only show the coverage quota, but also include the source code and visualize which lines have been covered.</p><p>ReportGenerator supports merging several reports into one. It is also possible to pass one XML file containing several reports to ReportGenerator (e.g. a build log file).</p><p>The following <a href="https://github.com/danielpalme/ReportGenerator/wiki/Output-formats">output formats</a> are supported by ReportGenerator:<ul><li>HTML, HTMLSummary, HTMLInline, HTMLChart, <a href="https://en.wikipedia.org/wiki/MHTML">MHTML</a></li><li>XML, XMLSummary</li><li>Latex, LatexSummary</li><li>TextSummary</li><li>CsvSummary</li><li>PngChart</li><li>Badges</li><li><a href="https://github.com/danielpalme/ReportGenerator/wiki/Custom-reports">Custom reports</a></li></ul></p><p>Compatibility:<ul><li><a href="https://github.com/OpenCover/opencover">OpenCover</a></li><li><a href="https://github.com/sawilde/partcover.net4">PartCover 4.0</a></li><li><a href="http://sourceforge.net/projects/partcover">PartCover 2.2, 2.3</a></li><li><a href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html">dotCover</a> (/ReportType=DetailedXML)</li><li>Visual Studio (<a href="https://github.com/danielpalme/ReportGenerator/wiki/Visual-Studio-Coverage-Tools#vstestconsoleexe">vstest.console.exe</a>, <a href="https://github.com/danielpalme/ReportGenerator/wiki/Visual-Studio-Coverage-Tools#codecoverageexe">CodeCoverage.exe</a>)</li><li><a href="http://www.ncover.com/download/current">NCover</a> (tested version 1.5.8, other versions may not work)</li><li><a href="https://github.com/cobertura/cobertura">Cobertura</a></li><li>Mono (<a href="http://www.mono-project.com/docs/debug+profile/profile/profiler/#analyzing-the-profile-data">mprof-report</a>)</li></ul></p><p>For more details, visit the <a href="https://github.com/danielpalme/ReportGenerator">official website</a>.</p></summary>
        public static void ReportGenerator(Configure<ReportGeneratorSettings> configurator = null, ProcessSettings processSettings = null)
        {
            var toolSettings = configurator.InvokeSafe(new ReportGeneratorSettings());
            PreProcess(toolSettings);
            var process = ProcessTasks.StartProcess(toolSettings, processSettings);
            process.AssertZeroExitCode();
            PostProcess(toolSettings);
        }
    }
    #region ReportGeneratorSettings
    /// <summary><p>Used within <see cref="ReportGeneratorTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class ReportGeneratorSettings : ToolSettings
    {
        /// <summary><p>Path to the ReportGenerator executable.</p></summary>
        public override string ToolPath => base.ToolPath ?? ReportGeneratorTasks.ReportGeneratorPath;
        /// <summary><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        public virtual IReadOnlyList<string> Reports => ReportsInternal.AsReadOnly();
        internal List<string> ReportsInternal { get; set; } = new List<string>();
        /// <summary><p>The directory where the generated report should be saved.</p></summary>
        public virtual string TargetDirectory { get; internal set; }
        /// <summary><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        public virtual IReadOnlyList<ReportTypes> ReportTypes => ReportTypesInternal.AsReadOnly();
        internal List<ReportTypes> ReportTypesInternal { get; set; } = new List<ReportTypes>();
        /// <summary><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        public virtual IReadOnlyList<string> SourceDirectories => SourceDirectoriesInternal.AsReadOnly();
        internal List<string> SourceDirectoriesInternal { get; set; } = new List<string>();
        /// <summary><p>Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.</p></summary>
        public virtual string HistoryDirectory { get; internal set; }
        /// <summary><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        public virtual IReadOnlyList<string> AssemblyFilters => AssemblyFiltersInternal.AsReadOnly();
        internal List<string> AssemblyFiltersInternal { get; set; } = new List<string>();
        /// <summary><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        public virtual IReadOnlyList<string> ClassFilters => ClassFiltersInternal.AsReadOnly();
        internal List<string> ClassFiltersInternal { get; set; } = new List<string>();
        /// <summary><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        public virtual IReadOnlyList<string> FileFilters => FileFiltersInternal.AsReadOnly();
        internal List<string> FileFiltersInternal { get; set; } = new List<string>();
        /// <summary><p>Optional tag or build version.</p></summary>
        public virtual string Tag { get; internal set; }
        /// <summary><p>The verbosity level of the log messages. Default is Verbose.</p></summary>
        public virtual ReportGeneratorVerbosity Verbosity { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("-reports:{value}", Reports, separator: ';')
              .Add("-targetdir:{value}", TargetDirectory)
              .Add("-reporttypes:{value}", ReportTypes, separator: ';')
              .Add("-sourcedirs:{value}", SourceDirectories, separator: ';')
              .Add("-historydir:{value}", HistoryDirectory)
              .Add("-assemblyfilters:{value}", AssemblyFilters, separator: ';')
              .Add("-classfilters:{value}", ClassFilters, separator: ';')
              .Add("-classfilters:{value}", FileFilters, separator: ';')
              .Add("-tag:{value}", Tag)
              .Add("-verbosity:{value}", Verbosity);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region ReportGeneratorSettingsExtensions
    /// <summary><p>Used within <see cref="ReportGeneratorTasks"/>.</p></summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class ReportGeneratorSettingsExtensions
    {
        #region Reports
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.Reports"/> to a new list.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetReports(this ReportGeneratorSettings toolSettings, params string[] reports)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportsInternal = reports.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.Reports"/> to a new list.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetReports(this ReportGeneratorSettings toolSettings, IEnumerable<string> reports)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportsInternal = reports.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.Reports"/>.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddReports(this ReportGeneratorSettings toolSettings, params string[] reports)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportsInternal.AddRange(reports);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.Reports"/>.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddReports(this ReportGeneratorSettings toolSettings, IEnumerable<string> reports)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportsInternal.AddRange(reports);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.Reports"/>.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearReports(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportsInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.Reports"/>.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveReports(this ReportGeneratorSettings toolSettings, params string[] reports)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(reports);
            toolSettings.ReportsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.Reports"/>.</em></p><p>The coverage reports that should be parsed (separated by semicolon). Wildcards are allowed.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveReports(this ReportGeneratorSettings toolSettings, IEnumerable<string> reports)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(reports);
            toolSettings.ReportsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TargetDirectory
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.TargetDirectory"/>.</em></p><p>The directory where the generated report should be saved.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetTargetDirectory(this ReportGeneratorSettings toolSettings, string targetDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDirectory = targetDirectory;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="ReportGeneratorSettings.TargetDirectory"/>.</em></p><p>The directory where the generated report should be saved.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ResetTargetDirectory(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetDirectory = null;
            return toolSettings;
        }
        #endregion
        #region ReportTypes
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.ReportTypes"/> to a new list.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetReportTypes(this ReportGeneratorSettings toolSettings, params ReportTypes[] reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportTypesInternal = reportTypes.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.ReportTypes"/> to a new list.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetReportTypes(this ReportGeneratorSettings toolSettings, IEnumerable<ReportTypes> reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportTypesInternal = reportTypes.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.ReportTypes"/>.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddReportTypes(this ReportGeneratorSettings toolSettings, params ReportTypes[] reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportTypesInternal.AddRange(reportTypes);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.ReportTypes"/>.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddReportTypes(this ReportGeneratorSettings toolSettings, IEnumerable<ReportTypes> reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportTypesInternal.AddRange(reportTypes);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.ReportTypes"/>.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearReportTypes(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReportTypesInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.ReportTypes"/>.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveReportTypes(this ReportGeneratorSettings toolSettings, params ReportTypes[] reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<ReportTypes>(reportTypes);
            toolSettings.ReportTypesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.ReportTypes"/>.</em></p><p>The output formats and scope (separated by semicolon). Default is Html.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveReportTypes(this ReportGeneratorSettings toolSettings, IEnumerable<ReportTypes> reportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<ReportTypes>(reportTypes);
            toolSettings.ReportTypesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SourceDirectories
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.SourceDirectories"/> to a new list.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetSourceDirectories(this ReportGeneratorSettings toolSettings, params string[] sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceDirectoriesInternal = sourceDirectories.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.SourceDirectories"/> to a new list.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetSourceDirectories(this ReportGeneratorSettings toolSettings, IEnumerable<string> sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceDirectoriesInternal = sourceDirectories.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.SourceDirectories"/>.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddSourceDirectories(this ReportGeneratorSettings toolSettings, params string[] sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceDirectoriesInternal.AddRange(sourceDirectories);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.SourceDirectories"/>.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddSourceDirectories(this ReportGeneratorSettings toolSettings, IEnumerable<string> sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceDirectoriesInternal.AddRange(sourceDirectories);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.SourceDirectories"/>.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearSourceDirectories(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceDirectoriesInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.SourceDirectories"/>.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveSourceDirectories(this ReportGeneratorSettings toolSettings, params string[] sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sourceDirectories);
            toolSettings.SourceDirectoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.SourceDirectories"/>.</em></p><p>Optional directories which contain the corresponding source code (separated by semicolon). The source files are used if coverage report contains classes without path information.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveSourceDirectories(this ReportGeneratorSettings toolSettings, IEnumerable<string> sourceDirectories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sourceDirectories);
            toolSettings.SourceDirectoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HistoryDirectory
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.HistoryDirectory"/>.</em></p><p>Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetHistoryDirectory(this ReportGeneratorSettings toolSettings, string historyDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HistoryDirectory = historyDirectory;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="ReportGeneratorSettings.HistoryDirectory"/>.</em></p><p>Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ResetHistoryDirectory(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HistoryDirectory = null;
            return toolSettings;
        }
        #endregion
        #region AssemblyFilters
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.AssemblyFilters"/> to a new list.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetAssemblyFilters(this ReportGeneratorSettings toolSettings, params string[] assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyFiltersInternal = assemblyFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.AssemblyFilters"/> to a new list.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetAssemblyFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyFiltersInternal = assemblyFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.AssemblyFilters"/>.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddAssemblyFilters(this ReportGeneratorSettings toolSettings, params string[] assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyFiltersInternal.AddRange(assemblyFilters);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.AssemblyFilters"/>.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddAssemblyFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyFiltersInternal.AddRange(assemblyFilters);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.AssemblyFilters"/>.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearAssemblyFilters(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyFiltersInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.AssemblyFilters"/>.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveAssemblyFilters(this ReportGeneratorSettings toolSettings, params string[] assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assemblyFilters);
            toolSettings.AssemblyFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.AssemblyFilters"/>.</em></p><p>Optional list of assemblies that should be included (+) or excluded (-) in the report. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveAssemblyFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> assemblyFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assemblyFilters);
            toolSettings.AssemblyFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ClassFilters
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.ClassFilters"/> to a new list.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetClassFilters(this ReportGeneratorSettings toolSettings, params string[] classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassFiltersInternal = classFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.ClassFilters"/> to a new list.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetClassFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassFiltersInternal = classFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.ClassFilters"/>.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddClassFilters(this ReportGeneratorSettings toolSettings, params string[] classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassFiltersInternal.AddRange(classFilters);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.ClassFilters"/>.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddClassFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassFiltersInternal.AddRange(classFilters);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.ClassFilters"/>.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearClassFilters(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassFiltersInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.ClassFilters"/>.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveClassFilters(this ReportGeneratorSettings toolSettings, params string[] classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classFilters);
            toolSettings.ClassFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.ClassFilters"/>.</em></p><p>Optional list of classes that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveClassFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> classFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classFilters);
            toolSettings.ClassFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region FileFilters
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.FileFilters"/> to a new list.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetFileFilters(this ReportGeneratorSettings toolSettings, params string[] fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileFiltersInternal = fileFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.FileFilters"/> to a new list.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetFileFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileFiltersInternal = fileFilters.ToList();
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.FileFilters"/>.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddFileFilters(this ReportGeneratorSettings toolSettings, params string[] fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileFiltersInternal.AddRange(fileFilters);
            return toolSettings;
        }
        /// <summary><p><em>Adds values to <see cref="ReportGeneratorSettings.FileFilters"/>.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings AddFileFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileFiltersInternal.AddRange(fileFilters);
            return toolSettings;
        }
        /// <summary><p><em>Clears <see cref="ReportGeneratorSettings.FileFilters"/>.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ClearFileFilters(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FileFiltersInternal.Clear();
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.FileFilters"/>.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveFileFilters(this ReportGeneratorSettings toolSettings, params string[] fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(fileFilters);
            toolSettings.FileFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary><p><em>Removes values from <see cref="ReportGeneratorSettings.FileFilters"/>.</em></p><p>Optional list of files that should be included (+) or excluded (-) in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed. Default is +*.</p></summary>
        [Pure]
        public static ReportGeneratorSettings RemoveFileFilters(this ReportGeneratorSettings toolSettings, IEnumerable<string> fileFilters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(fileFilters);
            toolSettings.FileFiltersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tag
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.Tag"/>.</em></p><p>Optional tag or build version.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetTag(this ReportGeneratorSettings toolSettings, string tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tag = tag;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="ReportGeneratorSettings.Tag"/>.</em></p><p>Optional tag or build version.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ResetTag(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tag = null;
            return toolSettings;
        }
        #endregion
        #region Verbosity
        /// <summary><p><em>Sets <see cref="ReportGeneratorSettings.Verbosity"/>.</em></p><p>The verbosity level of the log messages. Default is Verbose.</p></summary>
        [Pure]
        public static ReportGeneratorSettings SetVerbosity(this ReportGeneratorSettings toolSettings, ReportGeneratorVerbosity verbosity)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbosity = verbosity;
            return toolSettings;
        }
        /// <summary><p><em>Resets <see cref="ReportGeneratorSettings.Verbosity"/>.</em></p><p>The verbosity level of the log messages. Default is Verbose.</p></summary>
        [Pure]
        public static ReportGeneratorSettings ResetVerbosity(this ReportGeneratorSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbosity = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region ReportTypes
    /// <summary><p>Used within <see cref="ReportGeneratorTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class ReportTypes : Enumeration
    {
        public static ReportTypes Badges = new ReportTypes { Value = "Badges" };
        public static ReportTypes CsvSummary = new ReportTypes { Value = "CsvSummary" };
        public static ReportTypes Html = new ReportTypes { Value = "Html" };
        public static ReportTypes HtmlInline = new ReportTypes { Value = "HtmlInline" };
        public static ReportTypes HtmlChart = new ReportTypes { Value = "HtmlChart" };
        public static ReportTypes HtmlSummary = new ReportTypes { Value = "HtmlSummary" };
        public static ReportTypes Latex = new ReportTypes { Value = "Latex" };
        public static ReportTypes LatexSummary = new ReportTypes { Value = "LatexSummary" };
        public static ReportTypes MHtml = new ReportTypes { Value = "MHtml" };
        public static ReportTypes PngChart = new ReportTypes { Value = "PngChart" };
        public static ReportTypes TextSummary = new ReportTypes { Value = "TextSummary" };
        public static ReportTypes Xml = new ReportTypes { Value = "Xml" };
        public static ReportTypes XmlSummary = new ReportTypes { Value = "XmlSummary" };
    }
    #endregion
    #region ReportGeneratorVerbosity
    /// <summary><p>Used within <see cref="ReportGeneratorTasks"/>.</p></summary>
    [PublicAPI]
    [Serializable]
    public partial class ReportGeneratorVerbosity : Enumeration
    {
        public static ReportGeneratorVerbosity Off = new ReportGeneratorVerbosity { Value = "Off" };
        public static ReportGeneratorVerbosity Verbose = new ReportGeneratorVerbosity { Value = "Verbose" };
        public static ReportGeneratorVerbosity Info = new ReportGeneratorVerbosity { Value = "Info" };
        public static ReportGeneratorVerbosity Warning = new ReportGeneratorVerbosity { Value = "Warning" };
        public static ReportGeneratorVerbosity Error = new ReportGeneratorVerbosity { Value = "Error" };
    }
    #endregion
}
