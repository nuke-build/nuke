{
  "$schema": "https://raw.githubusercontent.com/nuke-build/nuke/master/source/Nuke.CodeGeneration/schema.json",
  "references": [
    "https://raw.githubusercontent.com/aspnet/EntityFramework.Docs/master/entity-framework/core/miscellaneous/cli/dotnet.md"
  ],
  "name": "EntityFramework",
  "officialUrl": "https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet",
  "help": "The command-line interface (CLI) tools for Entity Framework Core perform design-time development tasks. For example, they create migrations, apply <a href=\"https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations?view=aspnetcore-2.0#introduction-to-migrations\">migrations</a>, and generate code for a model based on an existing database. The commands are an extension to the cross-platform <a href=\"https://docs.microsoft.com/en-us/dotnet/core/tools\">dotnet</a> command, which is part of the <a href=\"https://www.microsoft.com/net/core\">.NET Core SDK</a>. These tools work with .NET Core projects.<para/>If you're using Visual Studio, we recommend the <a href=\"https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell\">Package Manager Console tools</a> instead:<para/><ul><li>They automatically work with the current project selected in the Package Manager Console without requiring that you manually switch directories.</li><li>They automatically open files generated by a command after the command is completed.</li></ul>",
  "pathExecutable": "dotnet",
  "tasks": [
    {
      "help": "The <c>dotnet ef database drop</c> command is used to drop the database.",
      "postfix": "DatabaseDrop",
      "definiteArgument": "ef database drop",
      "settingsClass": {
        "properties": [
          {
            "name": "Force",
            "type": "bool",
            "format": "--force",
            "help": "Don't confirm."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "help": "Show which database would be dropped, but don't drop it."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef database update</c> command is used to update the database to the last migration or to a specified migration.",
      "postfix": "DatabaseUpdate",
      "definiteArgument": "ef database update",
      "settingsClass": {
        "properties": [
          {
            "name": "Migration",
            "type": "string",
            "format": "{value}",
            "help": "The target migration. Migrations may be identified by name or by ID. The number 0 is a special case that means before the first migration and causes all migrations to be reverted. If no migration is specified, the command defaults to the last migration."
          },
          {
            "name": "Connection",
            "type": "string",
            "format": "--connection {value}",
            "help": "The connection string to the database. Defaults to the one specified in <c>AddDbContext</c> or <c>OnConfiguring</c>. Added in EF Core 5.0."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef dbcontext info</c> command is used to get information about a <c>DbContext</c> type.",
      "postfix": "DbContextInfo",
      "definiteArgument": "ef dbcontext info",
      "settingsClass": {}
    },
    {
      "help": "The <c>dotnet ef dbcontext list</c> command is used to list available <c>DbContext</c> types.",
      "postfix": "DbContextList",
      "definiteArgument": "ef dbcontext list",
      "settingsClass": {}
    },
    {
      "help": "The <c>dotnet ef dbcontext scaffold</c> command is used to generate code for a <c>DbContext</c> and entity types for a database. In order for this command to generate an entity type, the database table must have a primary key.",
      "postfix": "DbContextScaffold",
      "definiteArgument": "ef dbcontext scaffold",
      "settingsClass": {
        "properties": [
          {
            "name": "Connection",
            "type": "string",
            "format": "{value}",
            "help": "The connection string to the database. For ASP.NET Core 2.x projects, the value can be <em>name=&lt;name of connection string&gt;</em>. In that case the name comes from the configuration sources that are set up for the project."
          },
          {
            "name": "Provider",
            "type": "string",
            "format": "{value}",
            "help": "The provider to use. Typically this is the name of the NuGet package, for example: <c>Microsoft.EntityFrameworkCore.SqlServer.</c>"
          },
          {
            "name": "DataAnnotations",
            "type": "bool",
            "format": "--data-annotations",
            "help": "Use attributes to configure the model (where possible). If this option is omitted, only the fluent API is used."
          },
          {
            "name": "Context",
            "type": "string",
            "format": "--context {value}",
            "help": "The name of the <c>DbContext</c> class to generate."
          },
          {
            "name": "ContextDirectory",
            "type": "string",
            "format": "--context-dir {value}",
            "help": "The directory to put the <c>DbContext</c> class file in. Paths are relative to the project directory. Namespaces are derived from the folder names."
          },
          {
            "name": "ContextNamespace",
            "type": "string",
            "format": "--context-namespace {value}",
            "help": "The namespace to use for the generated <c>DbContext</c> class. Note: overrides <c>--namespace</c>. Added in EF Core 5.0."
          },
          {
            "name": "Force",
            "type": "bool",
            "format": "--force",
            "help": "Overwrite existing files."
          },
          {
            "name": "OutputDirectory",
            "type": "string",
            "format": "--output-dir {value}",
            "help": "The directory to put entity class files in. Paths are relative to the project directory."
          },
          {
            "name": "Namespace",
            "type": "string",
            "format": "--namespace {value}",
            "help": "The namespace to use for all generated classes. Defaults to generated from the root namespace and the output directory. Added in EF Core 5.0."
          },
          {
            "name": "Schemas",
            "type": "List<string>",
            "format": "--schema {value}",
            "help": "The schemas of tables to generate entity types for. To specify multiple schemas, repeat <c>--schema</c> for each one. If this option is omitted, all schemas are included."
          },
          {
            "name": "Tables",
            "type": "List<string>",
            "format": "--table {value}",
            "help": "The tables to generate entity types for. To specify multiple tables, repeat <c>-t</c> or <c>--table</c> for each one. If this option is omitted, all tables are included."
          },
          {
            "name": "UseDatabaseNames",
            "type": "bool",
            "format": "--use-database-names",
            "help": "Use table and column names exactly as they appear in the database. If this option is omitted, database names are changed to more closely conform to C# name style conventions."
          },
          {
            "name": "NoOnConfiguring",
            "type": "bool",
            "format": "--no-onconfiguring",
            "help": "Suppresses generation of the <c>OnConfiguring</c> method in the generated <c>DbContext</c> class. Added in EF Core 5.0."
          },
          {
            "name": "NoPluralize",
            "type": "bool",
            "format": "--no-pluralize",
            "help": "Don't use the pluralizer. Added in EF Core 5.0"
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef dbcontext script</c> command is used to generate a SQL script from the <c>DbContext</c>, bypassing any migrations.",
      "postfix": "DbContextScript",
      "definiteArgument": "ef dbcontext script",
      "settingsClass": {
        "properties": [
          {
            "name": "Output",
            "type": "string",
            "format": "--output {value}",
            "help": "The file to write the result to."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef migrations add</c> command is used to add a new migration.",
      "postfix": "MigrationsAdd",
      "definiteArgument": "ef migrations add",
      "settingsClass": {
        "properties": [
          {
            "name": "Name",
            "type": "string",
            "format": "{value}",
            "help": "The name of the migration."
          },
          {
            "name": "OutputDirectory",
            "type": "string",
            "format": "--output-dir {value}",
            "help": "The directory (and sub-namespace) to use. Paths are relative to the project directory. Defaults to 'Migrations'."
          },
          {
            "name": "Namespace",
            "type": "string",
            "format": "--namespace {value}",
            "help": "The namespace to use for all generated classes. Defaults to generated from the root namespace and the output directory. Added in EF Core 5.0."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef migrations list</c> command is used to list available migrations.",
      "postfix": "MigrationsList",
      "definiteArgument": "ef migrations list",
      "settingsClass": {
        "properties": [
          {
            "name": "Connection",
            "type": "string",
            "format": "--connection {value}",
            "help": "The connection string to the database. Defaults to the one specified in AddDbContext or OnConfiguring. Added in EF Core 5.0."
          },
          {
            "name": "NoConnect",
            "type": "bool",
            "format": "--no-connect",
            "help": "Don't connect to the database. Added in EF Core 5.0."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef migrations remove</c> command is used to remove the last migration (rolls back the code changes that were done for the migration).",
      "postfix": "MigrationsRemove",
      "definiteArgument": "ef migrations remove",
      "settingsClass": {
        "properties": [
          {
            "name": "Force",
            "type": "bool",
            "format": "--force",
            "help": "Revert the migration (roll back the changes that were applied to the database)."
          }
        ]
      }
    },
    {
      "help": "The <c>dotnet ef migrations script</c> command is used to generate a SQL script from migrations.",
      "postfix": "MigrationsScript",
      "definiteArgument": "ef migrations script",
      "settingsClass": {
        "properties": [
          {
            "name": "From",
            "type": "string",
            "format": "{value}",
            "help": "The starting migration. Migrations may be identified by name or by ID. The number 0 is a special case that means <em>before the first migration</em>. Defaults to 0."
          },
          {
            "name": "To",
            "type": "string",
            "format": "{value}",
            "help": "The ending migration. Defaults to the last migration."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "--output {value}",
            "help": "The file to write the script to."
          },
          {
            "name": "Idempotent",
            "type": "bool",
            "format": "--idempotent",
            "help": "Generate a script that can be used on a database at any migration."
          },
          {
            "name": "NoTransactions",
            "type": "bool",
            "format": "--no-transactions",
            "help": "Don't generate SQL transaction statements. Added in EF Core 5.0."
          }
        ]
      }
    }
  ],
  "commonTaskProperties": [
    {
      "name": "Json",
      "type": "bool",
      "format": "--json",
      "help": "Show JSON output."
    },
    {
      "name": "Context",
      "type": "string",
      "format": "--context {value}",
      "help": "The <c>DbContext</c> class to use. Class name only or fully qualified with namespaces. If this option is omitted, EF Core will find the context class. If there are multiple context classes, this option is required."
    },
    {
      "name": "Project",
      "type": "string",
      "format": "--project {value}",
      "help": "Relative path to the project folder of the target project. Default value is the current folder."
    },
    {
      "name": "StartupProject",
      "type": "string",
      "format": "--startup-project {value}",
      "help": "Relative path to the project folder of the startup project. Default value is the current folder."
    },
    {
      "name": "Framework",
      "type": "string",
      "format": "--framework {value}",
      "help": "The <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/frameworks#supported-target-framework-versions\">Target Framework Moniker</a> for the <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/frameworks\">target framework</a>. Use when the project file specifies multiple target frameworks, and you want to select one of them."
    },
    {
      "name": "Configuration",
      "type": "string",
      "format": "--configuration {value}",
      "help": "The build configuration, for example: <c>Debug</c> or <c>Release.</c>"
    },
    {
      "name": "Runtime",
      "type": "string",
      "format": "--runtime {value}",
      "help": "The identifier of the target runtime to restore packages for. For a list of Runtime Identifiers (RIDs), see the <a href=\"https://docs.microsoft.com/en-us/dotnet/core/rid-catalog\">RID catalog</a>."
    },
    {
      "name": "NoBuild",
      "type": "bool",
      "format": "--no-build",
      "help": "Don't build the project. Intended to be used when the build is up-to-date."
    },
    {
      "name": "NoColor",
      "type": "bool",
      "format": "--no-color",
      "help": "Don't colorize output."
    },
    {
      "name": "PrefixOutput",
      "type": "bool",
      "format": "--prefix-output",
      "help": "Prefix output with level."
    },
    {
      "name": "Verbose",
      "type": "bool",
      "format": "--verbose",
      "help": "Show verbose output."
    }
  ]
}