{
  "$schema": "https://raw.githubusercontent.com/nuke-build/common/master/source/Nuke.CodeGeneration/schema.json",
  "references": [
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_completion.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_completion_bash.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_completion_zsh.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_create.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_dependency.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_dependency_build.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_dependency_list.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_dependency_update.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_env.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get_all.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get_hooks.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get_manifest.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get_notes.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_get_values.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_history.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_install.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_lint.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_list.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_package.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_plugin.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_plugin_install.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_plugin_list.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_plugin_uninstall.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_plugin_update.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_pull.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo_add.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo_index.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo_list.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo_remove.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_repo_update.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_rollback.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_search.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_search_hub.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_search_repo.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_show.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_show_all.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_show_chart.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_show_readme.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_show_values.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_status.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_template.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_test.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_uninstall.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_upgrade.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_verify.md",
    "https://raw.githubusercontent.com/helm/helm/master/docs/helm/helm_version.md"
  ],
  "name": "Helm",
  "officialUrl": "https://helm.sh/",
  "pathExecutable": "helm",
  "tasks": [
    {
      "help": "Generate the autocompletion script for Helm for the bash shell. To load completions in your current shell session: $ source &lt;(helm completion bash) To load completions for every new session, execute once: Linux:   $ helm completion bash &gt; /etc/bash_completion.d/helm MacOS:   $ helm completion bash &gt; /usr/local/etc/bash_completion.d/helm.",
      "postfix": "CompletionBash",
      "definiteArgument": "completion bash",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for bash."
          }
        ]
      }
    },
    {
      "help": "Generate the autocompletion script for Helm for the zsh shell. To load completions in your current shell session: $ source &lt;(helm completion zsh) To load completions for every new session, execute once: $ helm completion zsh &gt; \"${fpath[1]}/_helm\".",
      "postfix": "CompletionZsh",
      "definiteArgument": "completion zsh",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for zsh."
          }
        ]
      }
    },
    {
      "help": "This command creates a chart directory along with the common files and directories used in a chart. For example, 'helm create foo' will create a directory structure that looks something like this:     foo/     ├── .helmignore   # Contains patterns to ignore when packaging Helm charts.     ├── Chart.yaml    # Information about your chart     ├── values.yaml   # The default values for your templates     ├── charts/       # Charts that this chart depends on     └── templates/    # The template files         └── tests/    # The test files 'helm create' takes a path for an argument. If directories in the given path do not exist, Helm will attempt to create them as it goes. If the given destination exists and there are files in that directory, conflicting files will be overwritten, but other files will be left alone.",
      "postfix": "Create",
      "definiteArgument": "create",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for create."
          },
          {
            "name": "Starter",
            "type": "string",
            "format": "--starter {value}",
            "secret": false,
            "help": "The name or absolute path to Helm starter scaffold."
          },
          {
            "name": "Name",
            "type": "string",
            "format": "{value}",
            "help": "The name of chart directory to create."
          }
        ]
      }
    },
    {
      "help": "Build out the charts/ directory from the Chart.lock file. Build is used to reconstruct a chart's dependencies to the state specified in the lock file. This will not re-negotiate dependencies, as 'helm dependency update' does. If no lock file is found, 'helm dependency build' will mirror the behavior of 'helm dependency update'.",
      "postfix": "DependencyBuild",
      "definiteArgument": "dependency build",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for build."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Keyring containing public keys (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the packages against signatures."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}",
            "help": "The name of the chart to build."
          }
        ]
      }
    },
    {
      "help": "List all of the dependencies declared in a chart. This can take chart archives and chart directories as input. It will not alter the contents of a chart. This will produce an error if the chart cannot be loaded.",
      "postfix": "DependencyList",
      "definiteArgument": "dependency list",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for list."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}",
            "help": "The name of the chart to list."
          }
        ]
      }
    },
    {
      "help": "Update the on-disk dependencies to mirror Chart.yaml. This command verifies that the required charts, as expressed in 'Chart.yaml', are present in 'charts/' and are at an acceptable version. It will pull down the latest charts that satisfy the dependencies, and clean up old dependencies. On successful update, this will generate a lock file that can be used to rebuild the dependencies to an exact version. Dependencies are not required to be represented in 'Chart.yaml'. For that reason, an update command will not remove charts unless they are (a) present in the Chart.yaml file, but (b) at the wrong version.",
      "postfix": "DependencyUpdate",
      "definiteArgument": "dependency update",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for update."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Keyring containing public keys (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "SkipRefresh",
            "type": "bool",
            "format": "--skip-refresh",
            "secret": false,
            "help": "Do not refresh the local repository cache."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the packages against signatures."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}",
            "help": "The name of the chart to update."
          }
        ]
      }
    },
    {
      "help": "Env prints out all the environment information in use by Helm.",
      "postfix": "Env",
      "definiteArgument": "env",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for env."
          }
        ]
      }
    },
    {
      "help": "This command prints a human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.",
      "postfix": "GetAll",
      "definiteArgument": "get all",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for all."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "Get the named release with revision."
          },
          {
            "name": "Template",
            "type": "string",
            "format": "--template {value}",
            "secret": false,
            "help": "Go template for formatting the output, eg: {{.Release.Name}}."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\\n' separator.",
      "postfix": "GetHooks",
      "definiteArgument": "get hooks",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for hooks."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "Get the named release with revision."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to get the hooks for."
          }
        ]
      }
    },
    {
      "help": "This command fetches the generated manifest for a given release. A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.",
      "postfix": "GetManifest",
      "definiteArgument": "get manifest",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for manifest."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "Get the named release with revision."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to get the manifest for."
          }
        ]
      }
    },
    {
      "help": "This command shows notes provided by the chart of a named release.",
      "postfix": "GetNotes",
      "definiteArgument": "get notes",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for notes."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "Get the named release with revision."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command downloads a values file for a given release.",
      "postfix": "GetValues",
      "definiteArgument": "get values",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "All",
            "type": "bool",
            "format": "--all",
            "secret": false,
            "help": "Dump all (computed) values."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for values."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "Get the named release with revision."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to get the values for."
          }
        ]
      }
    },
    {
      "help": "History prints historical revisions for a given release. A default maximum of 256 revisions will be returned. Setting '--max' configures the maximum length of the revision list returned. The historical release set is printed as a formatted table, e.g:     $ helm history angry-bird     REVISION    UPDATED                     STATUS          CHART             APP VERSION     DESCRIPTION     1           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Initial install     2           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Upgraded successfully     3           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Rolled back to 2     4           Mon Oct 3 10:15:13 2016     deployed        alpine-0.1.0      1.0             Upgraded successfully.",
      "postfix": "History",
      "definiteArgument": "history",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for history."
          },
          {
            "name": "Max",
            "type": "long?",
            "format": "--max {value}",
            "secret": false,
            "help": "Maximum number of revision to include in history (default 256)."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to get the history for."
          }
        ]
      }
    },
    {
      "help": "This command installs a chart archive. The install argument must be a chart reference, a path to a packaged chart, a path to an unpacked chart directory or a URL. To override values in a chart, use either the '--values' flag and pass in a file or use the '--set' flag and pass configuration from the command line, to force a string value use '--set-string'. In case a value is large and therefore you want not to use neither '--values' nor '--set', use '--set-file' to read the single large value from file.     $ helm install -f myvalues.yaml myredis ./redis or     $ helm install --set name=prod myredis ./redis or     $ helm install --set-string long_int=1234567890 myredis ./redis or     $ helm install --set-file my_script=dothings.sh myredis ./redis You can specify the '--values'/'-f' flag multiple times. The priority will be given to the last (right-most) file specified. For example, if both myvalues.yaml and override.yaml contained a key called 'Test', the value set in override.yaml would take precedence:     $ helm install -f myvalues.yaml -f override.yaml  myredis ./redis You can specify the '--set' flag multiple times. The priority will be given to the last (right-most) set specified. For example, if both 'bar' and 'newbar' values are set for a key called 'foo', the 'newbar' value would take precedence:     $ helm install --set foo=bar --set foo=newbar  myredis ./redis To check the generated manifests of a release without installing the chart, the '--debug' and '--dry-run' flags can be combined. If --verify is set, the chart MUST have a provenance file, and the provenance file MUST pass all verification steps. There are five different ways you can express the chart you want to install: 1. By chart reference: helm install mymaria example/mariadb 2. By path to a packaged chart: helm install mynginx ./nginx-1.2.3.tgz 3. By path to an unpacked chart directory: helm install mynginx ./nginx 4. By absolute URL: helm install mynginx https://example.com/charts/nginx-1.2.3.tgz 5. By chart reference and repo url: helm install --repo https://example.com/charts/ mynginx nginx CHART REFERENCES A chart reference is a convenient way of referencing a chart in a chart repository. When you use a chart reference with a repo prefix ('example/mariadb'), Helm will look in the local configuration for a chart repository named 'example', and will then look for a chart in that repository whose name is 'mariadb'. It will install the latest stable version of that chart until you specify '--devel' flag to also include development version (alpha, beta, and release candidate releases), or supply a version number with the '--version' flag. To see the list of chart repositories, use 'helm repo list'. To search for charts in a repository, use 'helm search'.",
      "postfix": "Install",
      "definiteArgument": "install",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Atomic",
            "type": "bool",
            "format": "--atomic",
            "secret": false,
            "help": "If set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used."
          },
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "CreateNamespace",
            "type": "bool",
            "format": "--create-namespace",
            "secret": false,
            "help": "Create the release namespace if not present."
          },
          {
            "name": "DependencyUpdate",
            "type": "bool",
            "format": "--dependency-update",
            "secret": false,
            "help": "Run helm dependency update before installing the chart."
          },
          {
            "name": "Description",
            "type": "string",
            "format": "--description {value}",
            "secret": false,
            "help": "Add a custom description."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "DisableOpenapiValidation",
            "type": "bool",
            "format": "--disable-openapi-validation",
            "secret": false,
            "help": "If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "secret": false,
            "help": "Simulate an install."
          },
          {
            "name": "GenerateName",
            "type": "bool",
            "format": "--generate-name",
            "secret": false,
            "help": "Generate the name (and omit the NAME parameter)."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for install."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "NameTemplate",
            "type": "string",
            "format": "--name-template {value}",
            "secret": false,
            "help": "Specify template used to name the release."
          },
          {
            "name": "NoHooks",
            "type": "bool",
            "format": "--no-hooks",
            "secret": false,
            "help": "Prevent hooks from running during install."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "PostRenderer",
            "type": "string",
            "format": "--post-renderer {value}",
            "secret": false,
            "help": "The path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)."
          },
          {
            "name": "RenderSubchartNotes",
            "type": "bool",
            "format": "--render-subchart-notes",
            "secret": false,
            "help": "If set, render subchart notes along with the parent."
          },
          {
            "name": "Replace",
            "type": "bool",
            "format": "--replace",
            "secret": false,
            "help": "Re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Set",
            "type": "Dictionary<string, object>",
            "format": "--set {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SetFile",
            "type": "Dictionary<string, object>",
            "format": "--set-file {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)."
          },
          {
            "name": "SetString",
            "type": "Dictionary<string, object>",
            "format": "--set-string {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SkipCrds",
            "type": "bool",
            "format": "--skip-crds",
            "secret": false,
            "help": "If set, no CRDs will be installed. By default, CRDs are installed if not already present."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Values",
            "type": "List<string>",
            "format": "--values {value}",
            "secret": false,
            "help": "Specify values in a YAML file or a URL (can specify multiple)."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Wait",
            "type": "bool",
            "format": "--wait",
            "secret": false,
            "help": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout."
          },
          {
            "name": "Name",
            "type": "string",
            "format": "{value}"
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}",
            "help": "The name of the chart to install."
          }
        ]
      }
    },
    {
      "help": "This command takes a path to a chart and runs a series of tests to verify that the chart is well-formed. If the linter encounters things that will cause the chart to fail installation, it will emit [ERROR] messages. If it encounters issues that break with convention or recommendation, it will emit [WARNING] messages.",
      "postfix": "Lint",
      "definiteArgument": "lint",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for lint."
          },
          {
            "name": "Set",
            "type": "Dictionary<string, object>",
            "format": "--set {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SetFile",
            "type": "Dictionary<string, object>",
            "format": "--set-file {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)."
          },
          {
            "name": "SetString",
            "type": "Dictionary<string, object>",
            "format": "--set-string {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "Strict",
            "type": "bool",
            "format": "--strict",
            "secret": false,
            "help": "Fail on lint warnings."
          },
          {
            "name": "Values",
            "type": "List<string>",
            "format": "--values {value}",
            "secret": false,
            "help": "Specify values in a YAML file or a URL (can specify multiple)."
          },
          {
            "name": "WithSubcharts",
            "type": "bool",
            "format": "--with-subcharts",
            "secret": false,
            "help": "Lint dependent charts."
          },
          {
            "name": "Path",
            "type": "string",
            "format": "{value}",
            "help": "The Path to a chart."
          }
        ]
      }
    },
    {
      "help": "This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified). By default, it lists only releases that are deployed or failed. Flags like '--uninstalled' and '--all' will alter this behavior. Such flags can be combined: '--uninstalled --failed'. By default, items are sorted alphabetically. Use the '-d' flag to sort by release date. If the --filter flag is provided, it will be treated as a filter. Filters are regular expressions (Perl compatible) that are applied to the list of releases. Only items that match the filter will be returned.     $ helm list --filter 'ara[a-z]+'     NAME                UPDATED                     CHART     maudlin-arachnid    Mon May  9 16:07:08 2016    alpine-0.1.0 If no results are found, 'helm list' will exit 0, but with no output (or in the case of no '-q' flag, only headers). By default, up to 256 items may be returned. To limit this, use the '--max' flag. Setting '--max' to 0 will not return all results. Rather, it will return the server's default, which may be much higher than 256. Pairing the '--max' flag with the '--offset' flag allows you to page through results.",
      "postfix": "List",
      "definiteArgument": "list",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "All",
            "type": "bool",
            "format": "--all",
            "secret": false,
            "help": "Show all releases without any filter applied."
          },
          {
            "name": "AllNamespaces",
            "type": "bool",
            "format": "--all-namespaces",
            "secret": false,
            "help": "List releases across all namespaces."
          },
          {
            "name": "Date",
            "type": "bool",
            "format": "--date",
            "secret": false,
            "help": "Sort by release date."
          },
          {
            "name": "Deployed",
            "type": "bool",
            "format": "--deployed",
            "secret": false,
            "help": "Show deployed releases. If no other is specified, this will be automatically enabled."
          },
          {
            "name": "Failed",
            "type": "bool",
            "format": "--failed",
            "secret": false,
            "help": "Show failed releases."
          },
          {
            "name": "Filter",
            "type": "string",
            "format": "--filter {value}",
            "secret": false,
            "help": "The filter to use."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for list."
          },
          {
            "name": "Max",
            "type": "long?",
            "format": "--max {value}",
            "secret": false,
            "help": "Maximum number of releases to fetch (default 256)."
          },
          {
            "name": "Offset",
            "type": "long?",
            "format": "--offset {value}",
            "secret": false,
            "help": "Next release name in the list, used to offset from start value."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Pending",
            "type": "bool",
            "format": "--pending",
            "secret": false,
            "help": "Show pending releases."
          },
          {
            "name": "Reverse",
            "type": "bool",
            "format": "--reverse",
            "secret": false,
            "help": "Reverse the sort order."
          },
          {
            "name": "Short",
            "type": "bool",
            "format": "--short",
            "secret": false,
            "help": "Output short (quiet) listing format."
          },
          {
            "name": "Superseded",
            "type": "bool",
            "format": "--superseded",
            "secret": false,
            "help": "Show superseded releases."
          },
          {
            "name": "Uninstalled",
            "type": "bool",
            "format": "--uninstalled",
            "secret": false,
            "help": "Show uninstalled releases (if 'helm uninstall --keep-history' was used)."
          },
          {
            "name": "Uninstalling",
            "type": "bool",
            "format": "--uninstalling",
            "secret": false,
            "help": "Show releases that are currently being uninstalled."
          }
        ]
      }
    },
    {
      "help": "This command packages a chart into a versioned chart archive file. If a path is given, this will look at that path for a chart (which must contain a Chart.yaml file) and then package that directory. Versioned chart archives are used by Helm package repositories. To sign a chart, use the '--sign' flag. In most cases, you should also provide '--keyring path/to/secret/keys' and '--key keyname'.   $ helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg If '--keyring' is not specified, Helm usually defaults to the public keyring unless your environment is otherwise configured.",
      "postfix": "Package",
      "definiteArgument": "package",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "AppVersion",
            "type": "string",
            "format": "--app-version {value}",
            "secret": false,
            "help": "Set the appVersion on the chart to this version."
          },
          {
            "name": "DependencyUpdate",
            "type": "bool",
            "format": "--dependency-update",
            "secret": false,
            "help": "Update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging."
          },
          {
            "name": "Destination",
            "type": "string",
            "format": "--destination {value}",
            "secret": false,
            "help": "Location to write the chart. (default \".\")."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for package."
          },
          {
            "name": "Key",
            "type": "string",
            "format": "--key {value}",
            "secret": false,
            "help": "Name of the key to use when signing. Used if --sign is true."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of a public keyring (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Sign",
            "type": "bool",
            "format": "--sign",
            "secret": false,
            "help": "Use a PGP private key to sign this package."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Set the version on the chart to this semver version."
          },
          {
            "name": "ChartPaths",
            "type": "List<string>",
            "format": "{value}",
            "separator": " ",
            "help": "The paths to the charts to package."
          }
        ]
      }
    },
    {
      "help": "This command allows you to install a plugin from a url to a VCS repo or a local path.",
      "postfix": "PluginInstall",
      "definiteArgument": "plugin install",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for install."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify a version constraint. If this is not specified, the latest version is installed."
          },
          {
            "name": "Options",
            "type": "string",
            "format": "{value}"
          },
          {
            "name": "Paths",
            "type": "List<string>",
            "format": "{value}",
            "separator": " ",
            "help": "List of paths or urls of packages to install."
          }
        ]
      }
    },
    {
      "help": "List installed Helm plugins.",
      "postfix": "PluginList",
      "definiteArgument": "plugin list",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for list."
          }
        ]
      }
    },
    {
      "help": "Uninstall one or more Helm plugins.",
      "postfix": "PluginUninstall",
      "definiteArgument": "plugin uninstall",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for uninstall."
          },
          {
            "name": "Plugins",
            "type": "List<string>",
            "format": "{value}",
            "separator": " "
          }
        ]
      }
    },
    {
      "help": "Update one or more Helm plugins.",
      "postfix": "PluginUpdate",
      "definiteArgument": "plugin update",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for update."
          },
          {
            "name": "Plugins",
            "type": "List<string>",
            "format": "{value}",
            "separator": " ",
            "help": "List of plugins to update."
          }
        ]
      }
    },
    {
      "help": "Retrieve a package from a package repository, and download it locally. This is useful for fetching packages to inspect, modify, or repackage. It can also be used to perform cryptographic verification of a chart without installing the chart. There are options for unpacking the chart after download. This will create a directory for the chart and uncompress into that directory. If the --verify flag is specified, the requested chart MUST have a provenance file, and MUST pass the verification process. Failure in any part of this will result in an error, and the chart will not be saved locally.",
      "postfix": "Pull",
      "definiteArgument": "pull",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "Destination",
            "type": "string",
            "format": "--destination {value}",
            "secret": false,
            "help": "Location to write the chart. If this and tardir are specified, tardir is appended to this (default \".\")."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for pull."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "Prov",
            "type": "bool",
            "format": "--prov",
            "secret": false,
            "help": "Fetch the provenance file, but don't perform verification."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Untar",
            "type": "bool",
            "format": "--untar",
            "secret": false,
            "help": "If set to true, will untar the chart after downloading it."
          },
          {
            "name": "Untardir",
            "type": "string",
            "format": "--untardir {value}",
            "secret": false,
            "help": "If untar is specified, this flag specifies the name of the directory into which the chart is expanded (default \".\")."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Urls",
            "type": "List<string>",
            "format": "{value}",
            "separator": " "
          }
        ]
      }
    },
    {
      "help": "Add a chart repository.",
      "postfix": "RepoAdd",
      "definiteArgument": "repo add",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "ForceUpdate",
            "type": "bool",
            "format": "--force-update",
            "secret": false,
            "help": "Replace (overwrite) the repo if it already exists."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for add."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the repository."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "NoUpdate",
            "type": "bool",
            "format": "--no-update",
            "secret": false,
            "help": "Ignored. Formerly, it would disabled forced updates. It is deprecated by force-update."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username."
          },
          {
            "name": "Name",
            "type": "string",
            "format": "{value}",
            "help": "The name of the repository to add."
          },
          {
            "name": "Url",
            "type": "string",
            "format": "{value}",
            "help": "The url of the repository to add."
          }
        ]
      }
    },
    {
      "help": "Read the current directory and generate an index file based on the charts found. This tool is used for creating an 'index.yaml' file for a chart repository. To set an absolute URL to the charts, use '--url' flag. To merge the generated index with an existing index file, use the '--merge' flag. In this case, the charts found in the current directory will be merged into the existing index, with local charts taking priority over existing charts.",
      "postfix": "RepoIndex",
      "definiteArgument": "repo index",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for index."
          },
          {
            "name": "Merge",
            "type": "string",
            "format": "--merge {value}",
            "secret": false,
            "help": "Merge the generated index into the given index."
          },
          {
            "name": "Url",
            "type": "string",
            "format": "--url {value}",
            "secret": false,
            "help": "Url of chart repository."
          },
          {
            "name": "Directory",
            "type": "string",
            "format": "{value}",
            "help": "The directory of the repository."
          }
        ]
      }
    },
    {
      "help": "List chart repositories.",
      "postfix": "RepoList",
      "definiteArgument": "repo list",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for list."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          }
        ]
      }
    },
    {
      "help": "Remove one or more chart repositories.",
      "postfix": "RepoRemove",
      "definiteArgument": "repo remove",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for remove."
          },
          {
            "name": "Repositories",
            "type": "List<string>",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "Update gets the latest information about charts from the respective chart repositories. Information is cached locally, where it is used by commands like 'helm search'.",
      "postfix": "RepoUpdate",
      "definiteArgument": "repo update",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for update."
          }
        ]
      }
    },
    {
      "help": "This command rolls back a release to a previous revision. The first argument of the rollback command is the name of a release, and the second is a revision (version) number. If this argument is omitted, it will roll back to the previous release. To see revision numbers, run 'helm history RELEASE'.",
      "postfix": "Rollback",
      "definiteArgument": "rollback",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CleanupOnFail",
            "type": "bool",
            "format": "--cleanup-on-fail",
            "secret": false,
            "help": "Allow deletion of new resources created in this rollback when rollback fails."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "secret": false,
            "help": "Simulate a rollback."
          },
          {
            "name": "Force",
            "type": "bool",
            "format": "--force",
            "secret": false,
            "help": "Force resource update through delete/recreate if needed."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for rollback."
          },
          {
            "name": "NoHooks",
            "type": "bool",
            "format": "--no-hooks",
            "secret": false,
            "help": "Prevent hooks from running during rollback."
          },
          {
            "name": "RecreatePods",
            "type": "bool",
            "format": "--recreate-pods",
            "secret": false,
            "help": "Performs pods restart for the resource if applicable."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "Wait",
            "type": "bool",
            "format": "--wait",
            "secret": false,
            "help": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout."
          },
          {
            "name": "Release",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release."
          },
          {
            "name": "Revision",
            "type": "string",
            "format": "{value}",
            "help": "The revison to roll back."
          }
        ]
      }
    },
    {
      "help": "Search the Helm Hub or an instance of Monocular for Helm charts. The Helm Hub provides a centralized search for publicly available distributed charts. It is maintained by the Helm project. It can be visited at https://hub.helm.sh Monocular is a web-based application that enables the search and discovery of charts from multiple Helm Chart repositories. It is the codebase that powers the Helm Hub. You can find it at https://github.com/helm/monocular.",
      "postfix": "SearchHub",
      "definiteArgument": "search hub",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Endpoint",
            "type": "string",
            "format": "--endpoint {value}",
            "secret": false,
            "help": "Monocular instance to query for charts (default \"https://hub.helm.sh\")."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for hub."
          },
          {
            "name": "MaxColWidth",
            "type": "uint?",
            "format": "--max-col-width {value}",
            "secret": false,
            "help": "Maximum column width for output table (default 50)."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Keyword",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "Search reads through all of the repositories configured on the system, and looks for matches. Search of these repositories uses the metadata stored on the system. It will display the latest stable versions of the charts found. If you specify the --devel flag, the output will include pre-release versions. If you want to search using a version constraint, use --version. Examples:     # Search for stable release versions matching the keyword \"nginx\"     $ helm search repo nginx     # Search for release versions matching the keyword \"nginx\", including pre-release versions     $ helm search repo nginx --devel     # Search for the latest stable release for nginx-ingress with a major version of 1     $ helm search repo nginx-ingress --version ^1.0.0 Repositories are managed with 'helm repo' commands.",
      "postfix": "SearchRepo",
      "definiteArgument": "search repo",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for repo."
          },
          {
            "name": "MaxColWidth",
            "type": "uint?",
            "format": "--max-col-width {value}",
            "secret": false,
            "help": "Maximum column width for output table (default 50)."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Regexp",
            "type": "bool",
            "format": "--regexp",
            "secret": false,
            "help": "Use regular expressions for searching repositories you have added."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Search using semantic versioning constraints on repositories you have added."
          },
          {
            "name": "Versions",
            "type": "bool",
            "format": "--versions",
            "secret": false,
            "help": "Show the long listing, with each version of each chart on its own line, for repositories you have added."
          },
          {
            "name": "Keyword",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command inspects a chart (directory, file, or URL) and displays all its content (values.yaml, Charts.yaml, README).",
      "postfix": "ShowAll",
      "definiteArgument": "show all",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for all."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command inspects a chart (directory, file, or URL) and displays the contents of the Charts.yaml file.",
      "postfix": "ShowChart",
      "definiteArgument": "show chart",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for chart."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command inspects a chart (directory, file, or URL) and displays the contents of the README file.",
      "postfix": "ShowReadme",
      "definiteArgument": "show readme",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for readme."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command inspects a chart (directory, file, or URL) and displays the contents of the values.yaml file.",
      "postfix": "ShowValues",
      "definiteArgument": "show values",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for values."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "This command shows the status of a named release. The status consists of: - last deployment time - k8s namespace in which the release lives - state of the release (can be: unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade or pending-rollback) - list of resources that this release consists of, sorted by kind - details on last test suite run, if applicable - additional notes provided by the chart.",
      "postfix": "Status",
      "definiteArgument": "status",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for status."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Revision",
            "type": "long?",
            "format": "--revision {value}",
            "secret": false,
            "help": "If set, display the status of the named release with revision."
          },
          {
            "name": "ReleaseName",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to get the status for."
          }
        ]
      }
    },
    {
      "help": "Render chart templates locally and display the output. Any values that would normally be looked up or retrieved in-cluster will be faked locally. Additionally, none of the server-side testing of chart validity (e.g. whether an API is supported) is done.",
      "postfix": "Template",
      "definiteArgument": "template",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "ApiVersions",
            "type": "Dictionary<string, object>",
            "format": "--api-versions {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Kubernetes api versions used for Capabilities.APIVersions."
          },
          {
            "name": "Atomic",
            "type": "bool",
            "format": "--atomic",
            "secret": false,
            "help": "If set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used."
          },
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "CreateNamespace",
            "type": "bool",
            "format": "--create-namespace",
            "secret": false,
            "help": "Create the release namespace if not present."
          },
          {
            "name": "DependencyUpdate",
            "type": "bool",
            "format": "--dependency-update",
            "secret": false,
            "help": "Run helm dependency update before installing the chart."
          },
          {
            "name": "Description",
            "type": "string",
            "format": "--description {value}",
            "secret": false,
            "help": "Add a custom description."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "DisableOpenapiValidation",
            "type": "bool",
            "format": "--disable-openapi-validation",
            "secret": false,
            "help": "If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "secret": false,
            "help": "Simulate an install."
          },
          {
            "name": "GenerateName",
            "type": "bool",
            "format": "--generate-name",
            "secret": false,
            "help": "Generate the name (and omit the NAME parameter)."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for template."
          },
          {
            "name": "IncludeCrds",
            "type": "bool",
            "format": "--include-crds",
            "secret": false,
            "help": "Include CRDs in the templated output."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "IsUpgrade",
            "type": "bool",
            "format": "--is-upgrade",
            "secret": false,
            "help": "Set .Release.IsUpgrade instead of .Release.IsInstall."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "NameTemplate",
            "type": "string",
            "format": "--name-template {value}",
            "secret": false,
            "help": "Specify template used to name the release."
          },
          {
            "name": "NoHooks",
            "type": "bool",
            "format": "--no-hooks",
            "secret": false,
            "help": "Prevent hooks from running during install."
          },
          {
            "name": "OutputDir",
            "type": "string",
            "format": "--output-dir {value}",
            "secret": false,
            "help": "Writes the executed templates to files in output-dir instead of stdout."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "PostRenderer",
            "type": "string",
            "format": "--post-renderer {value}",
            "secret": false,
            "help": "The path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)."
          },
          {
            "name": "ReleaseName",
            "type": "bool",
            "format": "--release-name",
            "secret": false,
            "help": "Use release name in the output-dir path."
          },
          {
            "name": "RenderSubchartNotes",
            "type": "bool",
            "format": "--render-subchart-notes",
            "secret": false,
            "help": "If set, render subchart notes along with the parent."
          },
          {
            "name": "Replace",
            "type": "bool",
            "format": "--replace",
            "secret": false,
            "help": "Re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "Set",
            "type": "Dictionary<string, object>",
            "format": "--set {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SetFile",
            "type": "Dictionary<string, object>",
            "format": "--set-file {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)."
          },
          {
            "name": "SetString",
            "type": "Dictionary<string, object>",
            "format": "--set-string {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "ShowOnly",
            "type": "Dictionary<string, object>",
            "format": "--show-only {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Only show manifests rendered from the given templates."
          },
          {
            "name": "SkipCrds",
            "type": "bool",
            "format": "--skip-crds",
            "secret": false,
            "help": "If set, no CRDs will be installed. By default, CRDs are installed if not already present."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Validate",
            "type": "bool",
            "format": "--validate",
            "secret": false,
            "help": "Validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install."
          },
          {
            "name": "Values",
            "type": "List<string>",
            "format": "--values {value}",
            "secret": false,
            "help": "Specify values in a YAML file or a URL (can specify multiple)."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Wait",
            "type": "bool",
            "format": "--wait",
            "secret": false,
            "help": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout."
          },
          {
            "name": "Name",
            "type": "string",
            "format": "{value}"
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}"
          }
        ]
      }
    },
    {
      "help": "The test command runs the tests for a release. The argument this command takes is the name of a deployed release. The tests to be run are defined in the chart that was installed.",
      "postfix": "Test",
      "definiteArgument": "test",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for test."
          },
          {
            "name": "Logs",
            "type": "bool",
            "format": "--logs",
            "secret": false,
            "help": "Dump the logs from test pods (this runs after all tests are complete, but before any cleanup)."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "Release",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to test."
          }
        ]
      }
    },
    {
      "help": "This command takes a release name and uninstalls the release. It removes all of the resources associated with the last release of the chart as well as the release history, freeing it up for future use. Use the '--dry-run' flag to see which releases will be uninstalled without actually uninstalling them.",
      "postfix": "Uninstall",
      "definiteArgument": "uninstall",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Description",
            "type": "string",
            "format": "--description {value}",
            "secret": false,
            "help": "Add a custom description."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "secret": false,
            "help": "Simulate a uninstall."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for uninstall."
          },
          {
            "name": "KeepHistory",
            "type": "bool",
            "format": "--keep-history",
            "secret": false,
            "help": "Remove all associated resources and mark the release as deleted, but retain the release history."
          },
          {
            "name": "NoHooks",
            "type": "bool",
            "format": "--no-hooks",
            "secret": false,
            "help": "Prevent hooks from running during uninstallation."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "ReleaseNames",
            "type": "List<string>",
            "format": "{value}",
            "separator": " "
          }
        ]
      }
    },
    {
      "help": "This command upgrades a release to a new version of a chart. The upgrade arguments must be a release and chart. The chart argument can be either: a chart reference('example/mariadb'), a path to a chart directory, a packaged chart, or a fully qualified URL. For chart references, the latest version will be specified unless the '--version' flag is set. To override values in a chart, use either the '--values' flag and pass in a file or use the '--set' flag and pass configuration from the command line, to force string values, use '--set-string'. In case a value is large and therefore you want not to use neither '--values' nor '--set', use '--set-file' to read the single large value from file. You can specify the '--values'/'-f' flag multiple times. The priority will be given to the last (right-most) file specified. For example, if both myvalues.yaml and override.yaml contained a key called 'Test', the value set in override.yaml would take precedence:     $ helm upgrade -f myvalues.yaml -f override.yaml redis ./redis You can specify the '--set' flag multiple times. The priority will be given to the last (right-most) set specified. For example, if both 'bar' and 'newbar' values are set for a key called 'foo', the 'newbar' value would take precedence:     $ helm upgrade --set foo=bar --set foo=newbar redis ./redis.",
      "postfix": "Upgrade",
      "definiteArgument": "upgrade",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Atomic",
            "type": "bool",
            "format": "--atomic",
            "secret": false,
            "help": "If set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used."
          },
          {
            "name": "CaFile",
            "type": "string",
            "format": "--ca-file {value}",
            "secret": false,
            "help": "Verify certificates of HTTPS-enabled servers using this CA bundle."
          },
          {
            "name": "CertFile",
            "type": "string",
            "format": "--cert-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL certificate file."
          },
          {
            "name": "CleanupOnFail",
            "type": "bool",
            "format": "--cleanup-on-fail",
            "secret": false,
            "help": "Allow deletion of new resources created in this upgrade when upgrade fails."
          },
          {
            "name": "CreateNamespace",
            "type": "bool",
            "format": "--create-namespace",
            "secret": false,
            "help": "If --install is set, create the release namespace if not present."
          },
          {
            "name": "Description",
            "type": "string",
            "format": "--description {value}",
            "secret": false,
            "help": "Add a custom description."
          },
          {
            "name": "Devel",
            "type": "bool",
            "format": "--devel",
            "secret": false,
            "help": "Use development versions, too. Equivalent to version '&gt;0.0.0-0'. If --version is set, this is ignored."
          },
          {
            "name": "DisableOpenapiValidation",
            "type": "bool",
            "format": "--disable-openapi-validation",
            "secret": false,
            "help": "If set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema."
          },
          {
            "name": "DryRun",
            "type": "bool",
            "format": "--dry-run",
            "secret": false,
            "help": "Simulate an upgrade."
          },
          {
            "name": "Force",
            "type": "bool",
            "format": "--force",
            "secret": false,
            "help": "Force resource updates through a replacement strategy."
          },
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for upgrade."
          },
          {
            "name": "HistoryMax",
            "type": "long?",
            "format": "--history-max {value}",
            "secret": false,
            "help": "Limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)."
          },
          {
            "name": "InsecureSkipTlsVerify",
            "type": "bool",
            "format": "--insecure-skip-tls-verify",
            "secret": false,
            "help": "Skip tls certificate checks for the chart download."
          },
          {
            "name": "Install",
            "type": "bool",
            "format": "--install",
            "secret": false,
            "help": "If a release by this name doesn't already exist, run an install."
          },
          {
            "name": "KeyFile",
            "type": "string",
            "format": "--key-file {value}",
            "secret": false,
            "help": "Identify HTTPS client using this SSL key file."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "NoHooks",
            "type": "bool",
            "format": "--no-hooks",
            "secret": false,
            "help": "Disable pre/post upgrade hooks."
          },
          {
            "name": "Output",
            "type": "HelmOutputFormat",
            "format": "--output {value}",
            "secret": false,
            "help": "Prints the output in the specified format. Allowed values: table, json, yaml (default table)."
          },
          {
            "name": "Password",
            "type": "string",
            "format": "--password {value}",
            "secret": true,
            "help": "Chart repository password where to locate the requested chart."
          },
          {
            "name": "PostRenderer",
            "type": "string",
            "format": "--post-renderer {value}",
            "secret": false,
            "help": "The path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path (default exec)."
          },
          {
            "name": "RenderSubchartNotes",
            "type": "bool",
            "format": "--render-subchart-notes",
            "secret": false,
            "help": "If set, render subchart notes along with the parent."
          },
          {
            "name": "Repo",
            "type": "string",
            "format": "--repo {value}",
            "secret": false,
            "help": "Chart repository url where to locate the requested chart."
          },
          {
            "name": "ResetValues",
            "type": "bool",
            "format": "--reset-values",
            "secret": false,
            "help": "When upgrading, reset the values to the ones built into the chart."
          },
          {
            "name": "ReuseValues",
            "type": "bool",
            "format": "--reuse-values",
            "secret": false,
            "help": "When upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored."
          },
          {
            "name": "Set",
            "type": "Dictionary<string, object>",
            "format": "--set {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SetFile",
            "type": "Dictionary<string, object>",
            "format": "--set-file {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)."
          },
          {
            "name": "SetString",
            "type": "Dictionary<string, object>",
            "format": "--set-string {value}",
            "itemFormat": "{key}={value}",
            "separator": ",",
            "secret": false,
            "help": "Set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)."
          },
          {
            "name": "SkipCrds",
            "type": "bool",
            "format": "--skip-crds",
            "secret": false,
            "help": "If set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled."
          },
          {
            "name": "Timeout",
            "type": "string",
            "format": "--timeout {value}",
            "secret": false,
            "help": "Time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)."
          },
          {
            "name": "Username",
            "type": "string",
            "format": "--username {value}",
            "secret": false,
            "help": "Chart repository username where to locate the requested chart."
          },
          {
            "name": "Values",
            "type": "List<string>",
            "format": "--values {value}",
            "secret": false,
            "help": "Specify values in a YAML file or a URL (can specify multiple)."
          },
          {
            "name": "Verify",
            "type": "bool",
            "format": "--verify",
            "secret": false,
            "help": "Verify the package before using it."
          },
          {
            "name": "Version",
            "type": "string",
            "format": "--version {value}",
            "secret": false,
            "help": "Specify the exact chart version to use. If this is not specified, the latest version is used."
          },
          {
            "name": "Wait",
            "type": "bool",
            "format": "--wait",
            "secret": false,
            "help": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout."
          },
          {
            "name": "Release",
            "type": "string",
            "format": "{value}",
            "help": "The name of the release to upgrade."
          },
          {
            "name": "Chart",
            "type": "string",
            "format": "{value}",
            "help": "The name of the chart to upgrade."
          }
        ]
      }
    },
    {
      "help": "Verify that the given chart has a valid provenance file. Provenance files provide cryptographic verification that a chart has not been tampered with, and was packaged by a trusted provider. This command can be used to verify a local chart. Several other commands provide '--verify' flags that run the same validation. To generate a signed package, use the 'helm package --sign' command.",
      "postfix": "Verify",
      "definiteArgument": "verify",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for verify."
          },
          {
            "name": "Keyring",
            "type": "string",
            "format": "--keyring {value}",
            "secret": false,
            "help": "Keyring containing public keys (default \"~/.gnupg/pubring.gpg\")."
          },
          {
            "name": "Path",
            "type": "string",
            "format": "{value}",
            "help": "The path to the chart to verify."
          }
        ]
      }
    },
    {
      "help": "Show the version for Helm. This will print a representation the version of Helm. The output will look something like this: version.BuildInfo{Version:\"v3.2.1\", GitCommit:\"fe51cd1e31e6a202cba7dead9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.13.10\"} - Version is the semantic version of the release. - GitCommit is the SHA for the commit that this version was built from. - GitTreeState is \"clean\" if there are no local code changes when this binary was   built, and \"dirty\" if the binary was built from locally modified code. - GoVersion is the version of Go that was used to compile Helm. When using the --template flag the following properties are available to use in the template: - .Version contains the semantic version of Helm - .GitCommit is the git commit - .GitTreeState is the state of the git tree when Helm was built - .GoVersion contains the version of Go that Helm was compiled with.",
      "postfix": "Version",
      "definiteArgument": "version",
      "settingsClass": {
        "baseClass": "HelmToolSettings",
        "properties": [
          {
            "name": "Help",
            "type": "bool",
            "format": "--help",
            "secret": false,
            "help": "Help for version."
          },
          {
            "name": "Short",
            "type": "bool",
            "format": "--short",
            "secret": false,
            "help": "Print the version number."
          },
          {
            "name": "Template",
            "type": "string",
            "format": "--template {value}",
            "secret": false,
            "help": "Template for version string format."
          }
        ]
      }
    }
  ],
  "dataClasses": [
    {
      "name": "HelmCommonSettings",
      "extensionMethods": true,
      "properties": [
        {
          "name": "AddDirHeader",
          "type": "bool",
          "format": "--add-dir-header",
          "secret": false,
          "help": "If true, adds the file directory to the header."
        },
        {
          "name": "Alsologtostderr",
          "type": "bool",
          "format": "--alsologtostderr",
          "secret": false,
          "help": "Log to standard error as well as files."
        },
        {
          "name": "Debug",
          "type": "bool",
          "format": "--debug",
          "secret": false,
          "help": "Enable verbose output."
        },
        {
          "name": "Help",
          "type": "bool",
          "format": "--help",
          "secret": false,
          "help": "Help for helm."
        },
        {
          "name": "KubeApiserver",
          "type": "string",
          "format": "--kube-apiserver {value}",
          "secret": false,
          "help": "The address and the port for the Kubernetes API server."
        },
        {
          "name": "KubeContext",
          "type": "string",
          "format": "--kube-context {value}",
          "secret": false,
          "help": "Name of the kubeconfig context to use."
        },
        {
          "name": "KubeToken",
          "type": "string",
          "format": "--kube-token {value}",
          "secret": false,
          "help": "Bearer token used for authentication."
        },
        {
          "name": "Kubeconfig",
          "type": "string",
          "format": "--kubeconfig {value}",
          "secret": false,
          "help": "Path to the kubeconfig file."
        },
        {
          "name": "LogBacktraceAt",
          "type": "string",
          "format": "--log-backtrace-at {value}",
          "secret": false,
          "help": "When logging hits line file:N, emit a stack trace (default :0)."
        },
        {
          "name": "LogDir",
          "type": "string",
          "format": "--log-dir {value}",
          "secret": false,
          "help": "If non-empty, write log files in this directory."
        },
        {
          "name": "LogFile",
          "type": "string",
          "format": "--log-file {value}",
          "secret": false,
          "help": "If non-empty, use this log file."
        },
        {
          "name": "LogFileMaxSize",
          "type": "uint?",
          "format": "--log-file-max-size {value}",
          "secret": false,
          "help": "Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)."
        },
        {
          "name": "Logtostderr",
          "type": "bool",
          "format": "--logtostderr",
          "secret": false,
          "help": "Log to standard error instead of files (default true)."
        },
        {
          "name": "Namespace",
          "type": "string",
          "format": "--namespace {value}",
          "secret": false,
          "help": "Namespace scope for this request."
        },
        {
          "name": "RegistryConfig",
          "type": "string",
          "format": "--registry-config {value}",
          "secret": false,
          "help": "Path to the registry config file (default \"~/.config/helm/registry.json\")."
        },
        {
          "name": "RepositoryCache",
          "type": "string",
          "format": "--repository-cache {value}",
          "secret": false,
          "help": "Path to the file containing cached repository indexes (default \"~/snap/code/common/.cache/helm/repository\")."
        },
        {
          "name": "RepositoryConfig",
          "type": "string",
          "format": "--repository-config {value}",
          "secret": false,
          "help": "Path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")."
        },
        {
          "name": "SkipHeaders",
          "type": "bool",
          "format": "--skip-headers",
          "secret": false,
          "help": "If true, avoid header prefixes in the log messages."
        },
        {
          "name": "SkipLogHeaders",
          "type": "bool",
          "format": "--skip-log-headers",
          "secret": false,
          "help": "If true, avoid headers when opening log files."
        },
        {
          "name": "Stderrthreshold",
          "type": "int",
          "format": "--stderrthreshold {value}",
          "secret": false,
          "help": "Logs at or above this threshold go to stderr (default 2)."
        },
        {
          "name": "V",
          "type": "int",
          "format": "--v {value}",
          "secret": false,
          "help": "Number for the log level verbosity."
        },
        {
          "name": "Vmodule",
          "type": "Dictionary<string, object>",
          "format": "--vmodule {value}",
          "itemFormat": "{key}={value}",
          "separator": ",",
          "secret": false,
          "help": "Comma-separated list of pattern=N settings for file-filtered logging."
        }
      ]
    }
  ],
  "enumerations": [
    {
      "name": "HelmOutputFormat",
      "values": [
        "json",
        "yaml"
      ]
    }
  ]
}