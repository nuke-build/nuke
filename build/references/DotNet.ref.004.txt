
This topic applies to: ✓ .NET Core SDK 1.x ✓ .NET Core SDK 2.x
Name
dotnet build - Builds a project and all of its dependencies.
Synopsis



.NET Core 2.x


.NET Core 1.x



dotnet build [&lt;PROJECT&gt;] [-c|--configuration] [-f|--framework] [--force] [--no-dependencies] [--no-incremental] [--no-restore] [-o|--output] [-r|--runtime] [-v|--verbosity] [--version-suffix]
dotnet build [-h|--help]


dotnet build [&lt;PROJECT&gt;] [-c|--configuration] [-f|--framework] [--no-dependencies] [--no-incremental] [-o|--output] [-r|--runtime] [-v|--verbosity] [--version-suffix]
dotnet build [-h|--help]


Description
The dotnet build command builds the project and its dependencies into a set of binaries. The binaries include the project&#39;s code in Intermediate Language (IL) files with a .dll extension and symbol files used for debugging with a .pdb extension. A dependencies JSON file (*.deps.json) is produced that lists the dependencies of the application. A *.runtimeconfig.json file is produced, which specifies the shared runtime and its version for the application.
If the project has third-party dependencies, such as libraries from NuGet, they&#39;re resolved from the NuGet cache and aren&#39;t available with the project&#39;s built output. With that in mind, the product of dotnet build isn&#39;t ready to be transferred to another machine to run. This is in contrast to the behavior of the .NET Framework in which building an executable project (an application) produces output that&#39;s runnable on any machine where the .NET Framework is installed. To have a similar experience with .NET Core, you need to use the dotnet publish command. For more information, see .NET Core Application Deployment.
Building requires the project.assets.json file, which lists the dependencies of your application. The file is created when dotnet restore is executed. Without the assets file in place, the tooling cannot resolve reference assemblies, which results in errors. With .NET Core 1.x SDK, you needed to explicitily run the dotnet restore before running dotnet build. Starting with .NET Core 2.0 SDK, dotnet restore runs implicitily when you run dotnet build. If you want to disable implicit restore when running the build command, you can pass the --no-restore option.
NoteStarting with .NET Core 2.0, you don&#39;t have to run dotnet restore because it&#39;s run implicitly by all commands, such as dotnet build and dotnet run, that require a restore to occur. It&#39;s still a valid command in certain scenarios where doing an explicit restore makes sense, such as continuous integration builds in Visual Studio Team Services or in build systems that need to explicitly control the time at which the restore occurs.

dotnet build uses MSBuild to build the project; thus, it supports both parallel and incremental builds. Refer to Incremental Builds for more information.
In addition to its options, the dotnet build command accepts MSBuild options, such as /p for setting properties or /l to define a logger. Learn more about these options in the MSBuild Command-Line Reference. 
Whether the project is executable or not is determined by the &lt;OutputType&gt; property in the project file. The following example shows a project that will produce executable code:
&lt;PropertyGroup&gt;
  &lt;OutputType&gt;Exe&lt;/OutputType&gt;
&lt;/PropertyGroup&gt;
In order to produce a library, omit the &lt;OutputType&gt; property. The main difference in built output is that the IL DLL for a library doesn&#39;t contain entry points and can&#39;t be executed. 
Arguments
PROJECT
The project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in proj and uses that file.
Options



.NET Core 2.x


.NET Core 1.x



-c|--configuration {Debug|Release}
Defines the build configuration. The default value is Debug.
-f|--framework &lt;FRAMEWORK&gt;
Compiles for a specific framework. The framework must be defined in the project file.
--force
 Forces all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting the project.assets.json file.
-h|--help
Prints out a short help for the command.
--no-dependencies
Ignores project-to-project (P2P) references and only builds the root project specified to build.
--no-incremental
Marks the build as unsafe for incremental build. This turns off incremental compilation and forces a clean rebuild of the project&#39;s dependency graph.
--no-restore
Doesn&#39;t perform an implicit restore during build.
-o|--output &lt;OUTPUT_DIRECTORY&gt;
Directory in which to place the built binaries. You also need to define --framework when you specify this option.
-r|--runtime &lt;RUNTIME_IDENTIFIER&gt;
Specifies the target runtime. For a list of Runtime Identifiers (RIDs), see the RID catalog.
-v|--verbosity &lt;LEVEL&gt;
Sets the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].
--version-suffix &lt;VERSION_SUFFIX&gt;
Defines the version suffix for an asterisk (*) in the version field of the project file. The format follows NuGet&#39;s version guidelines.


-c|--configuration {Debug|Release}
Defines the build configuration. The default value is Debug.
-f|--framework &lt;FRAMEWORK&gt;
Compiles for a specific framework. The framework must be defined in the project file.
-h|--help
Prints out a short help for the command.
--no-dependencies
Ignores project-to-project (P2P) references and only builds the root project specified to build.
--no-incremental
Marks the build as unsafe for incremental build. This turns off incremental compilation and forces a clean rebuild of the project&#39;s dependency graph.
-o|--output &lt;OUTPUT_DIRECTORY&gt;
Directory in which to place the built binaries. You also need to define --framework when you specify this option.
-r|--runtime &lt;RUNTIME_IDENTIFIER&gt;
Specifies the target runtime. For a list of Runtime Identifiers (RIDs), see the RID catalog.
-v|--verbosity &lt;LEVEL&gt;
Sets the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].
--version-suffix &lt;VERSION_SUFFIX&gt;
Defines the version suffix for an asterisk (*) in the version field of the project file. The format follows NuGet&#39;s version guidelines.


Examples
Build a project and its dependencies:
dotnet build
Build a project and its dependencies using Release configuration:
dotnet build --configuration Release
Build a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):
dotnet build --runtime ubuntu.16.04-x64
